[
  {
    "objectID": "units/11/serialization.html",
    "href": "units/11/serialization.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "CSV files\nPro: tabular data to share with others Cons: can’t store nested data; reader has to guess data types (e.g., Bar Harbor, Maine has ZIP code 4609?) sometimes better to use Excel (XLSX) JSON (JavaScript Object Notation) files\nPros: Used a lot for APIs because… Can store nested objects (e.g., board game states) Looks like normal Python (actually, JavaScript) code Fast; lots of programming languages can work with it Con: few applications can work with them Pickle"
  },
  {
    "objectID": "units/11/modules.html",
    "href": "units/11/modules.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.3 Modules"
  },
  {
    "objectID": "units/11/databases-and-dataframes.html",
    "href": "units/11/databases-and-dataframes.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.6"
  },
  {
    "objectID": "units/10/interaction-design.html",
    "href": "units/10/interaction-design.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "10.2\n\nuse of design and aesthetics\npitfall of persuasive design and addictive design (perspectives: respecting the human in the economy of attention)\n\nsize color spacing and alignment typography layout\nInteraction rips computation out of the clean room of the algorithm and thrusts it into the tainted and unpredictable space of dynamic and shared environment. Interaction forces a rethinking of algorithmic approaches toward those that perform a kind of dance alternating between active computation and respon\u0002sive strategies to a changing environment. Embracing interaction requires the programmer or designer to break open the black boxes of algorithmic processes and acknowledge the incompleteness of what they create in the pursuit of experiences that are playful, insightful, and potentially surprising. - Michael Murtaugh, Software studies"
  },
  {
    "objectID": "units/10/guis.html",
    "href": "units/10/guis.html",
    "title": "Graphical User Interfaces",
    "section": "",
    "text": "Graphical User Interfaces"
  },
  {
    "objectID": "units/10/activities/recipes.html",
    "href": "units/10/activities/recipes.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Recipe organizer gui class"
  },
  {
    "objectID": "units/07/str-method.html",
    "href": "units/07/str-method.html",
    "title": "The __str__ method",
    "section": "",
    "text": "This method is usually implemented to returns a string representation of an object’s state.\n\nAttention: you don’t “print”, you just return a string!\nWhen you call “print” with your object, it will “convert” it to a string representation\n\n\n\nclass Dog():\n  \n  def __str__(self):\n    return f'breed: {self.breed}, age: {self.age}, color: {self.color}'\n  \na = Dog()\na.breed = 'boxer'\na.age = '2'\na.color = 'white'\nprint(str(a))\nprint(a)\n\nbreed: boxer, age: 2, color: white\nbreed: boxer, age: 2, color: white"
  },
  {
    "objectID": "units/07/self.html",
    "href": "units/07/self.html",
    "title": "The self argument",
    "section": "",
    "text": "Everytime you want to reference an attribute of the object inside of a class method, you call self\nFor example, what is self referring to in this example?\n\n\nclass Dog():\n  \n  def crossbreed(self, dog):\n    if self.breed == dog.breed:\n      puppy = Dog(self.breed,0,Dog.average_color(self.color, dog.color))\n    else:\n      puppy = Dog('mutt',0,Dog.average_color(self.color, dog.color))\n    return puppy"
  },
  {
    "objectID": "units/07/oop.html",
    "href": "units/07/oop.html",
    "title": "Object-Oriented Programming",
    "section": "",
    "text": "Originally, computers were designed for just running algorithms for performing specific tasks.\nWith the invention of operating systems, databases and graphical user interfaces, however, programming took a turn toward representing objects virtually and interacting with them.\nFor achieving that, we needed a new way of articulating programming and programming languages: the Object-Oriented Paradigm."
  },
  {
    "objectID": "units/07/oop.html#classes-and-objects",
    "href": "units/07/oop.html#classes-and-objects",
    "title": "Object-Oriented Programming",
    "section": "Classes and objects",
    "text": "Classes and objects\n\nWe define classes, which are basically “blueprints” for the objects (or, you could say, type definitions)\n\nWe instantiate an object of some class by just writing the class name with parenthesis - like Dog()\n\nThese classes define attributes (variables) and methods (functions) for an object of its type.\n\n\n\nclass Dog(): # definition of the class (\"blueprint\")\n  \n  # indentation starts - \"inside of class\"\n  def eat(self):  # a method (NOTICE THAT IT IS INSIDE THE CLASS DEFINITION)\n    pass  # using \"pass\" to write it as an empty function (to be filled later)\n  \n  def sleep(self):\n    pass\n  \n  def sit(self):\n    pass\n\n\n# main code chunk! (outside of class definition now)\na = Dog()  # creates an instance of type \"Dog\"\na.breed = 'Pug'  # its breed (attribute) is 'Pug\"\nb = Dog()\nb.breed = 'Boxer'"
  },
  {
    "objectID": "units/07/oop.html#example-the-turtle-class",
    "href": "units/07/oop.html#example-the-turtle-class",
    "title": "Object-Oriented Programming",
    "section": "Example: the Turtle class",
    "text": "Example: the Turtle class\n\nRemember the turtles we are using to draw? They are also objects of class Turtle.\n\n\nimport turtle\nraphael = turtle.Turtle() # creates a turtle\nleonardo = turtle.Turtle() # creates another turtle\nprint(raphael.pos) # gets the attribute \"position\" of the turtle Raphael\nleonardo.forward(100) # calls the method \"forward\" for the turtle Leonardo"
  },
  {
    "objectID": "units/07/oop.html#some-principles-and-rules",
    "href": "units/07/oop.html#some-principles-and-rules",
    "title": "Object-Oriented Programming",
    "section": "Some principles and rules",
    "text": "Some principles and rules\n\nPEP-8 style guidelines require that we write the names of classes starting with capital letters! (e.g., Dog, Car, Player, etc.).\n\nThis helps A LOT differentiating them from functions (like eat(), sleep(), etc.) and variables (like a, b, etc.).\n\nThe Single Responsibility Principle states that every class should have one and only one responsibility. All class attributes and methods should be aligned with that one responsibility.\n\nThis helps organize classes and makes changes easier.\nAs a class grows, it may need to be split (a process that is part of what we call refactoring)."
  },
  {
    "objectID": "units/07/inheritance.html",
    "href": "units/07/inheritance.html",
    "title": "Class inheritance",
    "section": "",
    "text": "You can derive new classes from old classes, which is called class inheritance. This is useful if you want to add extra or different functionality but don’t lose what you already implemented. See, for example, a class for an Animal:\n\n\nclass Animal():\n  \n  def __init__(self, age, color):\n    self.age = age\n    self.color = color\n    \n  def crossbreed(self, other):\n    return Animal(0, self.color+' and '+other.color)\n  \n  def make_sound(self):\n    print(\"Animal speaks!\")\n\n\nWe can generate some derived classes by putting the parent class inside the parentheses in the class definition\n\n\nclass Dog(Animal):  # Dog is a subclass of Animal\n  \n  def __init__(self, breed, age, color):   # reimplementing the constructor method\n    self.breed = breed\n    self.age = age\n    self.color = color\n    \n  def make_sound(self):   # reimplementing the make_sound method\n    print(\"Woof woof!\")\n    \n    \nclass Cat(Animal):\n  \n  def make_sound(self):\n    print(\"Meow!\")\n    \n    \n# main chunk\nfido = Dog('boxer', 2, 'brown')\nwhiskers = Cat(2, 'black')\nturtle = Animal(1, 'white')\nfido.make_sound()\nwhiskers.make_sound()\nturtle.make_sound()\n\nWoof woof!\nMeow!\nAnimal speaks!\n\n\n\nWe can treat our Dog and Cat as also members of the Animal class! This is what we call polymorphism. For example, if we call crossbreed in any of the Dog and Cat object\n\nBut the problem now will be that we can crossbreed animals of different species… which is a mistake! :P"
  },
  {
    "objectID": "units/07/class-methods.html",
    "href": "units/07/class-methods.html",
    "title": "Class methods and variables",
    "section": "",
    "text": "You can declare variables and methods that are pertaining to the class itself, not to specific instances. In that case, you just don’t use the parameter self.\nTo use those, you don’t call the method on the object (like x.method()), but on the class itself (like Dog.average_color).\nFollowing our last example:\n\n\nclass Dog():\n  \n  max_age = 20\n  \n  def average_color(c1, c2):\n    return c1 + ' and ' + c2\n\n\nprint(Dog.max_age)\nprint(Dog.average_color('black','white'))\n\n20\nblack and white"
  },
  {
    "objectID": "units/07/activities/a-card-game.html",
    "href": "units/07/activities/a-card-game.html",
    "title": "Exercise: a card game",
    "section": "",
    "text": "Exercise: a card game\nTry to write the class definitions for the following class diagram, representing a game of bridge:"
  },
  {
    "objectID": "units/06/return.html",
    "href": "units/06/return.html",
    "title": "Output: return statement",
    "section": "",
    "text": "Function outputs are specified with a return statement\ndef cumulative_sum(n):\n  total = 0\n  for i in range(1,n+1):\n    total += i\n  return total\n\nprint(\"Cumulative sum from 1 to 4 is\", cumulative_sum(4))\n\nCumulative sum from 1 to 4 is 10"
  },
  {
    "objectID": "units/06/return.html#return-always-exits-the-function",
    "href": "units/06/return.html#return-always-exits-the-function",
    "title": "Output: return statement",
    "section": "return always exits the function!",
    "text": "return always exits the function!\n\ndef compute_it(x, y, z):\n    print(\"Calling compute_it\")\n    w = x + y / z\n    return w\n    print(\"Done!\") # this will never be executed\n    \ny = compute_it(1,2,3)\n\nCalling compute_it"
  },
  {
    "objectID": "units/06/return.html#what-if-i-dont-use-return",
    "href": "units/06/return.html#what-if-i-dont-use-return",
    "title": "Output: return statement",
    "section": "What if I don’t use return?",
    "text": "What if I don’t use return?\n\nIf a function has no return statement, Python returns from the function after the last statement is executed\nThe output of a function without return is the null object, which in Python is called None. For example:\n\n\ndef hello():\n  print(\"Hello World!\")\n\nx = hello() # assigning the output of function hello() to x\nprint(x)\nx = print(\"Hello\") # assigning the output of the built-in function print() to x\nprint(x)\n\nHello World!\nNone\nHello\nNone"
  },
  {
    "objectID": "units/06/return.html#returning-multiple-values",
    "href": "units/06/return.html#returning-multiple-values",
    "title": "Output: return statement",
    "section": "Returning multiple values",
    "text": "Returning multiple values\n\nIt is possible to return multiple values as a tuple:\n\n\ndef cumulatives(n):\n  c_sum = 0\n  c_prod = 1\n  for i in range(1,n+1):\n    c_sum += i\n    c_prod *= i\n  return c_sum, c_prod\n\na, b = cumulatives(4)\nprint(\"Cumulative sum is\", a, \"and cumulative product is\", b)\n\nCumulative sum is 10 and cumulative product is 24"
  },
  {
    "objectID": "units/06/parameters.html",
    "href": "units/06/parameters.html",
    "title": "Input: parameters",
    "section": "",
    "text": "Parameters are function inputs\n\nThey are also local variables inside functions and exist only as long as the function is executing\nFor example:\ndef greeter(name):\n    print('Hello', name)\n\ngreeter('Bob')\n\nHello Bob"
  },
  {
    "objectID": "units/06/parameters.html#multiple-parameters",
    "href": "units/06/parameters.html#multiple-parameters",
    "title": "Input: parameters",
    "section": "Multiple parameters",
    "text": "Multiple parameters\n\nimport turtle\n\ndef draw_square(pen, size):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(t, 100)\n\n\nNotice that parameters may be called in order\nIf we don’t want to follow this order, or we want to specify which parameter receives what, we simply state the names of the parameters:\n\n\ndraw_square(pen=t, size=100)\n\n\nWhat happens if we don’t specify all the parameters?\n\nimport turtle\n\ndef draw_square(pen, size):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(100)"
  },
  {
    "objectID": "units/06/parameters.html#preset-parameters",
    "href": "units/06/parameters.html#preset-parameters",
    "title": "Input: parameters",
    "section": "Preset parameters",
    "text": "Preset parameters\n\nWe can pre-specify the values of some parameters by assigning some value to them in the definition\n\nThis also makes the parameter assignment optional when the function is called: see draw_square(t)\n\nThe function will run every time as if size=100, unless we say different\n\n\n\n\nimport turtle\n\ndef draw_square(pen, size=100):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(t)"
  },
  {
    "objectID": "units/06/mediality.html",
    "href": "units/06/mediality.html",
    "title": "Functions are mediators of action",
    "section": "",
    "text": "Functions are mediators of action\n\nFunctions, as every technological tool, give us the power to do something. However…\nI only have the power to do something with a tool if I submit to the rules of the tool\n\n\n\nI only have the power to do something with a technology if I submit to the world that makes the technology possible.\n\n\n\nLet’s represent this as a network of mediators:\n\n\n\nCan you think about more actors in this network? (By the way, this type of analysis is commonly referred as Actor-Network Theory)\nThus: one doesn’t simply ‘use’ a technology. You also ‘use’ the whole world around the technology. If someone does something, everyone is also doing something. The actor is the network, the network is the actor. This is also referred to as an [assemblage](https://en.wikipedia.org/wiki/Assemblage_(philosophy)\n\n\n\nThink about more examples…\n\n\n“Technology produces, defines and constrains a series of subsequent options that can be selected by the user, and the selection of these options depends, in turn, on a broader technological application. In short, we are not free to use various technologies in the way we choose, [since] whoever chooses is shaped by the choices being made or contemplated. Moral vision, and therefore also moral evaluation, is enveloped by a set of values that are imposed by technological potential rather than the other way around.” –George Grant, Technology and Empire\n\n\nHow does that happen in programming? To achieve something with programming, you need:\n\nA standardized programming language (eg. Python)\nOther libraries and functions implemented in Python\nA Python compiler/interpreter\nAn operating system which runs Python, its compiler/interpreters, and its libraries (Windows, Linux, Mac)\nA PC or other similar device, which requires:\nMicroelectronics and hardware industry\nIndustrial standards and interfaces (IEEE, ISO), etc.\nWhat more?\n\nQuestion: is it a good thing to rely on all the mediators around our technology? Could we be accomplices in propagation of evil?"
  },
  {
    "objectID": "units/06/docstrings.html",
    "href": "units/06/docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "The PEP8 standard requires docstrings for functions, describing what the function does.\n\nThis comment should appear after the def line\nThe ''' that ends a multiline docstring should be on a line by itself\nThese docstrings can be accessed in many IDEs, facilitating development\ndef cube_volume(side_length):\n    ''' Compute the volume of a cube\n        Parameter: side_length is side length of cube\n        returns: volume\n    '''\n    volume = side_length ** 3\n    return volume"
  },
  {
    "objectID": "units/06/docstrings.html#using-docstrings-in-development",
    "href": "units/06/docstrings.html#using-docstrings-in-development",
    "title": "Docstrings",
    "section": "Using docstrings in development",
    "text": "Using docstrings in development"
  },
  {
    "objectID": "units/06/abstraction.html",
    "href": "units/06/abstraction.html",
    "title": "Abstraction",
    "section": "",
    "text": "Abstraction\n\nAbstraction is the process of ignoring details to focus on the big picture\nExample: consider a television\n\nMost people don’t know how a TV works, but they can still use it\nA TV can be abstracted as box with inputs and outputs as follows:\n\n\n\n\n\nAbstractions hide the details and make your solutions reach other people.\n\nExample: prefab mods in building games - you download the item and create it in your game."
  },
  {
    "objectID": "units/05/the-halting-problem.html",
    "href": "units/05/the-halting-problem.html",
    "title": "Infinite loops",
    "section": "",
    "text": "If a loop termination condition is never met, we have an “infinite loop”\n\n\ncount = 0\nwhile (count &lt; 9):\n   print('The count is:', count)\nprint(\"Good bye!\")\n\n\nIn this case, notice we didn’t update the counting variable (also called iterator or loop variable)\n\n\nThe Halting Problem\n\nIs it possible to be sure that a program is not stuck?\nImpressively, Alan Turing proved that NO! Computer programs are undecidable.\n\n\n\n\nDiscussion: what is enough?\n\nIn some sense, that means that there is not always an mathematical/algorithmic answer to the question: “is it enough?”\nMaybe we can say that, as society gets more control over reality, nothing is enough. We enter in what sociologist Hartmut Rosa explored as an acceleration society. We don’t know any halt.\n\n\n“Pure activity does nothing more than prolong what already exists. (…) Activity that follows the stupidity of mechanics is poor in interruptions. Machines cannot pause. Despite all its computational performance, the computer is stupid, in that it lacks the ability to hesitate. (…) Possibly the computer counts faster than the human brain, and without repulsion welcomes an immensity of data, because it is free from any alterity. It is a positive machine. Precisely because of its autistic self-relation, because of the lack of nativity, the idiot savant generates those performances that only a computational machine would be capable of. In the thrust of that general positivation of the world, both man and society become a machine of autistic performance.” - Byung-Chul Han, “The Burnout Society”\n\n\n“… our hearts are restless till they find rest in Thee.” - Augustine of Hippo, Confessions"
  },
  {
    "objectID": "units/05/ranges.html",
    "href": "units/05/ranges.html",
    "title": "Ranges",
    "section": "",
    "text": "Ranges\n\nrange is a data type that offers an iterable sequence of integers\n\nTo create a range, you can use 1 to 3 arguments:\n\nrange(stop): integer sequence will go from 0 to stop - 1\n\nExample: list(range(4)) is [0,1,2,3]\n\nrange(start,stop): integer sequence will go from start to stop - 1\n\nExample: list(range(3, 7)) is [3,4,5,6]\n\nrange(start,stop, step): integer sequence will go from start to stop summing step at each stage\n\nExample: list(range(1,10,3)) is [1,4,7]"
  },
  {
    "objectID": "units/05/list-comprehensions.html",
    "href": "units/05/list-comprehensions.html",
    "title": "List comprehensions",
    "section": "",
    "text": "Python offers a shorter syntax when you want to create a new list based on the values of an existing sequence.\nFor example:\nnames = [\"Anakin\", \"Luke\", \"Leia\"]\nnames_with_last_name = [ n+\" Skywalker\" for n in names]\nprint(names_with_last_name)\n\n['Anakin Skywalker', 'Luke Skywalker', 'Leia Skywalker']"
  },
  {
    "objectID": "units/05/list-comprehensions.html#other-examples",
    "href": "units/05/list-comprehensions.html#other-examples",
    "title": "List comprehensions",
    "section": "Other examples:",
    "text": "Other examples:\nUsing ranges:\n\nlength = 15\nexponents2 = [ 2**i for i in range(length)]\nprint(exponents2)\n\n[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\n\n\nNesting comprehensions:\n\nw = 4\nh = 4\nzero_matrix = [ [0 for j in range(h)] for i in range(w)]\nprint(zero_matrix)\n\n[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"
  },
  {
    "objectID": "units/05/list-comprehensions.html#examples",
    "href": "units/05/list-comprehensions.html#examples",
    "title": "List comprehensions",
    "section": "Examples:",
    "text": "Examples:\nChecking conditions:\n\nx = [3, 6, -2, 5, -12, 5, -1]\nonly_positives = [i for i in x if i &gt; 0]\nprint(only_positives)\n\n[3, 6, 5, 5]\n\n\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x for x in fruits if \"a\" in x]\nprint(newlist)\n\n['apple', 'banana', 'mango']"
  },
  {
    "objectID": "units/05/list-comprehensions.html#creating-a-scenario-see-our-tile-drawing-exercise",
    "href": "units/05/list-comprehensions.html#creating-a-scenario-see-our-tile-drawing-exercise",
    "title": "List comprehensions",
    "section": "Creating a scenario (see our tile drawing exercise)",
    "text": "Creating a scenario (see our tile drawing exercise)\n\nlevel = [['s' if j&lt;8 else 'g' for i in range(10)] for j in range(10)]"
  },
  {
    "objectID": "units/05/ethics-of-automation.html",
    "href": "units/05/ethics-of-automation.html",
    "title": "The ethics of automation",
    "section": "",
    "text": "Algorithms are formal specifications of automation. And loops enable us to scale those.\n\n\n“Digital computers were invented as a way of replacing people with something faster, less error prone, and tireless, mirroring the productivity values of the industrial revolution.” - Amy Ko, Computers\n\n\nWhen is this good? When to automate? When to not automate?\n\n\n“The key question isn’t ‘How much will be automated?’ It’s how we’ll conceive of whatever can’t be automated at a given time” - Jaron Lanier, Who Owns the Future?\n\n\n\n\n\n\nA golem is an animated, anthropomorphic being in Jewish folklore, which is entirely created from inanimate matter, usually clay or mud. The most famous golem narrative involves Judah Loew ben Bezalel, the late 16th-century rabbi of Prague. In Modern Hebrew, golem is used to mean “dumb” or “helpless”, or a pupa. Similarly, it is often used today as a metaphor for a mindless lunk or entity that serves a man under controlled conditions but is hostile to him under other conditions.\n\n\n\n\n\n\nDisney’s The Sorcerer’s Apprentice - a tale about dumb automation\nThe job displacement debate - will automation take over?\nWhat are your opinions about automation?\n\n\n\n\n\n\nIn the Akkadian Epic of Atrahasis humans were created so that they could “assume the drudgery of the god.”\nIn the Sumerian myth Enki and Ninmah they were created so that the gods would “be freed from their toil.”\nIn the Babylonian Enuma Elish the god Marduk creates man “on whom the toil of the gods [would] be laid that they may rest.”71\nThese myths carry not only the etiological account of humankind but also lay judgment on the nature and purpose of human labor — it is in essence just a burden, and we need to pass it along to the less powerful.\n\n\n“What has a man from all the toil and striving of heart with which he toils beneath the sun? For all his days are full of sorrow, and his work is a vexation. Even in the night his heart does not rest. This also is vanity.\nThere is nothing better for a person than that he should eat and drink and find enjoyment in his toil. This also, I saw, is from the hand of God, for apart from him who can eat or who can have enjoyment? For to the one who pleases him God has given wisdom and knowledge and joy, but to the sinner he has given the business of gathering and collecting, only to give to one who pleases God. This also is vanity and a striving after wind. Ecclesiastes 2.22-26\n\n\nIn the Genesis account, God is not burdened by his work but rather takes delight in it. And humanity, rather than being created to relieve him from work, was made to share in it. The principle connecting humanity’s origin with the purpose of work is not delegation but participation.\n\n\n\n\n\nBy delegating everything to machines, we alienate ourselves from life, from meaning, from purpose.\n\n\n“Our contact with reality has been attenuated to the pushing of buttons and the turning of handles. The results are guaranteed by machinery that is not of our design and often beyond our understanding. Hence the feelings of liberation and enrichment quickly fade; the new devices lose their glamour and meld into the conspicuous periphery of normalcy; boredom replaces exhilaration.” Albert Borgmann, Technology and the Character of Contemporary Life\n\n\n\n\n\nInstead of disengaging, technology should help us to engage more with the world and how it reveals God’s glory to us. This doesn’t exclude automation, but gives it a purpose.\nWhat are ways you can think of about engaging more with…\n\nPeople/Community?\nPlaces?\nNature?\nYour body?\nArt? (including skillful practices - cooking, crafting…?)\nSpecific moments of life? (see James K. A. Smith’s “How to Inhabit Time”)\nThe reality of suffering, misery, and “creation’s groaning and waiting for redemption”?"
  },
  {
    "objectID": "units/05/ethics-of-automation.html#narratives-about-automation",
    "href": "units/05/ethics-of-automation.html#narratives-about-automation",
    "title": "The ethics of automation",
    "section": "",
    "text": "A golem is an animated, anthropomorphic being in Jewish folklore, which is entirely created from inanimate matter, usually clay or mud. The most famous golem narrative involves Judah Loew ben Bezalel, the late 16th-century rabbi of Prague. In Modern Hebrew, golem is used to mean “dumb” or “helpless”, or a pupa. Similarly, it is often used today as a metaphor for a mindless lunk or entity that serves a man under controlled conditions but is hostile to him under other conditions.\n\n\n\n\n\n\nDisney’s The Sorcerer’s Apprentice - a tale about dumb automation\nThe job displacement debate - will automation take over?\nWhat are your opinions about automation?"
  },
  {
    "objectID": "units/05/ethics-of-automation.html#ancient-narratives-about-work",
    "href": "units/05/ethics-of-automation.html#ancient-narratives-about-work",
    "title": "The ethics of automation",
    "section": "",
    "text": "In the Akkadian Epic of Atrahasis humans were created so that they could “assume the drudgery of the god.”\nIn the Sumerian myth Enki and Ninmah they were created so that the gods would “be freed from their toil.”\nIn the Babylonian Enuma Elish the god Marduk creates man “on whom the toil of the gods [would] be laid that they may rest.”71\nThese myths carry not only the etiological account of humankind but also lay judgment on the nature and purpose of human labor — it is in essence just a burden, and we need to pass it along to the less powerful.\n\n\n“What has a man from all the toil and striving of heart with which he toils beneath the sun? For all his days are full of sorrow, and his work is a vexation. Even in the night his heart does not rest. This also is vanity.\nThere is nothing better for a person than that he should eat and drink and find enjoyment in his toil. This also, I saw, is from the hand of God, for apart from him who can eat or who can have enjoyment? For to the one who pleases him God has given wisdom and knowledge and joy, but to the sinner he has given the business of gathering and collecting, only to give to one who pleases God. This also is vanity and a striving after wind. Ecclesiastes 2.22-26\n\n\nIn the Genesis account, God is not burdened by his work but rather takes delight in it. And humanity, rather than being created to relieve him from work, was made to share in it. The principle connecting humanity’s origin with the purpose of work is not delegation but participation."
  },
  {
    "objectID": "units/05/ethics-of-automation.html#delegation",
    "href": "units/05/ethics-of-automation.html#delegation",
    "title": "The ethics of automation",
    "section": "",
    "text": "By delegating everything to machines, we alienate ourselves from life, from meaning, from purpose.\n\n\n“Our contact with reality has been attenuated to the pushing of buttons and the turning of handles. The results are guaranteed by machinery that is not of our design and often beyond our understanding. Hence the feelings of liberation and enrichment quickly fade; the new devices lose their glamour and meld into the conspicuous periphery of normalcy; boredom replaces exhilaration.” Albert Borgmann, Technology and the Character of Contemporary Life"
  },
  {
    "objectID": "units/05/ethics-of-automation.html#engagement",
    "href": "units/05/ethics-of-automation.html#engagement",
    "title": "The ethics of automation",
    "section": "",
    "text": "Instead of disengaging, technology should help us to engage more with the world and how it reveals God’s glory to us. This doesn’t exclude automation, but gives it a purpose.\nWhat are ways you can think of about engaging more with…\n\nPeople/Community?\nPlaces?\nNature?\nYour body?\nArt? (including skillful practices - cooking, crafting…?)\nSpecific moments of life? (see James K. A. Smith’s “How to Inhabit Time”)\nThe reality of suffering, misery, and “creation’s groaning and waiting for redemption”?"
  },
  {
    "objectID": "units/05/activities/tile-drawing.html",
    "href": "units/05/activities/tile-drawing.html",
    "title": "Example: tile drawing",
    "section": "",
    "text": "Let’s use some loops to draw a tiled scenery using Turtle graphics!\n\nDownload the images for the three tiles we will be using: grass, sky and brick. Notice that all tiles are of size 42x42.\nNow, look at this starter code:\n\nimport turtle\n\ntiles = {'b':'brick.gif', 'g':'grass.gif', 's': 'sky.gif'}\n\nfor i in tiles:\n    turtle.register_shape(tiles[i])\n\nlevel = []\nf = open(\"level.txt\", \"r\")\nfor x in f:\n  level.append(x[0:len(x)-1])\n  \npen = turtle.Turtle()\n\nIt is loading a file called level.txt. This file could have different arrangements of characters, which are depicting the three types of blocks. For example, your level.txt file could be:\nssssssss\nsssbbsss\nssssssss\nsbbssbbs\nssssssss\ngggggggg\ngggggggg\ngggggggg\nThese characters are loaded and stored in the list of lists (matrix!) level.\nNow, how can we draw these tiles in the screen? To make the turtle “print” an image — for example, a grass tile —, you have to set:\n\npen.shape(level['g']) # sets the shape of the turtle of type 'grass'\npen.stamp() # \"stamps\" the turtle\n\nLet’s then construct a loop to draw all the tiles in the matrix level!"
  },
  {
    "objectID": "units/05/activities/accumulators.html",
    "href": "units/05/activities/accumulators.html",
    "title": "Pattern: accumulator",
    "section": "",
    "text": "An accumulator is the name we give to a variable that is updated at each loop.\nFor example, identify the accumulator variables in the following code:\nproduct = 1\ncount = 0\nwhile count &lt; 5:\n  number = int(input(\"Enter an integer:\"))\n  product *= number\nprint(\"The total product is\", product)"
  },
  {
    "objectID": "units/05/activities/accumulators.html#example-fibonacci-sequence",
    "href": "units/05/activities/accumulators.html#example-fibonacci-sequence",
    "title": "Pattern: accumulator",
    "section": "Example: Fibonacci sequence",
    "text": "Example: Fibonacci sequence\n\nacc1 = 1\nacc2 = 1\nfib = [1, 1]\nlength_fib = 10\ni = 1\nwhile i &lt; length_fib:\n    next_number = acc1 + acc2\n    fib.append(next_number)\n    acc1 = acc2\n    acc2 = next_number\n    i += 1\nprint(\"The Fibonnaci sequence is\", fib)"
  },
  {
    "objectID": "units/04/membership-ops.html",
    "href": "units/04/membership-ops.html",
    "title": "Membership operators",
    "section": "",
    "text": "The membership operators in returns True if the left operand matches the value of some element in a container\n\n\nsizes = [3, 5, 7, 9.5, 10, 10.5, 11]\nif 10 in sizes:\n  print('Sizes include size 10')\n\nSizes include size 10\n\n\nIt can also be used to check whether a substring is part of a larger string:\n\ndata = '123abc456'\nif 'abc' in data:\n  print('abc found in data')\n\nabc found in data"
  },
  {
    "objectID": "units/04/if.html",
    "href": "units/04/if.html",
    "title": "If statement",
    "section": "",
    "text": "Until now we have been only looking at a sequential, step-by-step program flow.\nWhat if we want our code to execute different code given some conditions?\n\n\n\n\n\n\n\n\nIn Python, an if statement takes the following form:\n\n\nx=1\nif expression:\n  # statements executed if expression is true\n# statements following the if expression (execute independently of expression being true or false)\n\n\nAttention to indentation: all lines that will be executed if the expression is true must start with a “tab” or 4 whitespaces\nLines of code that are not indented (“inside the if”) just are followed after it is finished"
  },
  {
    "objectID": "units/04/elif.html",
    "href": "units/04/elif.html",
    "title": "Multi-way selection",
    "section": "",
    "text": "You can also use the word elif in case you need to check a condition after other condition is False. In this way, we have multiple branches, for more than two alternatives.\n\n\nif grade &gt;= 90:\n    print('A')\nelif grade &gt;= 80:\n    print('B')\nelif grade &gt;= 70:\n    print('C')\nelif grade &gt;= 60:\n    print('D')\nelse:\n    print('F')"
  },
  {
    "objectID": "units/04/comparison-ops.html",
    "href": "units/04/comparison-ops.html",
    "title": "Comparison operators",
    "section": "",
    "text": "Operator\nName\n\n\n\n\n==\nEqual\n\n\n!=\nNot equal\n\n\n&gt;\nGreater than\n\n\n&lt;\nLess than\n\n\n&gt;=\nGreater than or equal to\n\n\n&lt;=\nLess than or equal to"
  },
  {
    "objectID": "units/04/comparison-ops.html#floating-point-comparisons",
    "href": "units/04/comparison-ops.html#floating-point-comparisons",
    "title": "Comparison operators",
    "section": "Floating point comparisons",
    "text": "Floating point comparisons\n\na = 0.15 + 0.15\nb = 0.10 + 0.20\n\nprint(a == b)\nprint(a &gt;= b)\n\nFalse\nFalse\n\n\nWhat is happening here? How might we perform a reasonable comparison between these floating point numbers?\n\nOne way to solve: use math.isclose():\n\nimport math\n\na = 0.15 + 0.15\nb = 0.10 + 0.20\n\nprint(math.isclose(a,b))\n\nTrue"
  },
  {
    "objectID": "units/04/comparison-ops.html#sequence-comparison",
    "href": "units/04/comparison-ops.html#sequence-comparison",
    "title": "Comparison operators",
    "section": "Sequence comparison",
    "text": "Sequence comparison\n\nFor equality and non-equality:\n\n\na = \"Hi\"\nb = \"Hi\"\nc = \"Hello\"\nprint(a == b)\nprint(a == c)\nprint(a != b)\nprint(a != c)\n\nTrue\nFalse\nFalse\nTrue\n\n\n\na = [1,2]\nb = [1,2]\nprint(a == b)\n\nTrue\n\n\n\nHowever, order matters:\n\na = [1,2]\nb = [2,1]\nprint(a == b)\n\nFalse\n\n\n(after all, with strings it is also easy to see that Hi is different than iH).\nIf we need to ignore order, and compare only elements, we can compare the sorted lists:\n\na = [1,2]\nb = [2,1]\nprint(sorted(a) == sorted(b))\n\nTrue"
  },
  {
    "objectID": "units/04/comparison-ops.html#greater-and-smaller-than",
    "href": "units/04/comparison-ops.html#greater-and-smaller-than",
    "title": "Comparison operators",
    "section": "Greater and smaller than",
    "text": "Greater and smaller than\nSequences follow a lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted.\nFor example, all comparisons below are True:\n\n(1, 2, 3)              &lt; (1, 2, 4)\n[1, 2, 3]              &lt; [1, 2, 4]\n'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'\n(1, 2, 3, 4)           &lt; (1, 2, 4)\n(1, 2)                 &lt; (1, 2, -1)\n(1, 2, 3)             == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab'))   &lt; (1, 2, ('abc', 'a'), 4)"
  },
  {
    "objectID": "units/04/comparison-ops.html#comparison-operator-chaining",
    "href": "units/04/comparison-ops.html#comparison-operator-chaining",
    "title": "Comparison operators",
    "section": "Comparison operator chaining",
    "text": "Comparison operator chaining\nDifferently from most other languages, Python supports operator chaining, like 2 &lt; x &lt; 5.\n\nChaining compares left to right, evaluating a &lt; b first\nIf the result is true, then b &lt; c is evaluated next\n\n\nage = int(input('Please enter your age: '))\nif 12 &lt; age &lt; 20:\n  print('You are a teenager')"
  },
  {
    "objectID": "units/04/activities/exercises2.html",
    "href": "units/04/activities/exercises2.html",
    "title": "Exercises",
    "section": "",
    "text": "Write a program that prompts the user to enter a pH value. Then, print an indication of whether the pH given indicates an acid (value &lt; 7.0), base (value &gt; 7.0) or neutral (value is 7.0) substance.\nAssuming that pH values range from 0.0 to 14.0, update your program so that only valid pH values are considered.\n\n\n\nDesign and implement a program that inputs student grades from three students (A to F) and prints the highest one. (To make the problem more “interesting”, don’t use the max function to solve this problem.)\n\n\n\nImplement an algorithm that would take an user to a series of questions to let him know if he is a horse. The procedure will follow the flowchart:"
  },
  {
    "objectID": "units/04/activities/exercises2.html#exercise-1-selecting-ph-values",
    "href": "units/04/activities/exercises2.html#exercise-1-selecting-ph-values",
    "title": "Exercises",
    "section": "",
    "text": "Write a program that prompts the user to enter a pH value. Then, print an indication of whether the pH given indicates an acid (value &lt; 7.0), base (value &gt; 7.0) or neutral (value is 7.0) substance.\nAssuming that pH values range from 0.0 to 14.0, update your program so that only valid pH values are considered."
  },
  {
    "objectID": "units/04/activities/exercises2.html#exercise-2-getting-the-highest-grade",
    "href": "units/04/activities/exercises2.html#exercise-2-getting-the-highest-grade",
    "title": "Exercises",
    "section": "",
    "text": "Design and implement a program that inputs student grades from three students (A to F) and prints the highest one. (To make the problem more “interesting”, don’t use the max function to solve this problem.)"
  },
  {
    "objectID": "units/04/activities/exercises2.html#exercise-3-are-you-a-horse",
    "href": "units/04/activities/exercises2.html#exercise-3-are-you-a-horse",
    "title": "Exercises",
    "section": "",
    "text": "Implement an algorithm that would take an user to a series of questions to let him know if he is a horse. The procedure will follow the flowchart:"
  },
  {
    "objectID": "units/04/activities/a-nasty-list-error.html",
    "href": "units/04/activities/a-nasty-list-error.html",
    "title": "Example: a nasty list error",
    "section": "",
    "text": "Let’s pickup from yesterday’s lab about TextBlob processing.\n\nfrom textblob import TextBlob\n\ncreation = \"In the beginning God created the heaven and the earth. \\\nAnd the earth was waste and void; and darkness was upon the face of the deep: and the spirit of God moved upon the face of the waters.\"\n\nb = TextBlob(creation)\n\nSuppose we now want to create a list whose indexes do not count the words with certain lengths, but rather add these words to a list. We want to know which words from the text have a certain size.\nFor that, we try to create a list with 20 positions (corresponding to word lengths) containing an empty list.\nThen, as we pass through every word of the text, we add the word to the list in the corresponding position:\n\nwords_of_each_length = [[]]*20   # creating a list with 20 lists\nfor aWord in b.words:\n  words_of_each_length[len(aWord)].append(aWord) # appending to the list in the corresponding position according to length\n\nNow, try to check the lists corresponding to words of size 2 and 3, like print(words_of_each_length[3]) and print(words_of_each_length[4])\nWhat happened??? The lists are the same and contain all words???\n\nRemember we talked about how LISTS ARE MUTABLE, so that’s why we need to copy?\nSo, our error happened when we did words_of_each_length = [[]]*20\nCheck the ids of the lists in each position of our greater list:\n\nprint(id(words_of_each_length[3]))\nprint(id(words_of_each_length[4]))\n\nThey are the same! We have been adding words to the same list, which is repeated in every position of words_of_each_length.\nHow to fix that? Well, we need to make sure each list is a different list. Using the multiplier *20 won’t do. There are many ways to do that, and we will see some syntax later, but a possible solution is to declare the list as:\n\nwords_of_each_length = [[] for i in range(20)]\n\nNow, check the ids of each element. This should work by now. Whew!"
  },
  {
    "objectID": "units/03/strings.html",
    "href": "units/03/strings.html",
    "title": "Strings",
    "section": "",
    "text": "Are immutable, but unlike tuples, they only permit characters as its contents. Specified with \"\".\n\n\na = \"Hello World\"\nprint(a[1])\nprint(a[4:9])\n\ne\no Wor\n\n\nImportant: since they can’t change, all the methods applied to immutable objects are making copies of them! For example:\n\na = \"Hello\"\nb = a.upper()\nprint(b)\nprint(id(a))\nprint(id(b))\n\nHELLO\n139768286558960\n139768286558192"
  },
  {
    "objectID": "units/03/lists.html",
    "href": "units/03/lists.html",
    "title": "Lists",
    "section": "",
    "text": "Mutable sequences, represented as values separated with commas and enclosed with square brackets []."
  },
  {
    "objectID": "units/03/lists.html#what-can-go-in",
    "href": "units/03/lists.html#what-can-go-in",
    "title": "Lists",
    "section": "What can go in?",
    "text": "What can go in?\n\nLists and tuples can be a collection of items of any type.\n\n\nx = (1, 3.33333, \"hello\", True, 4)\n\n\nYou can even make tuples of tuples, lists of lists, lists of tuples…\n\nFor example: a 3x3 matrix - a 3-element list of 3-element lists\n\n\n\nmat = [[1,2,3],\n      [4,5,6],\n      [7,8,9]]\nprint(mat[0][1]) # accessing value in row 0 and column 1\n\n2"
  },
  {
    "objectID": "units/03/lists.html#changing-versus-copying",
    "href": "units/03/lists.html#changing-versus-copying",
    "title": "Lists",
    "section": "Changing versus copying",
    "text": "Changing versus copying\nWhen dealing with mutable objects, it is very important to check if an operation is changing the object or making a copy of it.\nFor example:\n\na = [1,2,3]\nb = a\na[1] = 5\nprint(b)\n\n[1, 5, 3]\n\n\n\nWhat happened here? Wasn’t b supposed to remain [1,2,3]?\na and b are pointing to the same object (the list [1,2,3]). If we change something in a, we change in b and vice-versa.\nYou can check that with the function id(), which finds an unique integer identifier for each object.\n\n\nprint(id(a))\nprint(id(b))\n\n139886173033408\n139886173033408\n\n\n\nIt is different if we make a copy of the object.\n\na = [1,2,3]\nb = a.copy()\na[1] = 5\nprint(a)\nprint(b)\n\n[1, 5, 3]\n[1, 2, 3]\n\n\n\nLook at the different ids: they are different objects, and thus are independent of each other.\n\n\nprint(id(a))\nprint(id(b))\n\n139886173073920\n139886173045312\n\n\n\nThis happens because lists are mutable objects (just as dictionaries, as we’ll see).\n\nMutable objects need to be copied. Immutable objects don’t."
  },
  {
    "objectID": "units/03/built-in-types.html",
    "href": "units/03/built-in-types.html",
    "title": "Built-in types",
    "section": "",
    "text": "Object types are the ways we have to represent information in our programming.\nPython has some built-in types we have already seen, but now we will see more.\nSome of them are:\nIt is always useful to consult documentation on each to see what you can and can’t do with them."
  },
  {
    "objectID": "units/03/built-in-types.html#container-types",
    "href": "units/03/built-in-types.html#container-types",
    "title": "Built-in types",
    "section": "Container types",
    "text": "Container types\n\nSome of these stand for objects that are collection of other objects. These are called containers.\nFor example, you may have a variable pointing to a single number (a numeric type). But you can also a variable pointing to a collection of numbers, or strings, or even other collections of numbers.\nThink like “drawers” or “boxes” in a bookshelf"
  },
  {
    "objectID": "units/03/built-in-types.html#subscriptable-types",
    "href": "units/03/built-in-types.html#subscriptable-types",
    "title": "Built-in types",
    "section": "Subscriptable types",
    "text": "Subscriptable types\n\nRemember our metaphor: objects are buildings, variables are addresses\n\nAs we have types of houses (residential, commercial), we also have types of objects (integer, float, string)\n\nHow is an address when we have a condo or apartment building - i.e., multiple “houses” in the same address?\n\n“1234 Smith Ave Apt 101”\n\nIt is also possible to have containers whose contents can be accessed by some “complement”. These are called subscripts.\n\nTo access a value, we write the variable followed by some value inside square brackets []\n\n\n\nFor example, a Python list:\n\ncondo = [\"room 1\", \"room 2\", \"room 3\"]\nprint(condo[0])\n\nroom 1\n\n\nNotice that if we try to “subscript” an object which is not subscriptable, we get an error:\n\nhouse = 3\nprint(house[0])\n\nTypeError: 'int' object is not subscriptable"
  },
  {
    "objectID": "units/03/built-in-types.html#sequence-vs-mapping-types",
    "href": "units/03/built-in-types.html#sequence-vs-mapping-types",
    "title": "Built-in types",
    "section": "Sequence vs mapping types",
    "text": "Sequence vs mapping types\n\nIn sequence types such as lists, tuples and strings, subscripts are integer numbers, which are called indexes.\n\nAttention: indexes always starts at zero!\nindex 0 is for 1st element, index 1 is for 2nd, and so on…\n\n\n\ncondo = \"room 1\", \"room 2\", \"room 3\"\nprint(condo[0])\nprint(condo[1])\nprint(condo[2])\n\nroom 1\nroom 2\nroom 3\n\n\n\nIf the index can’t be found, we will have an error:\n\n\ncondo = \"room 1\", \"room 2\", \"room 3\"\nprint(condo[4])\n\nIndexError: tuple index out of range\n\n\n\nIn mapping types, however, subscripts can be any kind of object (given that it is an immutable object — e.g., lists are not allowed), which are called, in this case, keys.\nThis is the case of the dictionary type (dict):\n\n\nband = {\"vocals\": \"John Anderson\", \"guitar\":\"Steve Howe\", \"bass\": \"Chris Squire\", \"keyboard\": \"Rick Wakeman\"}\nprint(band[\"vocals\"])\nprint(band[\"guitar\"])\n\nJohn Anderson\nSteve Howe"
  },
  {
    "objectID": "units/03/built-in-types.html#type-properties",
    "href": "units/03/built-in-types.html#type-properties",
    "title": "Built-in types",
    "section": "Type properties",
    "text": "Type properties\n\nSubscriptable types: containers whose objects can be accessed using square brackets [];\nOrdered types: containers whose elements are ordered and thus can be accessed by an index (integer number);\nImmutable types: objects whose elements cannot be changed;\nCallable types: functions and classes (check, for example, type(print) or type(math.cos))\n\nYou “call” these objects to execute some code by typing the object followed by parenthesis (and eventually pass some information inside the parenthesis): print(\"hi\")\nSee what happens if you try calling a non-callable object:\n\n\n\na = 1\na()\n\nTypeError: 'int' object is not callable\n\n\n\nTesting some syntax…\n\na = 1\na[0]\n\nTypeError: 'int' object is not subscriptable\n\n\n\na = 1\na(0)\n\nTypeError: 'int' object is not callable\n\n\n\na = 1\na{0}\n\nSyntaxError: invalid syntax (2290390298.py, line 2)"
  },
  {
    "objectID": "units/03/built-in-types.html#summarizing-properties",
    "href": "units/03/built-in-types.html#summarizing-properties",
    "title": "Built-in types",
    "section": "Summarizing properties",
    "text": "Summarizing properties\n\n\n\n\n\n\n\n\n\n\nType\nContainer\nSubscriptable\nOrdered (sequence)\nMutable\n\n\n\n\nNumbers and booleans\nNo\nNo\nNo\nNo\n\n\nLists\nYes\nYes (integers)\nYes\nYes\n\n\nTuples\nYes\nYes (integers)\nYes\nNo\n\n\nStrings\nYes (only characters)\nYes (integers)\nYes\nNo\n\n\nDictionaries\nYes\nYes (immutable objects)\nNo\nYes\n\n\nSets\nYes (only immutable objects)\nNo\nNo\nYes"
  },
  {
    "objectID": "units/03/activities/information-society.html",
    "href": "units/03/activities/information-society.html",
    "title": "A world of 0’s and 1’s",
    "section": "",
    "text": "Think about how much we can represent as digital information: numbers, text, images…\n\nSee, for example, how integers and floats are represented as binary numbers\nThe ASCII table, for example, is used to represent text. And the UNICODE system is used for more character variety.\nThe bitmap format, for example, is also a way to represent an image with many triplets corresponding to red, green and blue color intensities.\n\n\n\n“For computers to reason about data at all, they currently must reduce all information to bits. Bits are simply 1’s and 0’s, nothing more: the symbol 1 has no inherent meaning, nor does the symbol 0. The origin of the word”bit” was from the 1948 paper by Claude Shannon, who was trying to find a way to represent the theoretically smallest possible unit of information to solve problems of audio compression in telephones. […] All that was left, from Shannon’s perspective, was “pure” information, with no inherent meaning: two symbols with which to represent phone call audio, and anything else in the universe: 1 and 0, strung together in arbitrarily long sequences to represent anything.” Amy J. Ko, “Encoding Information”\n\n\nHow can we explain the success of this digital encoding? Basically, it is the success of digital electronics. Digital information is movable, stable and manipulable.\n\n\n“How can we act remotely on little-known events, places and people? Answer: bringing home these events, places and people. How can you do this if you are far away? By inventing means that (a) make them movable so that they can be brought, (b) keep them stable so that they can be brought and carried without distortion, decomposition or deterioration, and (c) are combinable in such a way that, whatever the matter of which they are made, can be accumulated, aggregated or shuffled like a deck of cards. […] The history of science [and technology] is largely the history of the mobilization of anything that can be made to move and embark on a journey home, entering the universal census.” - Bruno Latour, Science in Action, p. 348 and 350\n\n\nFor humans, it really doesn’t help to code everything as simple 2-symbol sequences (0’s and 1’s) - it becomes illegible. But for automated machines, it is extremely efficient - from the point of view of design, stability and speed.\n\nThus, we need:\n\nDevices to convert reality to digital information - sensors\nDevices to let us manipulate this digital information - interfaces (screens, paper, etc)\nDevices to convert our digital information back to reality - actuators\n\n\nThus we are kind of trapped in the interface bottleneck: everything we usually do in the world needs to be done through screens…"
  },
  {
    "objectID": "units/03/activities/information-society.html#moderating-our-curiosity",
    "href": "units/03/activities/information-society.html#moderating-our-curiosity",
    "title": "A world of 0’s and 1’s",
    "section": "Moderating our curiosity",
    "text": "Moderating our curiosity\n\nTo acknowledge and protect what should be hidden, we need to cultivate a virtuous curiosity.\n\nThomas Aquinas speaks of the difference between studiositas (virtue) and curiositas (vice) (see more in this interesting article). There are at least 7 vices of curiosity:\n\nARROGANCE: seeking knowledge of things that no one is supposed to know;\nNOSYNESS: seeking knowledge that may belong to some people, but not to us;\nDISTRACTION: seeking knowledge of things that are not convenient to know at a certain time;\nIMMODERATION: wanting to know something with an unhealthy desire (all forms of curiosity are failures of temperance, but this label helps to isolate this specific aspect);\nIMPERTINENCE: seeking to know things in a more certain way than one can know, doing violence to the object of knowledge;\nSUPERFICIALITY: disrespecting the object of knowledge, being content with a superficial understanding and quickly moving on to something else;\nPOSSESSIVENESS: delighting not in the object of knowledge, but in the act of knowing it. It resembles, on an intellectual level, the vice of greed."
  },
  {
    "objectID": "units/03/activities/information-society.html#presence-versus-re-presence",
    "href": "units/03/activities/information-society.html#presence-versus-re-presence",
    "title": "A world of 0’s and 1’s",
    "section": "Presence versus re-presence",
    "text": "Presence versus re-presence\nFurthermore, when we deal with digital information, we are only dealing with past - a frozen portrait of something that happened. To live in interfaces is to live in the past.\n\nThe contrast to this would be to live in the present. To live in the present, we acknowledge presence, and not re-presence (representations).\nThus, as Christians seeking the common good, we would really have to think about an equilibrium between past and present, data and current life, virtual and material. Maybe we are living in a world where this can be quite unbalanced…\n\n\n“Physical reality seems to recede in proportion as man’s symbolic activity advances. Instead of dealing with things themselves, man is, in a sense, constantly talking to himself. He has become so involved in linguistic forms, in artistic images, in mythical symbols or in religious rites that he cannot see or know anything except through the interposition of an artificial medium.” Ernest Cassirer, “An Essay on Man”"
  },
  {
    "objectID": "units/02/random-module.html",
    "href": "units/02/random-module.html",
    "title": "Random module",
    "section": "",
    "text": "Another useful module in Python is random, for generating random numbers. (Documentation)\n\nFor example:\n\n# import the random module\nimport random\n \n# Generates a random number between\n# a given positive range\nr1 = random.randint(5, 15)\nprint(\"Random number between 5 and 15 is % s\" % (r1))\n \n# Generates a random number between\n# two given negative range\nr2 = random.randint(-10, -2)\nprint(\"Random number between -10 and -2 is % d\" % (r2))\n\nRandom number between 5 and 15 is 6\nRandom number between -10 and -2 is -7"
  },
  {
    "objectID": "units/02/overflow.html",
    "href": "units/02/overflow.html",
    "title": "Overflow",
    "section": "",
    "text": "Integers and floats are representations in the memory of your computer. Therefore, there are value limits to these numbers.\n\nIf we pass the limit, we arrive at an overflow, and the number is not computed correctly.\n\nFor integers, Python dynamically increases the use of memory as the number grows. Therefore, in theory there is a limit (computer memory will be full), but in practice this will almost never be the case.\n\nFor example, try 2147483647 ** 200\nThis, however, is a Python feature. Other languages may not handle that.\n\nFor floats, numbers are limited by the size of the mantissa and exponent.\n\nRemember: for \\(1.2345 \\times 10^7\\), \\(1.2345\\) is the mantissa, and \\(7\\) is the exponent\nIn Python, maximum is about 3 digits for the exponent and 17 digits for the mantissa\nFor example, try: 2.0**2000\n\nOverflowError\n\n\n\n\nMore info at https://docs.python.org/3/tutorial/floatingpoint.html\n\n\n\n\nOn June 4, 1996 the European Space Agency launched the first Ariane 5 rocket:\n\nthe result of a decade of development, $8 billion\nExploded 40 seconds after lift-off with a $500 million satellite payload on board…\n\nCause was a software error related to a number type conversion and an overflow\n\n\nhttp://www-users.math.umn.edu/~arnold/disasters/ariane.html"
  },
  {
    "objectID": "units/02/overflow.html#so-be-careful-when-mixing-numeric-types",
    "href": "units/02/overflow.html#so-be-careful-when-mixing-numeric-types",
    "title": "Overflow",
    "section": "",
    "text": "On June 4, 1996 the European Space Agency launched the first Ariane 5 rocket:\n\nthe result of a decade of development, $8 billion\nExploded 40 seconds after lift-off with a $500 million satellite payload on board…\n\nCause was a software error related to a number type conversion and an overflow\n\n\nhttp://www-users.math.umn.edu/~arnold/disasters/ariane.html"
  },
  {
    "objectID": "units/02/math-module.html",
    "href": "units/02/math-module.html",
    "title": "Math module",
    "section": "",
    "text": "For other mathematical operations, you can import Python’s math module. Two ways to do that:\n\n\n\nImport the whole module and use as needed: need to use the module name followed by a dot (.) before using a function or variable from the module.\n\n\nimport math\nr = 3\ncircumference = 2 * r * math.pi\n\n\n\nImport only the functions and variables you will need. Then, no need to use the qualifier “math.”\n\n\nfrom math import pi\nr = 3\ncircumference = 2 * r * pi\n\n\n\nSome functions in the math module (documentation here)\n\n\n\nMethod\nExplanation\n\n\n\n\nmath.cos(x)\nReturns cosine of x (rads)\n\n\nmath.sin(x)\nReturns sine of x (rads)\n\n\nmath.tan(x)\nReturns tangent of x (rads)\n\n\nmath.degrees(x)\nConverts x radians to degrees\n\n\nmath.radians(x)\nConverts x degrees to rads\n\n\nmath.sqrt(x)\nReturns square root of x\n\n\n\n\nYou can also try to import all of the modules resources by using\n\n\nfrom math import *\n\n\nHowever, this is not recommended due to “namespace pollution” (having lots of names referenced that are actually not used)"
  },
  {
    "objectID": "units/02/comments.html",
    "href": "units/02/comments.html",
    "title": "Comments",
    "section": "",
    "text": "You can add a comment to a single line:\n\n# Comment on a single line\nname = \"Pied Piper\" # Comment after code\n\nOr, when commenting in multiple lines:\n\n# This is a comment written over\n# more than one line\n# simply using multiple '#'s\n\nprint(\"Hello, World!\")\n\nor\n\n\"\"\"\nThis is a string written over\nmore than one line\n\"\"\"\n\nprint(\"Hello, World!\")\n\nThis last case just “states” a multi-line string that will not be printed if just provided in the middle of the code. Therefore it works as a kind of comment.\n\n\n\n\n\n\nTip: enabling and disabling parts of the code\n\n\n\nA common practice in programming is adding comment tags (#) to parts of the code you want to temporarily not execute, but don’t want to delete completely. Speaking rigorously, you shouldn’t do that because that is not the purpose of comments, however, it still helps a lot! Many IDEs, furthermore, have buttons to enable and disable comments given some selected parts of code.\nFor example, suppose you don’t want to ask the user for input and just test with some fixed number (goes faster when executing code for tests):\n\n# x = int(input(\"Please enter your age: \"))\nx = 18\nprint(\"Your age is\", x)\n\nIf you want to “toggle” again user input, just un-comment the input line and comment (or delete) the x = 18 line!\n\n\nFor more detail, check this guide. (Later in the course we will go through the docstring stuff for documenting user defined functions.)"
  },
  {
    "objectID": "units/02/activities/dice-rolling.html",
    "href": "units/02/activities/dice-rolling.html",
    "title": "Activity:",
    "section": "",
    "text": "Activity:\n\nWhat’s a program to make our turtle draw random circles around the screen?"
  },
  {
    "objectID": "units/01/show/running-python-p.html#section",
    "href": "units/01/show/running-python-p.html#section",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Try:\n\nSaving some previous code as program.py\nOpen a command-line interface in your computer and run: python3 program.py\n\nYou need to have python3 installed in your machine\nYou need to be in the directory of the file program.py\n\n\nPython can be run in two modes:\n\n\nScript / Program\n\nAll lines of code executed without stop\nRun in command-line as python3 program.py\nOnly print what is specifically passed through print()\n\n\nInteractive shell\n\nRun lines of code each at a time, as user enters them\nOpen in command-line just by typing python3\nTyping an expression without being assigned to a variable will “print” the result"
  },
  {
    "objectID": "units/01/show/running-python-p.html#integrated-development-environment-ide",
    "href": "units/01/show/running-python-p.html#integrated-development-environment-ide",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Integrated Development Environment (IDE)",
    "text": "Integrated Development Environment (IDE)\n\nIn our classes, we will be using Thonny\n\nNotice the panels for scripting and for interactive shell\nThere is also a helper and variable explorer for debugging code"
  },
  {
    "objectID": "units/01/show/objects-variables-p.html#section",
    "href": "units/01/show/objects-variables-p.html#section",
    "title": "Objects and Variables ",
    "section": "",
    "text": "Python syntax specifies some ways to represent different types of data. A data representation in Python is called an “object”.\n\n\n\n\n\n\n\n\n\nType\nObject type in Python\nExample\n\n\n\n\nInteger number\nint\n123\n\n\nDecimal number (floating point)\nfloat\n3.14\n\n\nLogic value\nbool\nTrue, False\n\n\nText\nstring\n\"Hello World!\""
  },
  {
    "objectID": "units/01/show/objects-variables-p.html#variables",
    "href": "units/01/show/objects-variables-p.html#variables",
    "title": "Objects and Variables ",
    "section": "Variables",
    "text": "Variables\n\nVariables are names we set to refer to objects.\n\nA not-so-good metaphor: variables are containers for objects\nA better metaphor: objects are houses, variables are addresses of these houses\n\n\n\nx = 123  # a variable x that contains the integer value 123\nx = x + 1  # x is updated with the value of x + 1, becoming 124...\nhello = \"Hello World!\"  # a variable that contains the string \"Hello World!\"\nis_done = True  # a variable is_done with the logic value True"
  },
  {
    "objectID": "units/01/show/objects-variables-p.html#objects-x-variables",
    "href": "units/01/show/objects-variables-p.html#objects-x-variables",
    "title": "Objects and Variables ",
    "section": "Objects x variables",
    "text": "Objects x variables\n\nIt is very important to differentiate!\nWhich of the following are variables and which are objects?\n\n\"hello\"\n\nhello\n\n132\n\nvar_1\n\ntruev\n\nTrue"
  },
  {
    "objectID": "units/01/show/objects-variables-p.html#variable-naming-conventions-in-python",
    "href": "units/01/show/objects-variables-p.html#variable-naming-conventions-in-python",
    "title": "Objects and Variables ",
    "section": "Variable naming conventions in Python",
    "text": "Variable naming conventions in Python\n\nThey MUST start with a letter or with _ (underline)\nThey are case sensitive (‘C’ is different from ‘c’)\nThey can’t contain: { ( + - * / \\ ; . , ?\nThey can’t have names of words already reserved for other purposes in Python:\n\n\n\nWhat happens if?\n\n\nTrue = 123\n\n\n\"Hello\" = world\n\n\n1stcar = 2000"
  },
  {
    "objectID": "units/01/show/computation-p.html#section",
    "href": "units/01/show/computation-p.html#section",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "We use programs to compute numbers."
  },
  {
    "objectID": "units/01/show/computation-p.html#automatic-computation",
    "href": "units/01/show/computation-p.html#automatic-computation",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Automatic computation",
    "text": "Automatic computation\n\nCharles Babbage is known for developing the first automatic computer machine (1820’s)\n\n“the faster and more reliably one could calculate, the more money businesses could make.”\n\n\n\n\n\n\n\n\n\n\nAda Lovelace, daughter of Lord Byron, became enamoured by Babbage’s machine and developed the first algorithm, to calculate a sum of numbers:"
  },
  {
    "objectID": "units/01/show/computation-p.html#algorithm",
    "href": "units/01/show/computation-p.html#algorithm",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Algorithm",
    "text": "Algorithm\n\nBasically, a program: a description of a series of operations.\nBut with some specific features:\n\nPrecise and unambiguous steps\nDefinite results\nFinite\nGeneralizable (works with a range of possible inputs)\nUsually expressed through abstract/mathematical notation"
  },
  {
    "objectID": "units/01/show/computation-p.html#stem-today-is-programming-computations",
    "href": "units/01/show/computation-p.html#stem-today-is-programming-computations",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "STEM today is programming computations",
    "text": "STEM today is programming computations\n\nFor complex calculations, we don’t rely anymore on pressing calculator buttons. We have to make automatic computation programs"
  },
  {
    "objectID": "units/01/show/assignments-p.html#section",
    "href": "units/01/show/assignments-p.html#section",
    "title": "Assignments ",
    "section": "",
    "text": "When Python sees the operator = it does the following:\n\nEvaluates the right-hand side (rhs)\n\nThe right of the assignment operator can be:\n\nObjects: age = 21\nVariables: my_cost = your_cost\nExpressions: x = (x + 1) * y\n\n\nAssigns the resulting object to the variable on the left-hand side (lhs)\n\nOnly a single variable is allowed on the left side!\nFor example, x + 1 = 2 is WRONG SYNTAX!"
  },
  {
    "objectID": "units/01/show/assignments-p.html#compound-assignment-operators",
    "href": "units/01/show/assignments-p.html#compound-assignment-operators",
    "title": "Assignments ",
    "section": "Compound assignment operators",
    "text": "Compound assignment operators\n\nPython and other languages make available a shortcut for performing operations in variables and updating them.\nFor example,\n\n\nw = 5\nw += 1\nprint(w)\n\nis the same as:\n\nw = 5\nw = w + 1\nprint(w)\n\nYou can use compound assignment with all operators!\n\ny += 1 # add then assign value\ny -= 1 # subtract then assign value\ny *= 2 # multiply then assign value\ny /= 3 # divide then assign value\ny // = 5 # floor divide then assign value\ny **= 2 # increase to the power of then assign value\ny %= 3 # return remainder then assign value\n\nExample: what will this expression do?\n\nx *= y - 2\n\na"
  },
  {
    "objectID": "units/01/program.html",
    "href": "units/01/program.html",
    "title": "Program ",
    "section": "",
    "text": "Programming = writing programs. What are programs?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n22 “The Lord brought me forth as the first of his works, before his deeds of old; 23 I was formed long ages ago, at the very beginning, when the world came to be. 24 When there were no watery depths, I was given birth, when there were no springs overflowing with water; 25 before the mountains were settled in place, before the hills, I was given birth, 26 before he made the world or its fields or any of the dust of the earth. 27 I was there when he set the heavens in place, when he marked out the horizon on the face of the deep, 28 when he established the clouds above and fixed securely the fountains of the deep, 29 when he gave the sea its boundary so the waters would not overstep his command, and when he marked out the foundations of the earth. 30 Then I was constantly at his side. I was filled with delight day after day, rejoicing always in his presence, 31 rejoicing in his whole world and delighting in mankind. Proverbs 8.22-31"
  },
  {
    "objectID": "units/01/program.html#programs-are-forms-of-wisdom",
    "href": "units/01/program.html#programs-are-forms-of-wisdom",
    "title": "Program ",
    "section": "",
    "text": "22 “The Lord brought me forth as the first of his works, before his deeds of old; 23 I was formed long ages ago, at the very beginning, when the world came to be. 24 When there were no watery depths, I was given birth, when there were no springs overflowing with water; 25 before the mountains were settled in place, before the hills, I was given birth, 26 before he made the world or its fields or any of the dust of the earth. 27 I was there when he set the heavens in place, when he marked out the horizon on the face of the deep, 28 when he established the clouds above and fixed securely the fountains of the deep, 29 when he gave the sea its boundary so the waters would not overstep his command, and when he marked out the foundations of the earth. 30 Then I was constantly at his side. I was filled with delight day after day, rejoicing always in his presence, 31 rejoicing in his whole world and delighting in mankind. Proverbs 8.22-31"
  },
  {
    "objectID": "units/01/input-output.html",
    "href": "units/01/input-output.html",
    "title": "Input/Output ",
    "section": "",
    "text": "Programming is nothing without the design of an interface!\n\nI have to be able to input data in the program, and\nI have to be able to get results (output) from the program."
  },
  {
    "objectID": "units/01/input-output.html#graphical-inputoutput",
    "href": "units/01/input-output.html#graphical-inputoutput",
    "title": "Input/Output ",
    "section": "Graphical input/output",
    "text": "Graphical input/output\n\nAlso called Graphical User Interface (GUI) - we’ll study it in Unit 10\nKind of mimics the way we use mechanical input and output\nTraditionally, WIMP (Windows, Icons, Menus and Pointers)"
  },
  {
    "objectID": "units/01/input-output.html#text-inputoutput",
    "href": "units/01/input-output.html#text-inputoutput",
    "title": "Input/Output ",
    "section": "Text input/output",
    "text": "Text input/output\n\nEven simpler, however, it is a good start for programming!\n\n\nname = input(\"Please enter your name:\")\nreverse = name[::-1]\nprint(\"Your name in reverse is\", reverse)\n\nThe command-line interface will ask for input from our keyboard, and then:"
  },
  {
    "objectID": "units/01/input-output.html#python-text-output-print",
    "href": "units/01/input-output.html#python-text-output-print",
    "title": "Input/Output ",
    "section": "Python text output: print()",
    "text": "Python text output: print()\n\nPut what you want to print between the parentheses: print(\"Hello World\")\nIf you want to jump to a new line, use \\n: print(\"Hello\\nWorld\")\nYou can also pass multiple arguments by separating them with commas: print(\"x has the value:\", x, \"\\nand y has the value:\", y)"
  },
  {
    "objectID": "units/01/input-output.html#python-text-input-input",
    "href": "units/01/input-output.html#python-text-input-input",
    "title": "Input/Output ",
    "section": "Python text input: input()",
    "text": "Python text input: input()\n\nThe command waits until the user types some text in the command-line interface and finishes with ENTER\nThe term input() “turns” into the text entered, and is ALWAYS an object the type string!\nThus, it needs to be saved into a variable: x = input()\n\nAfter the user types “Hi”, for example, it is as if: x = \"Hi\"\n\nYou can customize an input message by passing a string:\n\n\nx = input(\"Please enter your name: \")"
  },
  {
    "objectID": "units/01/input-output.html#input-of-numeric-values",
    "href": "units/01/input-output.html#input-of-numeric-values",
    "title": "Input/Output ",
    "section": "Input of numeric values",
    "text": "Input of numeric values\n\nNow, suppose we want to calculate the sum of two numbers:\n\n\nx = input(\"Please enter first number: \")\ny = input(\"Please enter second number: \")\nz = x + y\nprint(\"The sum is\", z)\n\nWhat happened???"
  },
  {
    "objectID": "units/01/input-output.html#converting-string-to-number-types",
    "href": "units/01/input-output.html#converting-string-to-number-types",
    "title": "Input/Output ",
    "section": "Converting string to number types",
    "text": "Converting string to number types\n\nYou can convert a string to a number using the methods int() and float()\n\nThe string that goes inside the parentheses (which we call the “argument” of the method) will be turned to an integer/float\n\n\n\nxstring = input(\"Please enter your age: \")\nx = int(xstring)\nprint(\"Your age is \", x)\n\n\nJust make things shorter by chaining one method into another!\n\n\nx = int(input(\"Please enter your age: \"))\nprint(\"Your age is \", x)"
  },
  {
    "objectID": "units/01/code.html",
    "href": "units/01/code.html",
    "title": "Code ",
    "section": "",
    "text": "Initially, computer operators had to set the program manually to run…\n\n\n\n\n\n\n\n\n\nAt the end of the 1800s, Herman Hollerith invented the punched card, to be automatically read by a machine.\nInstructions were then CODED in the punched card.\n\n\n\n\n\n\n\n\n\n\n\n\nLater, in 1949, Grace Hopper invented the first programming language: COBOL (COmmon Business-Oriented Language)\n\nFor example, the user would write: COMPUTE SUM = (1 + 3) DIVIDE SUM BY 2 GIVING AVERAGE\n\nCrucial to this was the development of the compiler: a program capable of converting a sentence very much like an English phrase (with syntax and semantics) into machine instructions.\n\n\n\n\n\n“A program that follows a set of rules” (in order to be correctly interpreted)\nTo learn how to program, then, is to learn how to express yourself correctly through the code\n\nNotice the origin of the word - codex\n\n\n\n\n\n\n\nInvented in the early 1990s by Guido van Rossum, named after Monty Python’s Flying Circus\nOpen source project\nHigh-level, general-purpose language\nWidely available, easy to learn, rich in tools and libraries, and portable"
  },
  {
    "objectID": "units/01/code.html#punched-cards",
    "href": "units/01/code.html#punched-cards",
    "title": "Code ",
    "section": "",
    "text": "At the end of the 1800s, Herman Hollerith invented the punched card, to be automatically read by a machine.\nInstructions were then CODED in the punched card."
  },
  {
    "objectID": "units/01/code.html#grace-hoppers-proposal",
    "href": "units/01/code.html#grace-hoppers-proposal",
    "title": "Code ",
    "section": "",
    "text": "Later, in 1949, Grace Hopper invented the first programming language: COBOL (COmmon Business-Oriented Language)\n\nFor example, the user would write: COMPUTE SUM = (1 + 3) DIVIDE SUM BY 2 GIVING AVERAGE\n\nCrucial to this was the development of the compiler: a program capable of converting a sentence very much like an English phrase (with syntax and semantics) into machine instructions."
  },
  {
    "objectID": "units/01/code.html#so-whats-a-code",
    "href": "units/01/code.html#so-whats-a-code",
    "title": "Code ",
    "section": "",
    "text": "“A program that follows a set of rules” (in order to be correctly interpreted)\nTo learn how to program, then, is to learn how to express yourself correctly through the code\n\nNotice the origin of the word - codex"
  },
  {
    "objectID": "units/01/code.html#python-programming-language",
    "href": "units/01/code.html#python-programming-language",
    "title": "Code ",
    "section": "",
    "text": "Invented in the early 1990s by Guido van Rossum, named after Monty Python’s Flying Circus\nOpen source project\nHigh-level, general-purpose language\nWidely available, easy to learn, rich in tools and libraries, and portable"
  },
  {
    "objectID": "units/01/activities/presentations.html",
    "href": "units/01/activities/presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Presentations\nTake some minutes to present yourself to someone who you don’t know."
  },
  {
    "objectID": "tips-resources.html",
    "href": "tips-resources.html",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "A word to the wise: Starting early is essential to success in programming. Newcomers sometimes think that they can start an assignment at the last minute and do reasonably well. Programming isn’t like writing a paper, where you can have partially developed arguments and missing information but still have something to submit. In programming, it either works or it doesn’t, and it is often very easy to tell.\n\ncome to class and lab\ncome to study sessions and drop by when prof is in lab\ntake small steps\nuse the autograder often\ndiscuss why something worked or didn’t work\ntake frequent breaks\nmake your own cheat-sheet of syntax and concepts you’ve learned\n\nHelp others to succeed. The last thing we want to reinforce in our education is the idea that success only depends on individual effort. You’ll see that programming is much easier when done in community. Two or more people looking at the same code is twice or more the attention to details that is necessary for avoiding mistakes, remembering syntax and keeping objectives on track. - This doesn’t mean to be carried by our teammates - i.e., letting them do all the work for you. Insist in participating. Don’t split tasks and exercises. It may be easy to get good grades in courses that involve group work, but though it may solve your problem now (i.e., passing the course), this will be really a problem in the future, where you may be required to take the lead in solving a programming problem, for example. I’ve seen lots of cases like this in academic education and it is really awful.\nDon’t neglect textbook readings. In all my experience and a little of data analysis in courses I teach, there is a very clear correlation between low engagement with the textbook and low grades. So, be active in your reading. I know that everything around us today encourage us to just skim through texts, but that is not a good way to study. Think with the text. Ask questions. Annotate. Focus. You can do it. - The same applies for classes. Reading and listening aren’t passive. They are active abilities that can and have to be developed.\n\n\n\n\nThe official Python tutorial\nCodecademy’s “Learn Python” Tutorial\nfuturecoder python tutorial: nicely done, but only covers the basics\neducative python tutorial: not quite as slick as futurecoder, but it covers some important things that are missing there.\nW3Schools Python Tutorial and Quiz\nKaggle tutorials:\n\nlearn python\nlearn pandas\n\n\n\n\n\n\nPython standard library\n\n\n\n\n\nPythonTutor\nSome Python practice problems\n\n\n\n\n\nFalsehoods Programmers Believe About Names\nfloat.exposed and integer.exposed\nHow ints and floats (and other binary numbers) work: an interactive tutorial, and a very comprehensive reference"
  },
  {
    "objectID": "tips-resources.html#how-to-succeed-in-this-class",
    "href": "tips-resources.html#how-to-succeed-in-this-class",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "A word to the wise: Starting early is essential to success in programming. Newcomers sometimes think that they can start an assignment at the last minute and do reasonably well. Programming isn’t like writing a paper, where you can have partially developed arguments and missing information but still have something to submit. In programming, it either works or it doesn’t, and it is often very easy to tell.\n\ncome to class and lab\ncome to study sessions and drop by when prof is in lab\ntake small steps\nuse the autograder often\ndiscuss why something worked or didn’t work\ntake frequent breaks\nmake your own cheat-sheet of syntax and concepts you’ve learned\n\nHelp others to succeed. The last thing we want to reinforce in our education is the idea that success only depends on individual effort. You’ll see that programming is much easier when done in community. Two or more people looking at the same code is twice or more the attention to details that is necessary for avoiding mistakes, remembering syntax and keeping objectives on track. - This doesn’t mean to be carried by our teammates - i.e., letting them do all the work for you. Insist in participating. Don’t split tasks and exercises. It may be easy to get good grades in courses that involve group work, but though it may solve your problem now (i.e., passing the course), this will be really a problem in the future, where you may be required to take the lead in solving a programming problem, for example. I’ve seen lots of cases like this in academic education and it is really awful.\nDon’t neglect textbook readings. In all my experience and a little of data analysis in courses I teach, there is a very clear correlation between low engagement with the textbook and low grades. So, be active in your reading. I know that everything around us today encourage us to just skim through texts, but that is not a good way to study. Think with the text. Ask questions. Annotate. Focus. You can do it. - The same applies for classes. Reading and listening aren’t passive. They are active abilities that can and have to be developed."
  },
  {
    "objectID": "tips-resources.html#tutorials",
    "href": "tips-resources.html#tutorials",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "The official Python tutorial\nCodecademy’s “Learn Python” Tutorial\nfuturecoder python tutorial: nicely done, but only covers the basics\neducative python tutorial: not quite as slick as futurecoder, but it covers some important things that are missing there.\nW3Schools Python Tutorial and Quiz\nKaggle tutorials:\n\nlearn python\nlearn pandas"
  },
  {
    "objectID": "tips-resources.html#references",
    "href": "tips-resources.html#references",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "Python standard library"
  },
  {
    "objectID": "tips-resources.html#tools",
    "href": "tips-resources.html#tools",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "PythonTutor\nSome Python practice problems"
  },
  {
    "objectID": "tips-resources.html#other-interesting-things",
    "href": "tips-resources.html#other-interesting-things",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "Falsehoods Programmers Believe About Names\nfloat.exposed and integer.exposed\nHow ints and floats (and other binary numbers) work: an interactive tutorial, and a very comprehensive reference"
  },
  {
    "objectID": "prayers/psalm90.html",
    "href": "prayers/psalm90.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Let your work be shown to your servants,\nand your glorious power to their children.\nLet the favor of the Lord our God be upon us,\nand establish the work of our hands upon us;\nyes, establish the work of our hands!\nPsalm 90:16-17"
  },
  {
    "objectID": "prayers/prayer-information-technology.html",
    "href": "prayers/prayer-information-technology.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Lord, we pray for those making international and national decisions about the ‘Information Super-Highway’;\nthat the whole range of considerations - political, economic, personal, sectional, communal - may be properly taken into account.\n\nLord, we pray for those setting up and administering national data-banks; we give thanks for the good they can do in co-ordinating information. We remember those who misuse the information they hold.\n\nLord, we pray for those involved in Research and Development in computers; we remember the power and responsibility they have for making changes in our world and our lives. We remember those who have lost their jobs as a result of new technology.\n\nLord, we pray for those who have boring keyboard jobs, those who suffer from Repetitive Strain Injury, or eyestrain. We pray for willingness to deal with the causes of such problems.\n\nLord, we pray for those in small computing businesses; the difficulties they face in chasing creditors; the stress on them, the risks they have to take - perhaps even with their own homes.\n\nLord, we pray for those who write computer games: some which are used to do much good at school, others to encourage people to gamble, some which are used just to make money. We pray for those who are addicted to computer and arcade games, and for their families; and for those who are anxious about the violence of some computer games.\n\nLord, we pray for those frightened of computers and other sorts of new technology; those who feel they cannot master using them; those who feel old or who lose their confidence in the face of change and new things.\n\nLord, we pray that technology may be the servant, not the controller of our lives.\n\n(From ‘Work in Worship’, Peterborough Diocese People and Work Programme)"
  },
  {
    "objectID": "prayers/prayer-bad-jobs.html",
    "href": "prayers/prayer-bad-jobs.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Lord, we remember that there are some who find themselves working on projects whose value they doubt or whose likely outcome they disapprove.\nHelp them, Lord, to decide whether to stay on in the hope of effecting change or whether to leave.  Especially we pray for those forced by economic necessity to remain in uncongenial work.\nMay they know your forgiveness,\nand may the world of science and technology be ever open to your redeeming Spirit,\nthat your will may be fulfilled in all that we do.\nAmen.\n(David Welbourn)"
  },
  {
    "objectID": "prayers/practicing-programming.html",
    "href": "prayers/practicing-programming.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Dear Heavenly Father,\nWe start this day asking for your joy and strength in this moment when we are practicing these programming skills.\nPlease let this be a moment of true fellowship and character building in our community of learning.\nBe with us in any difficulties we face. Give us a disposition to help, and humility to be helped.\nGive us wisdom to discern your beauty and justice as we write these Python programs.\nMay everything we do and learn here be offered to you in praise, gratitude and service to our neighbors.\nIn Jesus name we pray. Amen."
  },
  {
    "objectID": "prayers/new-unit.html",
    "href": "prayers/new-unit.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Dear Heavenly Father,\nWe invite Your presence into this classroom.\nLet Your light shine upon us, illuminating the path of learning, so we may contemplate your beauty and love in everything you made.\nMay this classroom be a place of respect, fellowship, and growth. Help us to be open to new ideas, to embrace challenges, and to support one another in our academic endeavors. Bless this class so that it may be a space where minds are enriched, friendships are formed, and hearts are touched.\nGuide our imaginations and desires towards your love and justice, so that we may respond adequately to your call to be Christ’s agents of renewal in the world.\nThrough our Lord Jesus Christ, your Son, who lives and reigns with you in the unity of the Holy Spirit, one God, for ever and ever.\nAmen."
  },
  {
    "objectID": "prayers/god-the-maker.html",
    "href": "prayers/god-the-maker.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "VERSE 1:\nWe bring our time, we bring our treasure,\nwe lay them down before Your throne.\nYou will make them something greater,\nmore than we could ever know. (chorus)\n\nVERSE 2:\nWe bring our gifts, we bring our power\nplace them in Your sov’reign hand.\nYou will take what we have given,\nYou will use it for Your plan. (chorus)\n\nCHORUS:\nGlory be to God, the Maker\nglory be to God, Creator\nTake our time, use our treasure\nturn them into something greater:\nGlory be to God, the Maker.\n\nVERSE 3:\nThough our hearts are weak from failure,\nbroken dreams and failed attempts,\nshow us that in ev’ry season,\nYou will fill our emptiness. (chorus)\n(God the Maker, The Porter’s Gate)"
  },
  {
    "objectID": "pogil.html",
    "href": "pogil.html",
    "title": "About POGIL",
    "section": "",
    "text": "About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!"
  },
  {
    "objectID": "lab-instructions.html",
    "href": "lab-instructions.html",
    "title": "Lab Instructions",
    "section": "",
    "text": "Remember that lab attendance is required. If you cannot come, please let us know in advance. Not attending the lab without legitimate reasons will unfortunately receive 0 points.\nPlease don’t bring food and drink to this lab. (For classes in the other room, NH253, this is fine).\n\n\n\n\nThe basic idea:\n\nPerson 1 acts as a coder (typing into the code)\nPerson 2 acts as a code reviewer\nAlternate the roles after each solving each problem\nBoth should discuss how to tackle the problem before coding\n\nLOTS of advantages\n\nMutual learning\nHelps spotting some stupid typos/mistakes we may end up writing (and these can difficult to detect later)\nWhile one gives attention to the “tactical” aspect of getting some small stuff done, the other is thinking about the bigger picture, the “strategical” aspect.\n\nIt takes some patience to just sit and look at someone writing. We are not trained in this kind of attention. But in the end it can be VERY satisfactory.\nIn the end, submit just one copy per pair\n\nPut down the names of both members as authors\nPut down the class A/B\nE.g., Frodo Baggins (Calvin-ID) A\n\n\n\n\n\n\nAt the top of each program file, include something like this:\n\n\"\"\"CS 108 - Lab 1.5\nUse a simple formula to estimate pi which is\naccurate to 6 digits.\n@author: Frodo Baggins (123456) A\n@author: Samwise Gamgee (654321) A\n@date: Spring, 2024\n\"\"\"\n\nThe template header is actually:\n\n\"\"\"CS 108 - Lab/Homework X.X\nDescribe the module here. Fix the lab number above and\nthe name/date below.\nDelete the second @author line if working solo.\n@author: YOUR-NAME (yourid123) A/B\n@author: PARTNER-NAME (theirid123) A/B\n@date: semester, year\n\"\"\"\n\n\n\n\nEach question carries 20 points\n\nTest for documentation (2 points)\n\nThe file name checking (e.g., Lab1_1.py)\nA brief description of the program file\nAuthorship (including the section)\n\nCorrectness (18 points for Lab1.1 and 16 points for others)\nCode documentation (2 points)\n\ni.e., concise and clear comments about the code\n\nE.g., print(pi)  # print out the estimated value of pi"
  },
  {
    "objectID": "lab-instructions.html#pair-programming",
    "href": "lab-instructions.html#pair-programming",
    "title": "Lab Instructions",
    "section": "",
    "text": "The basic idea:\n\nPerson 1 acts as a coder (typing into the code)\nPerson 2 acts as a code reviewer\nAlternate the roles after each solving each problem\nBoth should discuss how to tackle the problem before coding\n\nLOTS of advantages\n\nMutual learning\nHelps spotting some stupid typos/mistakes we may end up writing (and these can difficult to detect later)\nWhile one gives attention to the “tactical” aspect of getting some small stuff done, the other is thinking about the bigger picture, the “strategical” aspect.\n\nIt takes some patience to just sit and look at someone writing. We are not trained in this kind of attention. But in the end it can be VERY satisfactory.\nIn the end, submit just one copy per pair\n\nPut down the names of both members as authors\nPut down the class A/B\nE.g., Frodo Baggins (Calvin-ID) A"
  },
  {
    "objectID": "lab-instructions.html#dont-forget-headers-in-files",
    "href": "lab-instructions.html#dont-forget-headers-in-files",
    "title": "Lab Instructions",
    "section": "",
    "text": "At the top of each program file, include something like this:\n\n\"\"\"CS 108 - Lab 1.5\nUse a simple formula to estimate pi which is\naccurate to 6 digits.\n@author: Frodo Baggins (123456) A\n@author: Samwise Gamgee (654321) A\n@date: Spring, 2024\n\"\"\"\n\nThe template header is actually:\n\n\"\"\"CS 108 - Lab/Homework X.X\nDescribe the module here. Fix the lab number above and\nthe name/date below.\nDelete the second @author line if working solo.\n@author: YOUR-NAME (yourid123) A/B\n@author: PARTNER-NAME (theirid123) A/B\n@date: semester, year\n\"\"\""
  },
  {
    "objectID": "lab-instructions.html#grading-example-for-lab-1",
    "href": "lab-instructions.html#grading-example-for-lab-1",
    "title": "Lab Instructions",
    "section": "",
    "text": "Each question carries 20 points\n\nTest for documentation (2 points)\n\nThe file name checking (e.g., Lab1_1.py)\nA brief description of the program file\nAuthorship (including the section)\n\nCorrectness (18 points for Lab1.1 and 16 points for others)\nCode documentation (2 points)\n\ni.e., concise and clear comments about the code\n\nE.g., print(pi)  # print out the estimated value of pi"
  },
  {
    "objectID": "finalproject.html",
    "href": "finalproject.html",
    "title": "Final Project",
    "section": "",
    "text": "The final project in CS108 is an opportunity for you to showcase what you have learned in this class, and begin applying your newfound knowledge and abilities to a problem that interests you personally.\nThe final project is to be an individual or a small group project, although I hope that in either case you consult with others in the class and with professors (if possible) for help in design, implementation, and debugging."
  },
  {
    "objectID": "finalproject.html#forming-groups-and-brainstorming-in-class-on-mar-1",
    "href": "finalproject.html#forming-groups-and-brainstorming-in-class-on-mar-1",
    "title": "Final Project",
    "section": "1. Forming groups and brainstorming (in class, on Mar 1):",
    "text": "1. Forming groups and brainstorming (in class, on Mar 1):\nWe’ll take a moment of class to set the groups right and then talk with each other about what you want to do."
  },
  {
    "objectID": "finalproject.html#project-proposal-submission-in-moodle-required",
    "href": "finalproject.html#project-proposal-submission-in-moodle-required",
    "title": "Final Project",
    "section": "2. Project Proposal (SUBMISSION IN MOODLE REQUIRED)",
    "text": "2. Project Proposal (SUBMISSION IN MOODLE REQUIRED)\nThis document should include:\n\nA high-level description of the project\nWhat might be the main challenges you’ll have to overcome for this project? What is your plan to tackle them?\nWhat might be some of the different pieces of the project that you can work on developing one at a time? Specifically:\n\nWhat are some of the functions or classes you might use?\nHow you might know whether each part is working?\nWhat data will your project store? What data types will you use, and how?\n\nWhat you expect the input and output to look like: if it is text, then a quick sample of what it will look like. If it is graphical, a description or sketch of it.\nThe ways a user can alter the run of the program by changing input.\n\nThe document should be a Word document, PDF document, or text document (not Python code).\nIt’s okay if you don’t have everything fully designed; expect the project to take shape as you go. But note that the more work you do on your design, the less time you’ll have to spend writing the code (because you’ll implement more of it correctly the first time)."
  },
  {
    "objectID": "finalproject.html#project-walkthrough-in-class",
    "href": "finalproject.html#project-walkthrough-in-class",
    "title": "Final Project",
    "section": "3. Project Walkthrough (in class)",
    "text": "3. Project Walkthrough (in class)\nYou will meet in class or my office to look at what you have completed. I will recommend solutions to problems you are having.\nOther colleagues can also help. Designate a “consultant” member for you group to rund around the class and give/get suggestions\nAt least 50% of your code must be complete when we meet."
  },
  {
    "objectID": "finalproject.html#perspectival-reflection-in-class",
    "href": "finalproject.html#perspectival-reflection-in-class",
    "title": "Final Project",
    "section": "4. Perspectival Reflection (in class)",
    "text": "4. Perspectival Reflection (in class)\nWe will reflect on the impact of your code under a Christian perspective. More details will be provided in class. A document will be developed after that, which will be part of submission."
  },
  {
    "objectID": "finalproject.html#project-presentation-finals-week",
    "href": "finalproject.html#project-presentation-finals-week",
    "title": "Final Project",
    "section": "5. Project Presentation (finals week)",
    "text": "5. Project Presentation (finals week)\nDuring our final exam time, those who have presentable work will present their work to the class. You should be able to run your code at this time. If you have concrete results to show, please do so. You may want to have a web page or PowerPoint slides to describe what your project does. For a team project, each team member should contribute to the presentation."
  },
  {
    "objectID": "finalproject.html#project-submission",
    "href": "finalproject.html#project-submission",
    "title": "Final Project",
    "section": "6. Project Submission",
    "text": "6. Project Submission\nYou will submit your final project code by the end of the day of our final exam time.\n\n\n\n\n\n\nCaution\n\n\n\nSince the problem-solving process is essential and cannot be evaluated on the basis of code alone, code submitted without a walkthrough will not be graded.\n\n\nSubmit a ZIP file on Moodle that includes:\n\nYour code\nIf any data is needed to run the code, please either include the data in the ZIP file or provide specific instructions for how to obtain it (e.g., go to a certain URL).\nA screenshot or a very brief video of your project in action.\nThe Christian-perspectival analysis of your project, which will follow the Multi-Aspectual Software Evaluation method we are going to present during class.\nA plain-text README.txt file (which you can create using Thonny or another app like Notepad or TextEdit) that looks like:\n\nTitle: (a title for your project)\nAuthor: (your name)\nObjective: 1-2 sentence description of your project's goal\n\nHow to demo:\n*Specific instructions for what to do to run through a basic demo\nof the main functionality of your project.* You don't need to show\noff all features here.\n\nHighlights:\n*List a few parts of the program that you're proud of.*\nThis could be something tricky you got working or how you organized\nyour code.\n\nProcess:\n*A one-paragraph summary on your process for creating the code.\nInclude at least one specific difficulty that you encountered\nand how your overcame it.*\n\nTesting:\n*What steps could someone do to check that your code works correctly?*\nFor example, if your program used to have a bug but now you fixed it,\ndescribe how you can test that it's fixed.\n(If you use assert statements, running the code may suffice.)\n\nSharing: Would you be okay with sharing your project, and if so, how?\n- Ideally we'd make a public gallery with all projects, screenshots, and code, but you could choose to:\n  - Go anonymous (answer \"anon\" or \"names\")\n  - Don't share code? (answer \"code\" or \"screenshots\" or \"just title\")\n  - Restrict to just future students (answer \"public\" or \"students\")."
  },
  {
    "objectID": "finalproject.html#general-ideas",
    "href": "finalproject.html#general-ideas",
    "title": "Final Project",
    "section": "General ideas",
    "text": "General ideas\n\nFocus on stuff you like. - E.g., teach a concept from an area of interest to you. e.g., find a YouTube video that explains something (like one of the excellent 3blue1brown videos or others), make an interactive version of that explanation.\nPeter Norvig’s PyTudes are an EXCELLENT SOURCE of ideas and examples.\nAutomate the Boring Stuff - a nice online book with practical project ideas (just don’t copy, be inspired by them).\nYou can always take something we did together (class, lab, etc.) and extend it in some way."
  },
  {
    "objectID": "finalproject.html#tools",
    "href": "finalproject.html#tools",
    "title": "Final Project",
    "section": "Tools",
    "text": "Tools\n\nA sports event tracker (with score tracker, player statistics, etc.)\nA fitness tracker (with workout logging, goal setting, social features, etc.)\nA cooking recipe organizer (with meal planning, shopping list generator, etc.)\nA currency converter: allows users to input an amount in one currency and convert it to another currency using real-time exchange rates.\nA content analyzer: getting text and checking for readability, sentiment, and suggesting improvements."
  },
  {
    "objectID": "finalproject.html#sciences",
    "href": "finalproject.html#sciences",
    "title": "Final Project",
    "section": "Sciences",
    "text": "Sciences\n\nCreate a star/planets/satellites simulation to model our solar system with actual values for planet masses, distances, etc.\nUse SymPy to check someone’s algebra and show them what step they made a mistake on.\nIterate over a collection of atoms/molecules and compute whether or not they can (theoretically) combine. If they can combine to form a new molecule, can you determine its official name. Can you use pymol to visualize the molecule?\nSolve an interesting mathematical problem from projecteuler.net"
  },
  {
    "objectID": "finalproject.html#arts",
    "href": "finalproject.html#arts",
    "title": "Final Project",
    "section": "Arts",
    "text": "Arts\n\nMake beautiful and customizable fractal plots\nJonathan Chaffer’s CS Seminar slides\n#genuary\n#RecreationThursday (original pieces)\nGenerative Art at ObservableHQ\nTruchet images | Ned Batchelder\ngenerativepy tutorial"
  },
  {
    "objectID": "finalproject.html#simulations",
    "href": "finalproject.html#simulations",
    "title": "Final Project",
    "section": "Simulations",
    "text": "Simulations\n\nSimulate a game with emergent behavior, like the Monty Hall Problem or the Prisoner’s Dilemma, Game Theory analyses such as in political polarization, or Conway’s Game of Life.\nSimulate a ball being shot out of a cannon and bouncing on the ground. What if the wind picks up? Or gravity increases?\nBuild a traffic simulation. e.g., can you time traffic lights to maximize flow?\nSimulate a predator/prey situation: wolves eat mice, so the mouse population goes down, so the wolf population goes down, so the mouse population goes up, so the wolf population goes up, and so on. Can it be extended to involve 3 species? I want to see graphs! And, it would be nice if it could be based on some actual data (found on the web, or elsewhere).\nSimulate a chemical reaction like the Elephant Toothpaste\n\n\n\n\n\n\n\nImportant\n\n\n\nFor simulations, it is often best if you can create a class representing each of the types of “actors” in your simulation. Then, if you create multiple instances of these classes, how do they interact with each other? For a simulation project, you must have a hypothesis you are trying to test. You cannot just create multiple agents and “see what happens.”"
  },
  {
    "objectID": "finalproject.html#games",
    "href": "finalproject.html#games",
    "title": "Final Project",
    "section": "Games",
    "text": "Games\n\nSample code for a Tic-Tac-Toc game, guessing game, and colliding-particles games are available on request.\nIn prior years, students have built games including Evil Hangman, Connect Four (based on the tic-tac-toe code), Battleship (using turtle graphics), Minesweeper, etc.\nSome simple modern board games: Gobblet Gobblers (a tic-tac-toe variant), boop., Glüx, SHŌBU, Quoridor, Deep Sea Adventure, Spot It, Half-Truth, Just One."
  },
  {
    "objectID": "finalproject.html#python-libraries-you-can-explore",
    "href": "finalproject.html#python-libraries-you-can-explore",
    "title": "Final Project",
    "section": "Python libraries you can explore",
    "text": "Python libraries you can explore\n\nawesome-python: a curated list of awesome Python frameworks, libraries, software and resources.\n\nInterfaces:\n\nGUI: GUIZero, PyQt5, Tkinter, Kivy, PySimpleGUI\nWeb & Mobile: CherryPy, Django, Flask, Pyramid\nEmbedded systems / Electronics: MicroPython, PySerial\n\nData Handling and Visualization:\n\nFiles and file system: pickle\nData handling: pandas\nData scraping and crawling: scrapy, RoboBrowser\nVisualization: Plotly, matplotlib,\n\nComputer Graphics and Simulation: vpython, pymunk (physics simulation)\nMultimedia Processing:\n\nAudio processing: Librosa, Aubio, PyAudio\nImage processing: Pillow, OpenCV, Scikit-image, Imageio\nVideo processing: MoviePy, OpenCV, Scikit-Video, Imageio\n\nLanguage Processing: spaCy:, Transformers, Gensim, NLTK (Natural Language Toolkit):\nGaming: PyGame, PyGameZero, Arcade, adventurelib, Ren’Py, Panda3D\n\nSee a comparison here."
  },
  {
    "objectID": "finalproject.html#datasets-you-can-use",
    "href": "finalproject.html#datasets-you-can-use",
    "title": "Final Project",
    "section": "Datasets you can use",
    "text": "Datasets you can use\n\nKaggle Datasets\ndata.gov\nOur World in Data\nCORGIS Datasets Project (“The Collection of Really Great, Interesting, Situated Datasets”): https://think.cs.vt.edu/corgis/\nNOAA climate data\nUS Geological survey live feeds, including recent earthquakes"
  },
  {
    "objectID": "classes/Week 7/02-26-24.html",
    "href": "classes/Week 7/02-26-24.html",
    "title": "1 02-26-24 (Monday)",
    "section": "",
    "text": "1 02-26-24 (Monday)\n\nGo and work\nHonor the One who is working on you.\nDo so by making beautiful things,\nBe serving in beautiful ways,\nBy speaking up for the weak whose beauty is being maligned,\nBy filling this city with the aroma of good and beautiful work\nReflect the beautiful work of your heavenly Father,\nNourished now by the grace and mercy of Christ,\nIn the power of the Holy Spirit.\nGod has already accomplished the great work.\nGod goes before you and behind you.\nGod works at your side.\n(Matthew Kaemingk & Cory B. Willson, Work and Worship, p. 140)\n\n\n\n2 Announcements\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Classes\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 6/02-21-24.html",
    "href": "classes/Week 6/02-21-24.html",
    "title": "02-21-24 (Wednesday)",
    "section": "",
    "text": "Lord, you reveal your glory in every thing you made\nLet us today engage with this creation so that we may participate in your beauty and wisdom\nMay the technology we use or even develop point us toward that,\nInstead of dragging us towards our own vicious desires and illusions of freedom\nHelp us, and our society, to know your ways and be still, for yours is the glory\nAnd our hearts are restless till they find rest in You.\nAmen."
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#why-use-functions",
    "href": "classes/Week 6/02-21-24.html#why-use-functions",
    "title": "02-21-24 (Wednesday)",
    "section": "2.1 Why use functions?",
    "text": "2.1 Why use functions?\n\nPrograms could be written without functions and all code written in one block, but:\n\nthe program it would become large\na lot of code would be duplicated\n\nBreaking big programs into smaller functions:\n\nallows work to be divided among several programmers\nenables functions to be re-used in other programs\nmakes testing and maintenance easier\nimproves readability"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#defining-a-function",
    "href": "classes/Week 6/02-21-24.html#defining-a-function",
    "title": "02-21-24 (Wednesday)",
    "section": "2.2 Defining a function",
    "text": "2.2 Defining a function\n\nPython has many built-in functions like print(), but you can also create your own functions\n\nthese functions are called user-defined functions\n\n\n\ndef function_name():\n    statement1\n    statement2\n\n\nThe code to be executed when the function is called needs to be indented - “inside” the function definition\n\nThe code inside the definition will not run unless it is called later!\n\nThe name for a function should follow the same general rules as for variables - as they also are variables pointing to objects.\n\nFunctions are also objects: of the “callable” type. Check, for example, type(print)."
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#examples",
    "href": "classes/Week 6/02-21-24.html#examples",
    "title": "02-21-24 (Wednesday)",
    "section": "2.3 Examples",
    "text": "2.3 Examples\n\n\n\n# define the function\ndef greeter():\n    print('Hello world!')\n\n# call the function\ngreeter()\n\nHello world!\n\n\n\n\n# define function\ndef print_square():\n    print('****')\n    print('****')\n    print('****')\n    print('****')\n\n# call the function\nprint_square()\n\n****\n****\n****\n****\n\n\n\n\n\nWhat is the flow of execution of the programs above? (state the sequence using the line numbers)"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#multiple-parameters",
    "href": "classes/Week 6/02-21-24.html#multiple-parameters",
    "title": "02-21-24 (Wednesday)",
    "section": "3.1 Multiple parameters",
    "text": "3.1 Multiple parameters\n\nimport turtle\n\ndef draw_square(pen, size):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(t, 100)\n\n\nNotice that parameters may be called in order\nIf we don’t want to follow this order, or we want to specify which parameter receives what, we simply state the names of the parameters:\n\n\ndraw_square(pen=t, size=100)\n\n\nWhat happens if we don’t specify all the parameters?\n\nimport turtle\n\ndef draw_square(pen, size):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(100)"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#preset-parameters",
    "href": "classes/Week 6/02-21-24.html#preset-parameters",
    "title": "02-21-24 (Wednesday)",
    "section": "3.2 Preset parameters",
    "text": "3.2 Preset parameters\n\nWe can pre-specify the values of some parameters by assigning some value to them in the definition\n\nThis also makes the parameter assignment optional when the function is called: see draw_square(t)\n\nThe function will run every time as if size=100, unless we say different\n\n\n\n\nimport turtle\n\ndef draw_square(pen, size=100):\n    for i in range(4):\n        pen.forward(size)\n        pen.left(90)\n\nt = turtle.Turtle()\ndraw_square(t)"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#return-always-exits-the-function",
    "href": "classes/Week 6/02-21-24.html#return-always-exits-the-function",
    "title": "02-21-24 (Wednesday)",
    "section": "4.1 return always exits the function!",
    "text": "4.1 return always exits the function!\n\ndef compute_it(x, y, z):\n    print(\"Calling compute_it\")\n    w = x + y / z\n    return w\n    print(\"Done!\") # this will never be executed\n    \ny = compute_it(1,2,3)\n\nCalling compute_it"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#what-if-i-dont-use-return",
    "href": "classes/Week 6/02-21-24.html#what-if-i-dont-use-return",
    "title": "02-21-24 (Wednesday)",
    "section": "4.2 What if I don’t use return?",
    "text": "4.2 What if I don’t use return?\n\nIf a function has no return statement, Python returns from the function after the last statement is executed\nThe output of a function without return is the null object, which in Python is called None. For example:\n\n\ndef hello():\n  print(\"Hello World!\")\n\nx = hello() # assigning the output of function hello() to x\nprint(x)\nx = print(\"Hello\") # assigning the output of the built-in function print() to x\nprint(x)\n\nHello World!\nNone\nHello\nNone"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#returning-multiple-values",
    "href": "classes/Week 6/02-21-24.html#returning-multiple-values",
    "title": "02-21-24 (Wednesday)",
    "section": "4.3 Returning multiple values",
    "text": "4.3 Returning multiple values\n\nIt is possible to return multiple values as a tuple:\n\n\ndef cumulatives(n):\n  c_sum = 0\n  c_prod = 1\n  for i in range(1,n+1):\n    c_sum += i\n    c_prod *= i\n  return c_sum, c_prod\n\na, b = cumulatives(4)\nprint(\"Cumulative sum is\", a, \"and cumulative product is\", b)\n\nCumulative sum is 10 and cumulative product is 24"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#scope-rules",
    "href": "classes/Week 6/02-21-24.html#scope-rules",
    "title": "02-21-24 (Wednesday)",
    "section": "5.1 Scope rules",
    "text": "5.1 Scope rules\n\nVariables in different scopes can have the same names!\n\n\na = 5\n\ndef fun1():\n  a = 1\n  print(a)\n\ndef fun2():\n  a = 3\n  print(a)\n\nprint(a)\n\n5"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#scope-rules-1",
    "href": "classes/Week 6/02-21-24.html#scope-rules-1",
    "title": "02-21-24 (Wednesday)",
    "section": "5.2 Scope rules",
    "text": "5.2 Scope rules\n\nLocal variables have precedence over global variables!\n\n\na = 5\n\ndef fun1():\n  a = 1\n  print(a)\n\ndef fun2():\n  a = 3\n  print(a)\n\nfun1()\nfun2()\nprint(a)\n\n1\n3\n5"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#example",
    "href": "classes/Week 6/02-21-24.html#example",
    "title": "02-21-24 (Wednesday)",
    "section": "5.3 Example",
    "text": "5.3 Example\n\nWhat are the local and global variables in the following program?\n\n\nx=4\n\ndef main():\n  f1(3)\n  f2(3)\n  print(x)\n\ndef f1(a):\n  x = 10\n  print('f1',a+x)\n  \ndef f2(a):\n  c=10\n  print('f2',a+x+c)\n\nmain()\n\nf1 13\nf2 17\n4"
  },
  {
    "objectID": "classes/Week 6/02-21-24.html#using-docstrings-in-development",
    "href": "classes/Week 6/02-21-24.html#using-docstrings-in-development",
    "title": "02-21-24 (Wednesday)",
    "section": "6.1 Using docstrings in development",
    "text": "6.1 Using docstrings in development"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#other-examples",
    "href": "classes/Week 5/02-16-24.html#other-examples",
    "title": "02-16-24 (Friday)",
    "section": "3.1 Other examples:",
    "text": "3.1 Other examples:\nUsing ranges:\n\nlength = 15\nexponents2 = [ 2**i for i in range(length)]\nprint(exponents2)\n\n[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\n\n\nNesting comprehensions:\n\nw = 4\nh = 4\nzero_matrix = [ [0 for j in range(h)] for i in range(w)]\nprint(zero_matrix)\n\n[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#examples",
    "href": "classes/Week 5/02-16-24.html#examples",
    "title": "02-16-24 (Friday)",
    "section": "3.2 Examples:",
    "text": "3.2 Examples:\nChecking conditions:\n\nx = [3, 6, -2, 5, -12, 5, -1]\nonly_positives = [i for i in x if i &gt; 0]\nprint(only_positives)\n\n[3, 6, 5, 5]\n\n\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x for x in fruits if \"a\" in x]\nprint(newlist)\n\n['apple', 'banana', 'mango']"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#creating-a-scenario-see-our-tile-drawing-exercise",
    "href": "classes/Week 5/02-16-24.html#creating-a-scenario-see-our-tile-drawing-exercise",
    "title": "02-16-24 (Friday)",
    "section": "3.3 Creating a scenario (see our tile drawing exercise)",
    "text": "3.3 Creating a scenario (see our tile drawing exercise)\n\nlevel = [['s' if j&lt;8 else 'g' for i in range(10)] for j in range(10)]"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#example-fibonacci-sequence",
    "href": "classes/Week 5/02-16-24.html#example-fibonacci-sequence",
    "title": "02-16-24 (Friday)",
    "section": "4.1 Example: Fibonacci sequence",
    "text": "4.1 Example: Fibonacci sequence\n\nacc1 = 1\nacc2 = 1\nfib = [1, 1]\nlength_fib = 10\ni = 1\nwhile i &lt; length_fib:\n    next_number = acc1 + acc2\n    fib.append(next_number)\n    acc1 = acc2\n    acc2 = next_number\n    i += 1\nprint(\"The Fibonnaci sequence is\", fib)"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#what-are-the-flags-in-this-code",
    "href": "classes/Week 5/02-16-24.html#what-are-the-flags-in-this-code",
    "title": "02-16-24 (Friday)",
    "section": "5.1 What are the flags in this code?",
    "text": "5.1 What are the flags in this code?\n\nnewlist = []\nnumber = int(input(\"Enter a number: \"))\nnewlist.append(number)\nascending = True\ndescending = True\nwhile True:\n    next_number = input(\"Enter a number: \")\n    if next_number == '':\n        break\n    if int(next_number) &lt; number:\n        ascending = False\n    else:\n        descending = False\n    newlist.append(int(next_number))\n    number = int(next_number)\nif ascending:\n    print(\"Sequence is in ascending order\")\nelif descending:\n    print(\"Sequence is in descending order\")\nelse:\n    print(\"Sequence is not ordered\")"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#narratives-about-automation",
    "href": "classes/Week 5/02-16-24.html#narratives-about-automation",
    "title": "02-16-24 (Friday)",
    "section": "6.1 Narratives about automation…",
    "text": "6.1 Narratives about automation…\n\n\n\nA golem is an animated, anthropomorphic being in Jewish folklore, which is entirely created from inanimate matter, usually clay or mud. The most famous golem narrative involves Judah Loew ben Bezalel, the late 16th-century rabbi of Prague. In Modern Hebrew, golem is used to mean “dumb” or “helpless”, or a pupa. Similarly, it is often used today as a metaphor for a mindless lunk or entity that serves a man under controlled conditions but is hostile to him under other conditions.\n\n\n\n\n\n\nDisney’s The Sorcerer’s Apprentice - a tale about dumb automation\nThe job displacement debate - will automation take over?\nWhat are your opinions about automation?"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#ancient-narratives-about-work",
    "href": "classes/Week 5/02-16-24.html#ancient-narratives-about-work",
    "title": "02-16-24 (Friday)",
    "section": "6.2 Ancient narratives about work",
    "text": "6.2 Ancient narratives about work\n\nIn the Akkadian Epic of Atrahasis humans were created so that they could “assume the drudgery of the god.”\nIn the Sumerian myth Enki and Ninmah they were created so that the gods would “be freed from their toil.”\nIn the Babylonian Enuma Elish the god Marduk creates man “on whom the toil of the gods [would] be laid that they may rest.”71\nThese myths carry not only the etiological account of humankind but also lay judgment on the nature and purpose of human labor — it is in essence just a burden, and we need to pass it along to the less powerful.\n\n\n“What has a man from all the toil and striving of heart with which he toils beneath the sun? For all his days are full of sorrow, and his work is a vexation. Even in the night his heart does not rest. This also is vanity.\nThere is nothing better for a person than that he should eat and drink and find enjoyment in his toil. This also, I saw, is from the hand of God, for apart from him who can eat or who can have enjoyment? For to the one who pleases him God has given wisdom and knowledge and joy, but to the sinner he has given the business of gathering and collecting, only to give to one who pleases God. This also is vanity and a striving after wind. Ecclesiastes 2.22-26\n\n\nIn the Genesis account, God is not burdened by his work but rather takes delight in it. And humanity, rather than being created to relieve him from work, was made to share in it. The principle connecting humanity’s origin with the purpose of work is not delegation but participation."
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#delegation",
    "href": "classes/Week 5/02-16-24.html#delegation",
    "title": "02-16-24 (Friday)",
    "section": "6.3 Delegation",
    "text": "6.3 Delegation\n\nBy delegating everything to machines, we alienate ourselves from life, from meaning, from purpose.\n\n\n“Our contact with reality has been attenuated to the pushing of buttons and the turning of handles. The results are guaranteed by machinery that is not of our design and often beyond our understanding. Hence the feelings of liberation and enrichment quickly fade; the new devices lose their glamour and meld into the conspicuous periphery of normalcy; boredom replaces exhilaration.” Albert Borgmann, Technology and the Character of Contemporary Life"
  },
  {
    "objectID": "classes/Week 5/02-16-24.html#engagement",
    "href": "classes/Week 5/02-16-24.html#engagement",
    "title": "02-16-24 (Friday)",
    "section": "6.4 Engagement",
    "text": "6.4 Engagement\n\nInstead of disengaging, technology should help us to engage more with the world and how it reveals God’s glory to us. This doesn’t exclude automation, but gives it a purpose.\nWhat are ways you can think of about engaging more with…\n\nPeople/Community?\nPlaces?\nNature?\nYour body?\nArt? (including skillful practices - cooking, crafting…?)\nSpecific moments of life? (see James K. A. Smith’s “How to Inhabit Time”)\nThe reality of suffering, misery, and “creation’s groaning and waiting for redemption”?"
  },
  {
    "objectID": "classes/Week 5/02-12-24.html",
    "href": "classes/Week 5/02-12-24.html",
    "title": "1 02-12-24 (Monday)",
    "section": "",
    "text": "1 02-12-24 (Monday)\n\nLord, we pray for those making international and national decisions about the ‘Information Super-Highway’;\nthat the whole range of considerations - political, economic, personal, sectional, communal - may be properly taken into account.\n\nLord, we pray for those setting up and administering national data-banks; we give thanks for the good they can do in co-ordinating information. We remember those who misuse the information they hold.\n\nLord, we pray for those involved in Research and Development in computers; we remember the power and responsibility they have for making changes in our world and our lives. We remember those who have lost their jobs as a result of new technology.\n\nLord, we pray for those who have boring keyboard jobs, those who suffer from Repetitive Strain Injury, or eyestrain. We pray for willingness to deal with the causes of such problems.\n\nLord, we pray for those in small computing businesses; the difficulties they face in chasing creditors; the stress on them, the risks they have to take - perhaps even with their own homes.\n\nLord, we pray for those who write computer games: some which are used to do much good at school, others to encourage people to gamble, some which are used just to make money. We pray for those who are addicted to computer and arcade games, and for their families; and for those who are anxious about the violence of some computer games.\n\nLord, we pray for those frightened of computers and other sorts of new technology; those who feel they cannot master using them; those who feel old or who lose their confidence in the face of change and new things.\n\nLord, we pray that technology may be the servant, not the controller of our lives.\n\n(From ‘Work in Worship’, Peterborough Diocese People and Work Programme)\n\n\n\n2 Announcements\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Loops\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 4/02-07-24.html",
    "href": "classes/Week 4/02-07-24.html",
    "title": "01-07-24 (Wednesday)",
    "section": "",
    "text": "VERSE 1:\nWe bring our time, we bring our treasure,\nwe lay them down before Your throne.\nYou will make them something greater,\nmore than we could ever know. (chorus)\n\nVERSE 2:\nWe bring our gifts, we bring our power\nplace them in Your sov’reign hand.\nYou will take what we have given,\nYou will use it for Your plan. (chorus)\n\nCHORUS:\nGlory be to God, the Maker\nglory be to God, Creator\nTake our time, use our treasure\nturn them into something greater:\nGlory be to God, the Maker.\n\nVERSE 3:\nThough our hearts are weak from failure,\nbroken dreams and failed attempts,\nshow us that in ev’ry season,\nYou will fill our emptiness. (chorus)\n(God the Maker, The Porter’s Gate)"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#exercise-1-if-versus-elif",
    "href": "classes/Week 4/02-07-24.html#exercise-1-if-versus-elif",
    "title": "01-07-24 (Wednesday)",
    "section": "5.1 Exercise 1: if versus elif",
    "text": "5.1 Exercise 1: if versus elif\n\nWhat is the difference between an elif and a if just after another if?\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nelif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\n\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\nLess than 5"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#exercise-2",
    "href": "classes/Week 4/02-07-24.html#exercise-2",
    "title": "01-07-24 (Wednesday)",
    "section": "5.2 Exercise 2",
    "text": "5.2 Exercise 2\n\nimport turtle\nt = turtle.Turtle()\nchoice = input(\"Choose between square, circle or both: \")\nif choice.lower() == \"square\" or choice.lower() == \"both\":\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\nif choice.lower() == \"circle\" or choice.lower() == \"both\":\n  turtle.circle(50)\nprint(\"Finished!\")\n\n\nWhich code chunks will execute:\n\nIf the user types square?\nIf the user types both?\nIf the user types potato?\n\nWhy are we setting choice.lower() in the comparison?"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#exercise-3",
    "href": "classes/Week 4/02-07-24.html#exercise-3",
    "title": "01-07-24 (Wednesday)",
    "section": "5.3 Exercise 3",
    "text": "5.3 Exercise 3\n\nIdentify the code chunks and write its fluxogram (note the nested ifs!)\n\n\nprint(\"Lamp doesn't work!\")\nans = input(\"Is the lamp plugged in? \")\nif ans == \"yes\":\n  ans = input(\"Is the bulb burned out? \")\n  if ans == \"yes\":\n    print(\"Replace bulb!\")\n  else:\n    print(\"Repair lamp!\")\nelse:\n  print(\"Plug in lamp!\")"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#cant-we-just-refine-the-logic",
    "href": "classes/Week 4/02-07-24.html#cant-we-just-refine-the-logic",
    "title": "01-07-24 (Wednesday)",
    "section": "6.1 Can’t we just refine the logic?",
    "text": "6.1 Can’t we just refine the logic?\n\nThe algorithm described failed because it couldn’t deal with exceptional cases, personal histories, etc.\n\nCan’t we just add these exceptions to the logic?\n\n\n\nThere are reasons to believe this won’t be sufficient.\n\nAutomating decision making can also be problematic when it completely stamps out any room for discretion. While human discretion presents its own issues, as described above, it can be useful when it is difficult or impossible to fully specify how decisions should be made in accordance with the goals and principles of the institution. Automation requires that an institution determine in advance all of the criteria that a decision-making scheme will take into account; there is no room to consider the relevance of additional details that might not have been considered or anticipated at the time that the software was developed.\n\n\nAutomated decision-making is thus likely to be much more brittle than decision-making that involves manual review because it limits the opportunity for decision subjects to introduce information into the decision-making process. People are confined to providing evidence that corresponds to a pre-established field in the software. Such constraints can result in absurd situations in which the strict application of decision-making rules leads to outcomes that are directly counter to the goals behind these rules. New evidence that would immediately reverse the assessment of a human decision maker may have no place in automated decision making. For example, in an automated system to assess people with illnesses to determine eligibility for a state-provided caregiver, one field asked if there were any foot problems. An assessor visited a certain person and filled out the field to indicate that they didn’t have any problems — because they were an amputee. - Solon Barocas, Moritz Hardt, Arvind Narayanan, When is automated decision making legitimate?"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#the-awkward-student-experiment",
    "href": "classes/Week 4/02-07-24.html#the-awkward-student-experiment",
    "title": "01-07-24 (Wednesday)",
    "section": "6.2 The awkward student experiment",
    "text": "6.2 The awkward student experiment\n\nPhilosopher Ludwig Wittgenstein (1889-1951) wrote: “no course of action could be determined by a rule, because any course of action can be made out to accord with the rule” (Philosophical Investigations §201a). In other words: “rules do not contain the rules for its own application”\nExample: the akward student experiment (Harry Collins, “Changing Order”): “given the sequence ‘2, 4, 6, 8’, continue it in the same way.”\n\n\n“We know how to go on in the ‘same way’ because we share a ‘form of life’. The rightness of ‘10, 12, 14, 16’ as the continuation of ‘2, 4, 6, 8’ resides in its rightness for everyone sharing our culture.” (Harry Collins)\n\n\nIn a similar way, an algorithm will follow rules in the way we think it should follow rules (i.e., ignoring lots of exceptional situations). But without a shared culture, for understanding context and then how to apply the rule, it will operate almost “blindly”…"
  },
  {
    "objectID": "classes/Week 4/02-07-24.html#discussion-programmers-encode-and-standardize-intelligence",
    "href": "classes/Week 4/02-07-24.html#discussion-programmers-encode-and-standardize-intelligence",
    "title": "01-07-24 (Wednesday)",
    "section": "6.3 Discussion: programmers encode and standardize intelligence",
    "text": "6.3 Discussion: programmers encode and standardize intelligence\n\n“The power that algorithms offer is not without consequences. They take processes that we used to be able to see people do and hide them behind code. They take procedures that used to be controlled by every individual who executed them and centralize and standardize this execution in the hands of software developers often in private organizations. And this shift of power, from the collective to developers, had a price: the knowledge those individuals have of what they need is no longer brought to bear on the processes that algorithms automate. Instead, it’s up to those few developers to proactively learn that knowledge and translate it into uniform step-by-step instructions that likely don’t account for the diversity of needs and contexts in the world. The critical question about algorithms, then, is not how to automate something with an algorithm, but whether to and why.” - Amy J. Ko, Critically Conscious Computing\n\n\nWhat are the value judgements when we encode intelligence in algorithms?\n\nIf-else statements are distinction judgments, or in other words, DISCRIMINATIONS. Are these judgments fair? Do they really take what is needed into account?\n\nAs Christians, are we being fair with the diversity and complexity of the world, or are we trying to code everything into simplistic operations just in order to better control life situations?"
  },
  {
    "objectID": "classes/Week 3/02-02-24.html",
    "href": "classes/Week 3/02-02-24.html",
    "title": "02-02-24 (Friday)",
    "section": "",
    "text": "Lord, you rule the world with a good and rightful code.\nWe ask for your wisdom to see things correctly and represent them faithfully.\nFill us with your justice so that we may know how to reflect it in the way we code,\nGive us humility so that we may know the limits of our knowledge and its application in society,\nGive us the courage to stand firmly when we feel pressured to go beyond these limits,\nAnd give us responsibility as rulers we may be in the areas of society where you put us.\n\nLord, we want to reflect your good rule, so that people of all nations may fear your name.\nMake known to us the path of life;\nFor in your presence there is fullness of joy;\nand at your right hand are pleasures forevermore (Psalm 16).\nAmen."
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#why-immutables",
    "href": "classes/Week 3/02-02-24.html#why-immutables",
    "title": "02-02-24 (Friday)",
    "section": "1.1 Why immutables?",
    "text": "1.1 Why immutables?\nWhy use tuples since they can’t change?\n\nThey uses less memory and demands less processing.\nThey don’t need to be copied when attributing to a new variable (see later).\n\n\n1.1.1 What if I really want to change?\n\nfruits[1] = \"pineapple\" # try changing \"apple\" to \"pineapple\"\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nTo “change” a tuple, for example, you would basically need to either:\n\nCreate a new tuple (with the changes you want), or\nConvert the tuple to a list, change the value you want (lists are mutable), and convert it back to a tuple.\n\nWhich would mean creating a new list object (from the tuple), and then creating a new tuple object (from the list)… which can be actually very inefficient and costly…"
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#subscripts-of-subscripts-lab-3.1",
    "href": "classes/Week 3/02-02-24.html#subscripts-of-subscripts-lab-3.1",
    "title": "02-02-24 (Friday)",
    "section": "5.1 Subscripts of subscripts (Lab 3.1)",
    "text": "5.1 Subscripts of subscripts (Lab 3.1)\n\nNotice that we have a list of tuples. To access individual items, we use subscripts of subscripts: [][][]...\nHow, for example, do we access the 2nd tuple (('hey', 'ho')) on the 3rd list inside the list?\nHow do we access the word ho?\n\n\nx = [(1,2,'hey'), None, [123, ('hey', 'ho'), 123, {}], [[]], 1]\n\n\nHow do we access the value the character 'h' in the word 'hi' in the dictionary inside the tuple?\n\n\ny = 123, None, 321, {12: True, 'potato': 0, 123:123, 'tomato': 'hi'}"
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#lists-of-objects-las-3.2",
    "href": "classes/Week 3/02-02-24.html#lists-of-objects-las-3.2",
    "title": "02-02-24 (Friday)",
    "section": "5.2 Lists of objects (Las 3.2)",
    "text": "5.2 Lists of objects (Las 3.2)\n\nWe can fill a list with turtles! We started a list with 4 empty spaces, and put the 4 different turtles there.\n\n\ntmnt = 4*[None] # our list of (ninja) turtles\nfor i in range(4): # the following code will run 4 times, at each time, variable \"i\" will have values 0, 1, 2 and 3\n  tmnt[i] = turtle.Turtle()    # create a turtle and assign it to the position \"i\" in the list\n\n\nYou can make each turtle do its stuff, then, by calling them tmnt[&lt;number_of_turtle&gt;].&lt;method...&gt;()"
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#dictionary-filling-lab-3.3",
    "href": "classes/Week 3/02-02-24.html#dictionary-filling-lab-3.3",
    "title": "02-02-24 (Friday)",
    "section": "5.3 Dictionary filling (Lab 3.3)",
    "text": "5.3 Dictionary filling (Lab 3.3)\n\nLet’s make a dictionary with the turtles by name? Suggestion: \"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"\n\n\ntmnt_names = \"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"\ntmnt = {}  # empty dictionary\nfor i in range(4):\n  tmnt[tmnt_names[i]] = turtle.Turtle()\n\n\nAttention to the assignment tmnt[tmnt_names[i]]. See what is happening? We are setting the key to be the string in the list accessed with the index “i”.\nYou can now call each turtle by name just by typing, for example, tmnt['Leonardo'].&lt;method...&gt;(). Cowabunga!"
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#moderating-our-curiosity",
    "href": "classes/Week 3/02-02-24.html#moderating-our-curiosity",
    "title": "02-02-24 (Friday)",
    "section": "7.1 Moderating our curiosity",
    "text": "7.1 Moderating our curiosity\n\nTo acknowledge and protect what should be hidden, we need to cultivate a virtuous curiosity.\n\nThomas Aquinas speaks of the difference between studiositas (virtue) and curiositas (vice) (see more in this interesting article). There are at least 7 vices of curiosity:\n\nARROGANCE: seeking knowledge of things that no one is supposed to know;\nNOSYNESS: seeking knowledge that may belong to some people, but not to us;\nDISTRACTION: seeking knowledge of things that are not convenient to know at a certain time;\nIMMODERATION: wanting to know something with an unhealthy desire (all forms of curiosity are failures of temperance, but this label helps to isolate this specific aspect);\nIMPERTINENCE: seeking to know things in a more certain way than one can know, doing violence to the object of knowledge;\nSUPERFICIALITY: disrespecting the object of knowledge, being content with a superficial understanding and quickly moving on to something else;\nPOSSESSIVENESS: delighting not in the object of knowledge, but in the act of knowing it. It resembles, on an intellectual level, the vice of greed."
  },
  {
    "objectID": "classes/Week 3/02-02-24.html#presence-versus-re-presence",
    "href": "classes/Week 3/02-02-24.html#presence-versus-re-presence",
    "title": "02-02-24 (Friday)",
    "section": "7.2 Presence versus re-presence",
    "text": "7.2 Presence versus re-presence\nFurthermore, when we deal with digital information, we are only dealing with past - a frozen portrait of something that happened. To live in interfaces is to live in the past.\n\nThe contrast to this would be to live in the present. To live in the present, we acknowledge presence, and not re-presence (representations).\nThus, as Christians seeking the common good, we would really have to think about an equilibrium between past and present, data and current life, virtual and material. Maybe we are living in a world where this can be quite unbalanced…\n\n\n“Physical reality seems to recede in proportion as man’s symbolic activity advances. Instead of dealing with things themselves, man is, in a sense, constantly talking to himself. He has become so involved in linguistic forms, in artistic images, in mythical symbols or in religious rites that he cannot see or know anything except through the interposition of an artificial medium.” Ernest Cassirer, “An Essay on Man”"
  },
  {
    "objectID": "classes/Week 3/01-29-24.html",
    "href": "classes/Week 3/01-29-24.html",
    "title": "1 01-29-24 (Monday)",
    "section": "",
    "text": "1 01-29-24 (Monday)\n\nLord, we pray for those making international and national decisions about the ‘Information Super-Highway’;\nthat the whole range of considerations - political, economic, personal, sectional, communal - may be properly taken into account.\n\nLord, we pray for those setting up and administering national data-banks; we give thanks for the good they can do in co-ordinating information. We remember those who misuse the information they hold.\n\nLord, we pray for those involved in Research and Development in computers; we remember the power and responsibility they have for making changes in our world and our lives. We remember those who have lost their jobs as a result of new technology.\n\nLord, we pray for those who have boring keyboard jobs, those who suffer from Repetitive Strain Injury, or eyestrain. We pray for willingness to deal with the causes of such problems.\n\nLord, we pray for those in small computing businesses; the difficulties they face in chasing creditors; the stress on them, the risks they have to take - perhaps even with their own homes.\n\nLord, we pray for those who write computer games: some which are used to do much good at school, others to encourage people to gamble, some which are used just to make money. We pray for those who are addicted to computer and arcade games, and for their families; and for those who are anxious about the violence of some computer games.\n\nLord, we pray for those frightened of computers and other sorts of new technology; those who feel they cannot master using them; those who feel old or who lose their confidence in the face of change and new things.\n\nLord, we pray that technology may be the servant, not the controller of our lives.\n\n(From ‘Work in Worship’, Peterborough Diocese People and Work Programme)\n\n\n\n2 Announcements\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Data Types\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 2/01-24-24.html",
    "href": "classes/Week 2/01-24-24.html",
    "title": "01-24-24 (Wednesday)",
    "section": "",
    "text": "Dear Heavenly Father,\nWe invite Your presence into this classroom.\nLet Your light shine upon us, illuminating the path of learning, so we may contemplate your beauty and love in everything you made.\nMay this classroom be a place of respect, fellowship, and growth. Help us to be open to new ideas, to embrace challenges, and to support one another in our academic endeavors. Bless this class so that it may be a space where minds are enriched, friendships are formed, and hearts are touched.\nGuide our imaginations and desires towards your love and justice, so that we may respond adequately to your call to be Christ’s agents of renewal in the world.\nThrough our Lord Jesus Christ, your Son, who lives and reigns with you in the unity of the Holy Spirit, one God, for ever and ever.\nAmen."
  },
  {
    "objectID": "classes/Week 2/01-24-24.html#resulting-types",
    "href": "classes/Week 2/01-24-24.html#resulting-types",
    "title": "01-24-24 (Wednesday)",
    "section": "3.1 Resulting types",
    "text": "3.1 Resulting types\n\nIf any of the operands is a float, result will be a float. Otherwise (both are integer), result is an integer.\nHowever, there is an exception: result of a division (not floor division) is always a float. Careful with that! (why? we’ll see in a moment)"
  },
  {
    "objectID": "classes/Week 2/01-24-24.html#operator-precedence",
    "href": "classes/Week 2/01-24-24.html#operator-precedence",
    "title": "01-24-24 (Wednesday)",
    "section": "3.2 Operator precedence",
    "text": "3.2 Operator precedence\n\nAlways be careful with expressions using more than one operator! For example:\n\n\na = 3\nb = 6\nc = a + b * 2\nprint(c)\n\n\nThis evaluates as \\(a + (b \\times 2) = 3 + (6 * 2) = 3 + 12 = 15\\)\n\nPython operator precedence order:\n\nParentheses: ()\nExponents: **\nMultiplication, divisions and modulus: * / // %\nAddition and subtraction: + -\nComparisons: &lt;= &lt; &gt;= &gt; == != is (next week)\nBoolean not (next week)\nBoolean and (next week)\nBoolean or (next week)"
  },
  {
    "objectID": "classes/Week 2/01-24-24.html#operators-in-strings",
    "href": "classes/Week 2/01-24-24.html#operators-in-strings",
    "title": "01-24-24 (Wednesday)",
    "section": "3.3 Operators in strings",
    "text": "3.3 Operators in strings\n\nPython also permits using SOME operators with strings. In a metaphorical way…\n\n\n\n\n\n\n\n\n\n\n\nString Operation\nMetaphor\nOperator\nExample\nEvaluates to\n\n\n\n\nConcatenation\nAddition\n+\n\"Hey\" + \" \" + \"apple\"\n\"Hey apple\"\n\n\nRepetition\nMultiplication\n*\n\"na\" * 4\n\"nananana\"\n\n\n\n\nOther operators are not supported. Multiplication of a string with another string is also not supported. Both wouldn’t make so much sense…"
  },
  {
    "objectID": "classes/Week 2/01-24-24.html#evaluating-operations-in-strings",
    "href": "classes/Week 2/01-24-24.html#evaluating-operations-in-strings",
    "title": "01-24-24 (Wednesday)",
    "section": "3.4 Evaluating operations in strings",
    "text": "3.4 Evaluating operations in strings\nIt is also possible to evaluate an expression coded as a string. For example:\n\nexpression = \"2 * (4 + 6) / 3 - 5\"\nresult = eval(expression)\nprint(result)\n\n1.666666666666667"
  },
  {
    "objectID": "classes/Week 2/01-24-24.html#so-be-careful-when-mixing-numeric-types",
    "href": "classes/Week 2/01-24-24.html#so-be-careful-when-mixing-numeric-types",
    "title": "01-24-24 (Wednesday)",
    "section": "4.1 So, be careful when mixing numeric types!",
    "text": "4.1 So, be careful when mixing numeric types!\n\nOn June 4, 1996 the European Space Agency launched the first Ariane 5 rocket:\n\nthe result of a decade of development, $8 billion\nExploded 40 seconds after lift-off with a $500 million satellite payload on board…\n\nCause was a software error related to a number type conversion and an overflow\n\n\nhttp://www-users.math.umn.edu/~arnold/disasters/ariane.html"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html",
    "href": "classes/Week 1/01-19-24.html",
    "title": "01-19-24 (Friday)",
    "section": "",
    "text": "From the lectionary reading, Psalm 62:5-12"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#variables",
    "href": "classes/Week 1/01-19-24.html#variables",
    "title": "01-19-24 (Friday)",
    "section": "2.1 Variables",
    "text": "2.1 Variables\n\nVariables are names we set to refer to objects.\n\nA not-so-good metaphor: variables are containers for objects\nA better metaphor: objects are houses, variables are addresses of these houses\n\n\n\nx = 123  # a variable x that contains the integer value 123\nx = x + 1  # x is updated with the value of x + 1, becoming 124...\nhello = \"Hello World!\"  # a variable that contains the string \"Hello World!\"\nis_done = True  # a variable is_done with the logic value True"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#objects-x-variables",
    "href": "classes/Week 1/01-19-24.html#objects-x-variables",
    "title": "01-19-24 (Friday)",
    "section": "2.2 Objects x variables",
    "text": "2.2 Objects x variables\n\nIt is very important to differentiate!\nWhich of the following are variables and which are objects?\n\n\"hello\"\n\nhello\n\n132\n\nvar_1\n\ntruev\n\nTrue"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#variable-naming-conventions-in-python",
    "href": "classes/Week 1/01-19-24.html#variable-naming-conventions-in-python",
    "title": "01-19-24 (Friday)",
    "section": "2.3 Variable naming conventions in Python",
    "text": "2.3 Variable naming conventions in Python\n\nThey MUST start with a letter or with _ (underline)\nThey are case sensitive (‘C’ is different from ‘c’)\nThey can’t contain: { ( + - * / \\ ; . , ?\nThey can’t have names of words already reserved for other purposes in Python:\n\n\n\nWhat happens if?\n\n\nTrue = 123\n\n\n\"Hello\" = world\n\n\n1stcar = 2000"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#graphical-inputoutput",
    "href": "classes/Week 1/01-19-24.html#graphical-inputoutput",
    "title": "01-19-24 (Friday)",
    "section": "3.1 Graphical input/output",
    "text": "3.1 Graphical input/output\n\nAlso called Graphical User Interface (GUI) - we’ll study it in Unit 10\nKind of mimics the way we use mechanical input and output\nTraditionally, WIMP (Windows, Icons, Menus and Pointers)"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#text-inputoutput",
    "href": "classes/Week 1/01-19-24.html#text-inputoutput",
    "title": "01-19-24 (Friday)",
    "section": "3.2 Text input/output",
    "text": "3.2 Text input/output\n\nEven simpler, however, it is a good start for programming!\n\n\nname = input(\"Please enter your name:\")\nreverse = name[::-1]\nprint(\"Your name in reverse is\", reverse)\n\nThe command-line interface will ask for input from our keyboard, and then:"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#python-text-output-print",
    "href": "classes/Week 1/01-19-24.html#python-text-output-print",
    "title": "01-19-24 (Friday)",
    "section": "3.3 Python text output: print()",
    "text": "3.3 Python text output: print()\n\nPut what you want to print between the parentheses: print(\"Hello World\")\nIf you want to jump to a new line, use \\n: print(\"Hello\\nWorld\")\nYou can also pass multiple arguments by separating them with commas: print(\"x has the value:\", x, \"\\nand y has the value:\", y)"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#python-text-input-input",
    "href": "classes/Week 1/01-19-24.html#python-text-input-input",
    "title": "01-19-24 (Friday)",
    "section": "3.4 Python text input: input()",
    "text": "3.4 Python text input: input()\n\nThe command waits until the user types some text in the command-line interface and finishes with ENTER\nThe term input() “turns” into the text entered, and is ALWAYS an object the type string!\nThus, it needs to be saved into a variable: x = input()\n\nAfter the user types “Hi”, for example, it is as if: x = \"Hi\"\n\nYou can customize an input message by passing a string:\n\n\nx = input(\"Please enter your name: \")"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#input-of-numeric-values",
    "href": "classes/Week 1/01-19-24.html#input-of-numeric-values",
    "title": "01-19-24 (Friday)",
    "section": "3.5 Input of numeric values",
    "text": "3.5 Input of numeric values\n\nNow, suppose we want to calculate the sum of two numbers:\n\n\nx = input(\"Please enter first number: \")\ny = input(\"Please enter second number: \")\nz = x + y\nprint(\"The sum is\", z)\n\nWhat happened???"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#converting-string-to-number-types",
    "href": "classes/Week 1/01-19-24.html#converting-string-to-number-types",
    "title": "01-19-24 (Friday)",
    "section": "3.6 Converting string to number types",
    "text": "3.6 Converting string to number types\n\nYou can convert a string to a number using the methods int() and float()\n\nThe string that goes inside the parentheses (which we call the “argument” of the method) will be turned to an integer/float\n\n\n\nxstring = input(\"Please enter your age: \")\nx = int(xstring)\nprint(\"Your age is \", x)\n\n\nJust make things shorter by chaining one method into another!\n\n\nx = int(input(\"Please enter your age: \"))\nprint(\"Your age is \", x)"
  },
  {
    "objectID": "classes/Week 1/01-19-24.html#integrated-development-environment-ide",
    "href": "classes/Week 1/01-19-24.html#integrated-development-environment-ide",
    "title": "01-19-24 (Friday)",
    "section": "4.1 Integrated Development Environment (IDE)",
    "text": "4.1 Integrated Development Environment (IDE)\n\nIn our classes, we will be using Thonny\n\nNotice the panels for scripting and for interactive shell\nThere is also a helper and variable explorer for debugging code"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html",
    "href": "classes/Week 1/01-17-24.html",
    "title": "01-17-24 (Wednesday)",
    "section": "",
    "text": "Dear Heavenly Father,\nAs we gather here today to embark on a new journey of learning, we invite Your presence into this classroom.\nBless each student with wisdom, understanding, and a thirst for knowledge. Let Your light shine upon us, illuminating the path of learning, so we may contemplate your beauty and love in everything you made.\nMay this classroom be a place of respect, fellowship, and growth. Help us to be open to new ideas, to embrace challenges, and to support one another in our academic endeavors. Bless this class so that it may be a space where minds are enriched, friendships are formed, and hearts are touched.\nGuide our imaginations and desires towards your love and justice, so that we may respond adequately to your call to be Christ’s agents of renewal in the world.\nThrough our Lord Jesus Christ, your Son, who lives and reigns with you in the unity of the Holy Spirit, one God, for ever and ever.\nAmen."
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#programs-are-forms-of-wisdom",
    "href": "classes/Week 1/01-17-24.html#programs-are-forms-of-wisdom",
    "title": "01-17-24 (Wednesday)",
    "section": "3.1 Programs are forms of wisdom",
    "text": "3.1 Programs are forms of wisdom\n\n\n\n\n\n\n\n\n\n\n\n22 “The Lord brought me forth as the first of his works, before his deeds of old; 23 I was formed long ages ago, at the very beginning, when the world came to be. 24 When there were no watery depths, I was given birth, when there were no springs overflowing with water; 25 before the mountains were settled in place, before the hills, I was given birth, 26 before he made the world or its fields or any of the dust of the earth. 27 I was there when he set the heavens in place, when he marked out the horizon on the face of the deep, 28 when he established the clouds above and fixed securely the fountains of the deep, 29 when he gave the sea its boundary so the waters would not overstep his command, and when he marked out the foundations of the earth. 30 Then I was constantly at his side. I was filled with delight day after day, rejoicing always in his presence, 31 rejoicing in his whole world and delighting in mankind. Proverbs 8.22-31"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#automatic-computation",
    "href": "classes/Week 1/01-17-24.html#automatic-computation",
    "title": "01-17-24 (Wednesday)",
    "section": "4.1 Automatic computation",
    "text": "4.1 Automatic computation\n\nCharles Babbage is known for developing the first automatic computer machine (1820’s)\n\n“the faster and more reliably one could calculate, the more money businesses could make.”\n\n\n\n\n\n\n\n\n\n\nAda Lovelace, daughter of Lord Byron, became enamoured by Babbage’s machine and developed the first algorithm, to calculate a sum of numbers:"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#algorithm",
    "href": "classes/Week 1/01-17-24.html#algorithm",
    "title": "01-17-24 (Wednesday)",
    "section": "4.2 Algorithm",
    "text": "4.2 Algorithm\n\nBasically, a program: a description of a series of operations.\nBut with some specific features:\n\nPrecise and unambiguous steps\nDefinite results\nFinite\nGeneralizable (works with a range of possible inputs)\nUsually expressed through abstract/mathematical notation"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#stem-today-is-programming-computations",
    "href": "classes/Week 1/01-17-24.html#stem-today-is-programming-computations",
    "title": "01-17-24 (Wednesday)",
    "section": "4.3 STEM today is programming computations",
    "text": "4.3 STEM today is programming computations\n\nFor complex calculations, we don’t rely anymore on pressing calculator buttons. We have to make automatic computation programs"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#example-drawing-a-rectangle",
    "href": "classes/Week 1/01-17-24.html#example-drawing-a-rectangle",
    "title": "01-17-24 (Wednesday)",
    "section": "5.1 Example: Drawing a rectangle",
    "text": "5.1 Example: Drawing a rectangle\n\nSay to a computer “Draw a red rectangle in the top left corner of the screen.”\n\nWhat shade of red, precisely?\nHow big should the rectangle be?\nExactly in the top left, or with some padding, and how much?\nWhen should it be drawn?\nWhat is the “top” of the screen on a mobile device that can be rotated?\n\nCode in Javascript:\n\n// Get the canvas on the webpage that we want to render to.\nlet c = document.getElementById(\"myCanvas\");\n// Ask the canvas for an object that knows how to render 2-dimensional graphics onto the canvas.\nlet renderer = c.getContext(\"2d\");\n// Set the color to render, then draw a 100 x 100 pixel rectangle.\nrenderer.fillStyle = \"rgb(255, 0, 0)\";\nrenderer.fillRect(0, 0, 100, 100);\n\nNotice that many things that do not matter when we give instructions to other people actually do matter for the computer. And vice-versa…\n\nWhy is that?"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#punched-cards",
    "href": "classes/Week 1/01-17-24.html#punched-cards",
    "title": "01-17-24 (Wednesday)",
    "section": "6.1 Punched cards",
    "text": "6.1 Punched cards\n\nAt the end of the 1800s, Herman Hollerith invented the punched card, to be automatically read by a machine.\nInstructions were then CODED in the punched card."
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#grace-hoppers-proposal",
    "href": "classes/Week 1/01-17-24.html#grace-hoppers-proposal",
    "title": "01-17-24 (Wednesday)",
    "section": "6.2 Grace Hopper’s proposal",
    "text": "6.2 Grace Hopper’s proposal\n\nLater, in 1949, Grace Hopper invented the first programming language: COBOL (COmmon Business-Oriented Language)\n\nFor example, the user would write: COMPUTE SUM = (1 + 3) DIVIDE SUM BY 2 GIVING AVERAGE\n\nCrucial to this was the development of the compiler: a program capable of converting a sentence very much like an English phrase (with syntax and semantics) into machine instructions."
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#so-whats-a-code",
    "href": "classes/Week 1/01-17-24.html#so-whats-a-code",
    "title": "01-17-24 (Wednesday)",
    "section": "6.3 So, what’s a code?",
    "text": "6.3 So, what’s a code?\n\n“A program that follows a set of rules” (in order to be correctly interpreted)\nTo learn how to program, then, is to learn how to express yourself correctly through the code\n\nNotice the origin of the word - codex"
  },
  {
    "objectID": "classes/Week 1/01-17-24.html#python-programming-language",
    "href": "classes/Week 1/01-17-24.html#python-programming-language",
    "title": "01-17-24 (Wednesday)",
    "section": "6.4 Python programming language",
    "text": "6.4 Python programming language\n\nInvented in the early 1990s by Guido van Rossum, named after Monty Python’s Flying Circus\nOpen source project\nHigh-level, general-purpose language\nWidely available, easy to learn, rich in tools and libraries, and portable"
  },
  {
    "objectID": "class-demonstrations.html",
    "href": "class-demonstrations.html",
    "title": "Class demonstrations",
    "section": "",
    "text": "import turtle\nimport random\n\nMAX_COORD = 300\nCOLORS = ['yellow', 'blue', 'red', 'green']\nRADIUS = 25\n\nt = turtle.Turtle()\n\nfor i in range(20): # repeat\n    t.fillcolor(COLORS[random.randint(0,3)])\n    t.penup()\n    t.goto(random.randint(-MAX_COORD,MAX_COORD), random.randint(-MAX_COORD,MAX_COORD))\n    t.pendown()\n    t.begin_fill()\n    t.circle(RADIUS)\n    t.end_fill()"
  },
  {
    "objectID": "class-demonstrations.html#random-circles-in-turtle-grapics",
    "href": "class-demonstrations.html#random-circles-in-turtle-grapics",
    "title": "Class demonstrations",
    "section": "",
    "text": "import turtle\nimport random\n\nMAX_COORD = 300\nCOLORS = ['yellow', 'blue', 'red', 'green']\nRADIUS = 25\n\nt = turtle.Turtle()\n\nfor i in range(20): # repeat\n    t.fillcolor(COLORS[random.randint(0,3)])\n    t.penup()\n    t.goto(random.randint(-MAX_COORD,MAX_COORD), random.randint(-MAX_COORD,MAX_COORD))\n    t.pendown()\n    t.begin_fill()\n    t.circle(RADIUS)\n    t.end_fill()"
  },
  {
    "objectID": "class-demonstrations.html#are-you-a-horse",
    "href": "class-demonstrations.html#are-you-a-horse",
    "title": "Class demonstrations",
    "section": "Are you a horse?",
    "text": "Are you a horse?\n\nimport turtle\n\nt = turtle.Turtle()\n\nchoice = input(\"Choose between square, circle or both: \")\nif choice.lower() == \"square\" or choice.lower() == \"both\":\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\nif choice.lower() == \"circle\" or choice.lower() == \"both\":\n  turtle.circle(50)\n  \nprint(\"Finished!\")"
  },
  {
    "objectID": "class-demonstrations.html#dog-class",
    "href": "class-demonstrations.html#dog-class",
    "title": "Class demonstrations",
    "section": "Dog class",
    "text": "Dog class\n\nclass Dog(): # definition of the class (\"blueprint\")\n  \n  max_age = 20\n  \n  def __init__(self, breed, age, color):\n    self.breed = breed\n    self.age = age\n    self.color = color\n    \n  def eat(self):  # a method (NOTICE THAT IT IS INSIDE THE CLASS DEFINITION)\n    pass  # using \"pass\" to write it as an empty function (to be filled later)\n  \n  def sleep(self):\n    pass\n  \n  def sit(self):\n    pass\n  \n  def average_color(c1, c2):\n    return c1 + ' and ' + c2\n  \n  def crossbreed(self, dog):\n    if self.breed == dog.breed:\n      puppy = Dog(self.breed,0,Dog.average_color(self.color, dog.color))\n    else:\n      puppy = Dog('mutt',0,Dog.average_color(self.color, dog.color))\n    return puppy\n\n  def __str__(self):\n    return f'breed: {self.breed}, age: {self.age}, color: {self.color}'\n  \n# testing\na = Dog('pug', 3, 'black')\nb = Dog('boxer', 2, 'white')\nprint(a.crossbreed(b))\n\nbreed: mutt, age: 0, color: black and white"
  },
  {
    "objectID": "class-demonstrations.html#shapes-and-areas",
    "href": "class-demonstrations.html#shapes-and-areas",
    "title": "Class demonstrations",
    "section": "Shapes and areas",
    "text": "Shapes and areas\n\nimport math\n\nclass Shape:\n    def area(self):\n        return 0\n      \n    def __eq__(self, other):\n        return self.area() == other.area()\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius**2\n\n\n# main chunk\nrectangle = Rectangle(5, 10)\ncircle = Circle(3)"
  },
  {
    "objectID": "classes/Week 1/01-18-24.html",
    "href": "classes/Week 1/01-18-24.html",
    "title": "1 01-18-24 (Thursday - Lab)",
    "section": "",
    "text": "Dear Heavenly Father,\nWe start this day asking for your joy and strength in this moment when we are practicing these programming skills.\nPlease let this be a moment of true fellowship and character building in our community of learning.\nBe with us in any difficulties we face. Give us a disposition to help, and humility to be helped.\nGive us wisdom to discern your beauty and justice as we write these Python programs.\nMay everything we do and learn here be offered to you in praise, gratitude and service to our neighbors.\nIn Jesus name we pray. Amen."
  },
  {
    "objectID": "classes/Week 1/01-18-24.html#pair-programming",
    "href": "classes/Week 1/01-18-24.html#pair-programming",
    "title": "1 01-18-24 (Thursday - Lab)",
    "section": "2.1 Pair programming",
    "text": "2.1 Pair programming\n\nThe basic idea:\n\nPerson 1 acts as a coder (typing into the code)\nPerson 2 acts as a code reviewer\nAlternate the roles after each solving each problem\nBoth should discuss how to tackle the problem before coding\n\nLOTS of advantages\n\nMutual learning\nHelps spotting some stupid typos/mistakes we may end up writing (and these can difficult to detect later)\nWhile one gives attention to the “tactical” aspect of getting some small stuff done, the other is thinking about the bigger picture, the “strategical” aspect.\n\nIt takes some patience to just sit and look at someone writing. We are not trained in this kind of attention. But in the end it can be VERY satisfactory.\nIn the end, submit just one copy per pair\n\nPut down the names of both members as authors\nPut down the class A/B\nE.g., Frodo Baggins (Calvin-ID) A"
  },
  {
    "objectID": "classes/Week 1/01-18-24.html#dont-forget-headers-in-files",
    "href": "classes/Week 1/01-18-24.html#dont-forget-headers-in-files",
    "title": "1 01-18-24 (Thursday - Lab)",
    "section": "2.2 Don’t forget headers in files",
    "text": "2.2 Don’t forget headers in files\n\nAt the top of each program file, include something like this:\n\n\"\"\"CS 108 - Lab 1.5\nUse a simple formula to estimate pi which is\naccurate to 6 digits.\n@author: Frodo Baggins (123456) A\n@author: Samwise Gamgee (654321) A\n@date: Spring, 2024\n\"\"\"\n\nThe template header is actually:\n\n\"\"\"CS 108 - Lab/Homework X.X\nDescribe the module here. Fix the lab number above and\nthe name/date below.\nDelete the second @author line if working solo.\n@author: YOUR-NAME (yourid123) A/B\n@author: PARTNER-NAME (theirid123) A/B\n@date: semester, year\n\"\"\""
  },
  {
    "objectID": "classes/Week 1/01-18-24.html#grading-example-for-lab-1",
    "href": "classes/Week 1/01-18-24.html#grading-example-for-lab-1",
    "title": "1 01-18-24 (Thursday - Lab)",
    "section": "2.3 Grading example for Lab 1",
    "text": "2.3 Grading example for Lab 1\n\nEach question carries 20 points\n\nTest for documentation (2 points)\n\nThe file name checking (e.g., Lab1_1.py)\nA brief description of the program file\nAuthorship (including the section)\n\nCorrectness (18 points for Lab1.1 and 16 points for others)\nCode documentation (2 points)\n\ni.e., concise and clear comments about the code\n\nE.g., print(pi)  # print out the estimated value of pi"
  },
  {
    "objectID": "classes/Week 2/01-22-24.html",
    "href": "classes/Week 2/01-22-24.html",
    "title": "1 01-22-24 (Monday)",
    "section": "",
    "text": "1 01-22-24 (Monday)\n\nGo and work\nHonor the One who is working on you.\nDo so by making beautiful things,\nBe serving in beautiful ways,\nBy speaking up for the weak whose beauty is being maligned,\nBy filling this city with the aroma of good and beautiful work\nReflect the beautiful work of your heavenly Father,\nNourished now by the grace and mercy of Christ,\nIn the power of the Holy Spirit.\nGod has already accomplished the great work.\nGod goes before you and behind you.\nGod works at your side.\n(Matthew Kaemingk & Cory B. Willson, Work and Worship, p. 140)\n\n\n\n2 Announcements\n\nCheck attendance (just to see if everyone enrolled is here)\n\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Arithmetic Expressions\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 2/01-26-24.html",
    "href": "classes/Week 2/01-26-24.html",
    "title": "01-26-24 (Friday)",
    "section": "",
    "text": "From the lectionary reading: Psalm 111"
  },
  {
    "objectID": "classes/Week 2/01-26-24.html#hospitable-code-in-the-scientific-and-engineering-community",
    "href": "classes/Week 2/01-26-24.html#hospitable-code-in-the-scientific-and-engineering-community",
    "title": "01-26-24 (Friday)",
    "section": "8.1 Hospitable code in the scientific and engineering community?",
    "text": "8.1 Hospitable code in the scientific and engineering community?\nThere is a common perception that software written for scientific and engineering communities are the worst documented and organized ever. People usually think that since we are dealing with experts, it would be a waste of time to just make things clean and organized.\n\nThus, reflect: as Christians, is it really a waste of time to make things beautiful and welcoming? Or is it just getting to final result that matters?"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html",
    "href": "classes/Week 3/01-31-24.html",
    "title": "01-31-24 (Wednesday)",
    "section": "",
    "text": "Reading from Lectionary, Malachi 3:1-4"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#container-types",
    "href": "classes/Week 3/01-31-24.html#container-types",
    "title": "01-31-24 (Wednesday)",
    "section": "1.1 Container types",
    "text": "1.1 Container types\n\nSome of these stand for objects that are collection of other objects. These are called containers.\nFor example, you may have a variable pointing to a single number (a numeric type). But you can also a variable pointing to a collection of numbers, or strings, or even other collections of numbers.\nThink like “drawers” or “boxes” in a bookshelf"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#subscriptable-types",
    "href": "classes/Week 3/01-31-24.html#subscriptable-types",
    "title": "01-31-24 (Wednesday)",
    "section": "1.2 Subscriptable types",
    "text": "1.2 Subscriptable types\n\nRemember our metaphor: objects are buildings, variables are addresses\n\nAs we have types of houses (residential, commercial), we also have types of objects (integer, float, string)\n\nHow is an address when we have a condo or apartment building - i.e., multiple “houses” in the same address?\n\n“1234 Smith Ave Apt 101”\n\nIt is also possible to have containers whose contents can be accessed by some “complement”. These are called subscripts.\n\nTo access a value, we write the variable followed by some value inside square brackets []\n\n\n\nFor example, a Python list:\n\ncondo = [\"room 1\", \"room 2\", \"room 3\"]\nprint(condo[0])\n\nroom 1\n\n\nNotice that if we try to “subscript” an object which is not subscriptable, we get an error:\n\nhouse = 3\nprint(house[0])\n\nTypeError: 'int' object is not subscriptable"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#sequence-vs-mapping-types",
    "href": "classes/Week 3/01-31-24.html#sequence-vs-mapping-types",
    "title": "01-31-24 (Wednesday)",
    "section": "1.3 Sequence vs mapping types",
    "text": "1.3 Sequence vs mapping types\n\nIn sequence types such as lists, tuples and strings, subscripts are integer numbers, which are called indexes.\n\nAttention: indexes always starts at zero!\nindex 0 is for 1st element, index 1 is for 2nd, and so on…\n\n\n\ncondo = \"room 1\", \"room 2\", \"room 3\"\nprint(condo[0])\nprint(condo[1])\nprint(condo[2])\n\nroom 1\nroom 2\nroom 3\n\n\n\nIf the index can’t be found, we will have an error:\n\n\ncondo = \"room 1\", \"room 2\", \"room 3\"\nprint(condo[4])\n\nIndexError: tuple index out of range\n\n\n\nIn mapping types, however, subscripts can be any kind of object (given that it is an immutable object — e.g., lists are not allowed), which are called, in this case, keys.\nThis is the case of the dictionary type (dict):\n\n\nband = {\"vocals\": \"John Anderson\", \"guitar\":\"Steve Howe\", \"bass\": \"Chris Squire\", \"keyboard\": \"Rick Wakeman\"}\nprint(band[\"vocals\"])\nprint(band[\"guitar\"])\n\nJohn Anderson\nSteve Howe"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#type-properties",
    "href": "classes/Week 3/01-31-24.html#type-properties",
    "title": "01-31-24 (Wednesday)",
    "section": "1.4 Type properties",
    "text": "1.4 Type properties\n\nSubscriptable types: containers whose objects can be accessed using square brackets [];\nOrdered types: containers whose elements are ordered and thus can be accessed by an index (integer number);\nImmutable types: objects whose elements cannot be changed;\nCallable types: functions and classes (check, for example, type(print) or type(math.cos))\n\nYou “call” these objects to execute some code by typing the object followed by parenthesis (and eventually pass some information inside the parenthesis): print(\"hi\")\nSee what happens if you try calling a non-callable object:\n\n\n\na = 1\na()\n\nTypeError: 'int' object is not callable\n\n\n\nTesting some syntax…\n\na = 1\na[0]\n\nTypeError: 'int' object is not subscriptable\n\n\n\na = 1\na(0)\n\nTypeError: 'int' object is not callable\n\n\n\na = 1\na{0}\n\nSyntaxError: invalid syntax (2290390298.py, line 2)"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#summarizing-properties",
    "href": "classes/Week 3/01-31-24.html#summarizing-properties",
    "title": "01-31-24 (Wednesday)",
    "section": "1.5 Summarizing properties",
    "text": "1.5 Summarizing properties\n\n\n\n\n\n\n\n\n\n\nType\nContainer\nSubscriptable\nOrdered (sequence)\nMutable\n\n\n\n\nNumbers and booleans\nNo\nNo\nNo\nNo\n\n\nLists\nYes\nYes (integers)\nYes\nYes\n\n\nTuples\nYes\nYes (integers)\nYes\nNo\n\n\nStrings\nYes (only characters)\nYes (integers)\nYes\nNo\n\n\nDictionaries\nYes\nYes (immutable objects)\nNo\nYes\n\n\nSets\nYes (only immutable objects)\nNo\nNo\nYes"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#sequence-methods",
    "href": "classes/Week 3/01-31-24.html#sequence-methods",
    "title": "01-31-24 (Wednesday)",
    "section": "2.1 Sequence methods",
    "text": "2.1 Sequence methods\nRemember: sequences are ordered and subscriptable with integers (the indexes). The methods below thus work for all of these types: lists, tuples and strings.\n\n\n\n\n\n\n\nOperation\nResult\n\n\n\n\nx in s\nTrue if an item of s is equal to x, else False\n\n\nx not in s\nFalse if an item of s is equal to x, else True\n\n\ns + t\nthe concatenation of s and t\n\n\ns * n or n * s\nequivalent to adding s to itself n times\n\n\ns[i]\nith item of s, origin 0\n\n\ns[i:j]\nslice of s from i to j\n\n\ns[i:j:k]\nslice of s from i to j with step k\n\n\nlen(s)\nlength of s\n\n\nmin(s)\nsmallest item of s\n\n\nmax(s)\nlargest item of s\n\n\ns.index(x[, i[, j]])\nindex of the first occurrence of x in s (at or after index i and before index j)\n\n\ns.count(x)\ntotal number of occurrences of x in s"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#unpacking-sequences",
    "href": "classes/Week 3/01-31-24.html#unpacking-sequences",
    "title": "01-31-24 (Wednesday)",
    "section": "2.2 Unpacking sequences",
    "text": "2.2 Unpacking sequences\nAll sequence types can also be unpacked in multiple variables. For example:\n\ns = [\"I\", \"am\", \"your\", \"father\"]\na, b, c, d = s\nprint(a)\nprint(b)\n\nI\nam\n\n\n\ns = \"hi!\"\nch1, ch2, ch3 = s\nprint(ch1, ch2, ch3)\n\nh i !\n\n\nBut careful: you will get an error if you don’t match the length:\n\na = [1, 2, 3]\nv1, v2, v3, v4 = a\n\nValueError: not enough values to unpack (expected 4, got 3)"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#what-can-go-in",
    "href": "classes/Week 3/01-31-24.html#what-can-go-in",
    "title": "01-31-24 (Wednesday)",
    "section": "3.1 What can go in?",
    "text": "3.1 What can go in?\n\nLists and tuples can be a collection of items of any type.\n\n\nx = (1, 3.33333, \"hello\", True, 4)\n\n\nYou can even make tuples of tuples, lists of lists, lists of tuples…\n\nFor example: a 3x3 matrix - a 3-element list of 3-element lists\n\n\n\nmat = [[1,2,3],\n      [4,5,6],\n      [7,8,9]]\nprint(mat[0][1]) # accessing value in row 0 and column 1\n\n2"
  },
  {
    "objectID": "classes/Week 3/01-31-24.html#changing-versus-copying",
    "href": "classes/Week 3/01-31-24.html#changing-versus-copying",
    "title": "01-31-24 (Wednesday)",
    "section": "3.2 Changing versus copying",
    "text": "3.2 Changing versus copying\nWhen dealing with mutable objects, it is very important to check if an operation is changing the object or making a copy of it.\nFor example:\n\na = [1,2,3]\nb = a\na[1] = 5\nprint(b)\n\n[1, 5, 3]\n\n\n\nWhat happened here? Wasn’t b supposed to remain [1,2,3]?\na and b are pointing to the same object (the list [1,2,3]). If we change something in a, we change in b and vice-versa.\nYou can check that with the function id(), which finds an unique integer identifier for each object.\n\n\nprint(id(a))\nprint(id(b))\n\n140593274815296\n140593274815296\n\n\n\nIt is different if we make a copy of the object.\n\na = [1,2,3]\nb = a.copy()\na[1] = 5\nprint(a)\nprint(b)\n\n[1, 5, 3]\n[1, 2, 3]\n\n\n\nLook at the different ids: they are different objects, and thus are independent of each other.\n\n\nprint(id(a))\nprint(id(b))\n\n140593272801728\n140593272841472\n\n\n\nThis happens because lists are mutable objects (just as dictionaries, as we’ll see).\n\nMutable objects need to be copied. Immutable objects don’t."
  },
  {
    "objectID": "classes/Week 4/02-05-24.html",
    "href": "classes/Week 4/02-05-24.html",
    "title": "1 01-05-24 (Monday)",
    "section": "",
    "text": "1 01-05-24 (Monday)\n\nLet us confess to God those things that are wrong in our work:\nThat the presence of God at work is often overlooked;\nThat creative people are often subjected to long, boring and unrelenting routines;\nThat skills are undeveloped through lack of training;\nThat resources are wasted in shoddy work and the production of unwanted goods;\nThat the maximisation of profit often excludes concern for people;\nThat men and women are discriminated against because of age, race, gender, disability, lack of skill and length of employment;\nThat the poor stand so little chance against the power of the rich, and the world’s destitute are forgotten.\n\n\nLord, have mercy upon us. Forgive us our sins and help us to amend our lives. Amen.\n(https://www.theologyofwork.org/work-in-worship)\n\n\n\n2 Announcements\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Branching/Conditionals\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 4/02-09-24.html",
    "href": "classes/Week 4/02-09-24.html",
    "title": "01-09-24 (Friday)",
    "section": "",
    "text": "Lord, you rule the world with a good and rightful code.\nWe ask for your wisdom to see things correctly and represent them faithfully.\nFill us with your justice so that we may know how to reflect it in the way we code,\nGive us humility so that we may know the limits of our knowledge and its application in society,\nGive us the courage to stand firmly when we feel pressured to go beyond these limits,\nAnd give us responsibility as rulers we may be in the areas of society where you put us.\n\nLord, we want to reflect your good rule, so that people of all nations may fear your name.\nMake known to us the path of life;\nFor in your presence there is fullness of joy;\nand at your right hand are pleasures forevermore (Psalm 16).\nAmen."
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#floating-point-comparisons",
    "href": "classes/Week 4/02-09-24.html#floating-point-comparisons",
    "title": "01-09-24 (Friday)",
    "section": "3.1 Floating point comparisons",
    "text": "3.1 Floating point comparisons\n\na = 0.15 + 0.15\nb = 0.10 + 0.20\n\nprint(a == b)\nprint(a &gt;= b)\n\nFalse\nFalse\n\n\nWhat is happening here? How might we perform a reasonable comparison between these floating point numbers?\n\nOne way to solve: use math.isclose():\n\nimport math\n\na = 0.15 + 0.15\nb = 0.10 + 0.20\n\nprint(math.isclose(a,b))\n\nTrue"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#sequence-comparison",
    "href": "classes/Week 4/02-09-24.html#sequence-comparison",
    "title": "01-09-24 (Friday)",
    "section": "3.2 Sequence comparison",
    "text": "3.2 Sequence comparison\n\nFor equality and non-equality:\n\n\na = \"Hi\"\nb = \"Hi\"\nc = \"Hello\"\nprint(a == b)\nprint(a == c)\nprint(a != b)\nprint(a != c)\n\nTrue\nFalse\nFalse\nTrue\n\n\n\na = [1,2]\nb = [1,2]\nprint(a == b)\n\nTrue\n\n\n\nHowever, order matters:\n\na = [1,2]\nb = [2,1]\nprint(a == b)\n\nFalse\n\n\n(after all, with strings it is also easy to see that Hi is different than iH).\nIf we need to ignore order, and compare only elements, we can compare the sorted lists:\n\na = [1,2]\nb = [2,1]\nprint(sorted(a) == sorted(b))\n\nTrue"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#greater-and-smaller-than",
    "href": "classes/Week 4/02-09-24.html#greater-and-smaller-than",
    "title": "01-09-24 (Friday)",
    "section": "3.3 Greater and smaller than",
    "text": "3.3 Greater and smaller than\nSequences follow a lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted.\nFor example, all comparisons below are True:\n\n(1, 2, 3)              &lt; (1, 2, 4)\n[1, 2, 3]              &lt; [1, 2, 4]\n'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'\n(1, 2, 3, 4)           &lt; (1, 2, 4)\n(1, 2)                 &lt; (1, 2, -1)\n(1, 2, 3)             == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab'))   &lt; (1, 2, ('abc', 'a'), 4)"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#comparison-operator-chaining",
    "href": "classes/Week 4/02-09-24.html#comparison-operator-chaining",
    "title": "01-09-24 (Friday)",
    "section": "3.4 Comparison operator chaining",
    "text": "3.4 Comparison operator chaining\nDifferently from most other languages, Python supports operator chaining, like 2 &lt; x &lt; 5.\n\nChaining compares left to right, evaluating a &lt; b first\nIf the result is true, then b &lt; c is evaluated next\n\n\nage = int(input('Please enter your age: '))\nif 12 &lt; age &lt; 20:\n  print('You are a teenager')"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#examples",
    "href": "classes/Week 4/02-09-24.html#examples",
    "title": "01-09-24 (Friday)",
    "section": "4.1 Examples",
    "text": "4.1 Examples\nExample 1\n\nif (x &gt;= 1) and (x &lt;=10):\n  print('x is between 1 and 10 inclusive')\n\nExample 2\n\nif not (x == ''):\n  print('x is not the empty string')\n\nExample 3\n\nif (x &lt; 1) or (x &gt; 10):\n  print('x is not between 1 and 10')\n\nExample 4\n\nmessage = \"you fool!\"\nif \"fool\" not in message:\n  print(\"Message does not contain offensive language\")"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#short-circuit-evaluations",
    "href": "classes/Week 4/02-09-24.html#short-circuit-evaluations",
    "title": "01-09-24 (Friday)",
    "section": "4.2 Short-circuit evaluations",
    "text": "4.2 Short-circuit evaluations\nIn (A and B), if A is false, then so is the expression, and there is no need to evaluate B.\nIn (A or B), if A is true, then so is the expression, and there is no need to evaluate B.\nKeep an eye on that!"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#remember-precedence-order",
    "href": "classes/Week 4/02-09-24.html#remember-precedence-order",
    "title": "01-09-24 (Friday)",
    "section": "4.3 Remember precedence order!",
    "text": "4.3 Remember precedence order!\n\nParentheses: ()\nExponents: **\nMultiplication, divisions and modulus: * / // %\nAddition and subtraction: + -\nComparisons: &lt;= &lt; &gt;= &gt; == != is in\nBoolean not\nBoolean and\nBoolean or"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#exercise-1-selecting-ph-values",
    "href": "classes/Week 4/02-09-24.html#exercise-1-selecting-ph-values",
    "title": "01-09-24 (Friday)",
    "section": "6.1 Exercise 1: selecting pH values",
    "text": "6.1 Exercise 1: selecting pH values\nWrite a program that prompts the user to enter a pH value. Then, print an indication of whether the pH given indicates an acid (value &lt; 7.0), base (value &gt; 7.0) or neutral (value is 7.0) substance.\nAssuming that pH values range from 0.0 to 14.0, update your program so that only valid pH values are considered."
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#exercise-2-getting-the-highest-grade",
    "href": "classes/Week 4/02-09-24.html#exercise-2-getting-the-highest-grade",
    "title": "01-09-24 (Friday)",
    "section": "6.2 Exercise 2: getting the highest grade",
    "text": "6.2 Exercise 2: getting the highest grade\nDesign and implement a program that inputs student grades from three students (A to F) and prints the highest one. (To make the problem more “interesting”, don’t use the max function to solve this problem.)"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#exercise-3-are-you-a-horse",
    "href": "classes/Week 4/02-09-24.html#exercise-3-are-you-a-horse",
    "title": "01-09-24 (Friday)",
    "section": "6.3 Exercise 3: are you a horse?",
    "text": "6.3 Exercise 3: are you a horse?\nImplement an algorithm that would take an user to a series of questions to let him know if he is a horse. The procedure will follow the flowchart:"
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#critique-1-non-computability",
    "href": "classes/Week 4/02-09-24.html#critique-1-non-computability",
    "title": "01-09-24 (Friday)",
    "section": "7.1 Critique 1: non-computability",
    "text": "7.1 Critique 1: non-computability\n\nStrictly speaking, there are problems that really can’t be solved by sequential, step-by-step instructions. These are called non-computable problems.\n\nMost of them include problems where there is not a way to determine if the machine will stop running code while searching for a solution (ex.: the Halting Problem).\n\nA simple example: there is no algorithm to solve the 2048 game, famous in 2014.\nHowever, problems like these can have their solution “approximated” with heuristics (exploring different options and seeing which is better). So one could argue that this is the way we think when trying to solve them… even though there is not an “analytical” way to solve."
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#critique-2-the-chinese-room-experiment",
    "href": "classes/Week 4/02-09-24.html#critique-2-the-chinese-room-experiment",
    "title": "01-09-24 (Friday)",
    "section": "7.2 Critique 2: the Chinese Room experiment",
    "text": "7.2 Critique 2: the Chinese Room experiment\n\nProposed by philosopher John Searle in 1980.\n\n\n\nA person who does not understand Chinese sitting in a sealed room with a set of instructions in English for manipulating Chinese symbols. People outside the room slide Chinese symbols under the door, and the person inside follows a translation table to produce appropriate responses in Chinese, without actually comprehending the meaning of the symbols.\nSearle’s argument is that even though the person inside the room can generate responses that seem intelligent to those outside, the person doesn’t truly understand Chinese; they are just manipulating symbols according to a set of rules. Similarly, Searle argues that a computer program that processes symbols according to a set of rules (like many AI systems) may simulate intelligence but does not possess genuine understanding or consciousness."
  },
  {
    "objectID": "classes/Week 4/02-09-24.html#critique-3-why-are-we-really-wanting-that",
    "href": "classes/Week 4/02-09-24.html#critique-3-why-are-we-really-wanting-that",
    "title": "01-09-24 (Friday)",
    "section": "7.3 Critique 3: why are we really wanting that?",
    "text": "7.3 Critique 3: why are we really wanting that?\n\nPhilosopher Hubert Dreyfus made a powerful critique to Classic AI in his 1972 book “What Computers Can’t Do”.\nHis argument is long and complex, and involves noticing that human intelligence is fundamentally embodied and situated in a certain narrative, and since an artificial device wouldn’t have this, it cannot mimic completely how humans reason (we’re exploring a bit of that in a moment).\nIn any case, Dreyfus reflected on the quest for Artificial Intelligence as the quest of almost all Western science and philosophy (emphasis added):\n\n\n“Since the Greeks invented logic and geometry, the idea that all reasoning might be reduced to some kind of calculation so that all arguments could be settled once and for all has fascinated most of the Western tradition’s rigorous thinkers. Socrates was the first to give voice to this vision. The story of artificial intelligence might well begin around 450B.C. when (according to Plato) Socrates demands of Euthyphro, a fellow Athenian who, in the name of piety, is about to turn in his own father for murder:”I want to know what is characteristic of piety which makes all actions pious … that I may have it to turn to, and to use as a standard whereby to judge your actions and those of other men. Socrates is asking Euthyphro for what modern computer theorists would call an “effective procedure,” “a set of rules which tells us, from moment to moment, precisely how to behave.\n\n\n“The belief that such a total formalization of knowledge must be possible soon came to dominate Western thought. It already expressed a basic moral and intellectual demand, and the success of physical science seemed to imply to sixteenth-century philosophers, as it still seems to suggest to thinkers such as Minsky, that the demand could be satisfied.”\n\n\nAnother philosopher, Michael Polanyi, explored how knowledge can be tacit - in other words, it cannot be turned to explicit words and rules (The Tacit Dimension).\n\nSociologist Harry Collins, who we presented previously, has also argued about that in his books The Shape of Actions and Artifictional Intelligence. Algorithms still don’t seem to share with us a form of life in order to make sense of the dynamic, situated and embodied character of human life.\n\n\nTake home message: algorithmic intelligence can correctly, and usefully, mimicry some human reasoning. We can be grateful for that. But this can be limited, and there are lots of reasons to believe that our intelligence goes beyond mere mathematical/logical rule-following. Therefore, so far, it seems we haven’t yet seen an undebatable way to mimic human intelligence exhaustively.\nCalvin professor Ken Arnold’s opinion: Avoid Magical Thinking about AI"
  },
  {
    "objectID": "classes/Week 5/02-14-24.html",
    "href": "classes/Week 5/02-14-24.html",
    "title": "02-14-24 (Wednesday)",
    "section": "",
    "text": "Lord, we pray for ourselves in our daily study and work.\n\nWe give thanks for the skills we already have; we pray for wise and good use of these skills in building your kingdom.\n\nWe pray for those thinking about changing their study and/or work - especially those unhappy or insecure; those feeling undervalued or unfulfilled; those feeling that are in the wrong place; those who can’t wait for 5pm on Friday.\n\nWe pray for those with no sense of direction or purpose or vocation, for those drifting,\nfor those wanting to do a particular job, but unable through disability, illness, lack of confidence or lack of opportunity;\nfor those who are unemployed.\nWe pray for those at school or college now making decisions which will affect our working lives. We pray for all Careers Advisers.\n\nWe pray for those who are teaching us;\nfor our colleagues,\nfor our administrators."
  },
  {
    "objectID": "classes/Week 5/02-14-24.html#two-types-of-loops",
    "href": "classes/Week 5/02-14-24.html#two-types-of-loops",
    "title": "02-14-24 (Wednesday)",
    "section": "1.1 Two types of loops",
    "text": "1.1 Two types of loops\n\nDefinite iteration: Loops that repeat a predefined number of times - the FOR statement\nIndefinite iteration: Loops that continue until a condition occurs - the WHILE statement\n\n\n“Although often interchangeable, FOR is like a tourist that knows when it will be home (but with the power to RETURN earlier), WHILE is like a traveller away for as long as there is no hard reason to come back, potentially forever.”\n- Wilfried Hou Je Bek, “Loops”, in “Software studies: a lexicon”"
  },
  {
    "objectID": "classes/Week 5/02-14-24.html#examples",
    "href": "classes/Week 5/02-14-24.html#examples",
    "title": "02-14-24 (Wednesday)",
    "section": "2.1 Examples",
    "text": "2.1 Examples\n\nfor name in [\"Joe\", \"Amy\", \"Brad\", \"Zuki\",\"Thandi\",'Joe']:\n    print(\"Hi\", name, \"how are you?\")\n\nHi Joe how are you?\nHi Amy how are you?\nHi Brad how are you?\nHi Zuki how are you?\nHi Thandi how are you?\nHi Joe how are you?\n\n\n\nfor val in (3, 11, 22, 0, -3):\n    print(val)\n\n3\n11\n22\n0\n-3"
  },
  {
    "objectID": "classes/Week 5/02-14-24.html#examples-1",
    "href": "classes/Week 5/02-14-24.html#examples-1",
    "title": "02-14-24 (Wednesday)",
    "section": "4.1 Examples",
    "text": "4.1 Examples\n\nx = 10\nwhile x &gt; 0:\n    print(x)\n    x = x - 1\n\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n\n\ncount = 0\nwhile (count &lt; 10):\n   # Point A\n   print (\"Olá...\", count)\n   count = count + 1\n   # Point B\n# Point C\n\nConsider the following affirmations and say if they are right or wrong:\n\ncount &lt; 10 is always True at point C.\ncount &lt; 10 is always False at point B.\ncount &lt; 10 is always True at point A.\ncount &lt; 10 is always False at point C.\ncount &lt; 10 is always True at point B."
  },
  {
    "objectID": "classes/Week 5/02-14-24.html#example-matrix-creation",
    "href": "classes/Week 5/02-14-24.html#example-matrix-creation",
    "title": "02-14-24 (Wednesday)",
    "section": "5.1 Example: matrix creation",
    "text": "5.1 Example: matrix creation\n\nmat = []\nlines = int(input(\"Enter the number of lines: \"))\ncols = int(input(\"Enter the number of columns: \"))\nfor i in range(cols):\n  line = []\n  for j in range(lines):\n    x = float(input(f\"Enter the number at line {i} and col {j}: \"))\n    line.append(x)\n  mat.append(line)"
  },
  {
    "objectID": "classes/Week 6/02-19-24.html",
    "href": "classes/Week 6/02-19-24.html",
    "title": "1 02-19-24 (Monday)",
    "section": "",
    "text": "1 02-19-24 (Monday)\n\nLord, you reveal your glory in every thing you made\nLet us today engage with this creation so that we may participate in your beauty and wisdom\nMay the technology we use or even develop point us toward that,\nInstead of dragging us towards our own vicious desires and illusions of freedom\nHelp us, and our society, to know your ways and be still, for yours is the glory\nAnd our hearts are restless till they find rest in You.\nAmen.\n\n\n\n2 Announcements\n\n\n3 About POGIL\nPOGIL is an acronym for Process Oriented Guided Inquiry Learning.\nDuring these activities, we will form teams of three: - a programmer (runs the exercises in Thonny) - a recorder (writes the team’s answers to the exercises) - a manager/presenter (keeps the team on track; interacts with class)\nYou can write the exercises in paper or generate a pdf to fill. Just don’t forget to share it with your teammates after class!\n\n\n4 POGIL Activity - Functions\nClick here to access the file."
  },
  {
    "objectID": "classes/Week 6/02-23-24.html",
    "href": "classes/Week 6/02-23-24.html",
    "title": "1 02-23-24 (Friday)",
    "section": "",
    "text": "1 02-23-24 (Friday)\n\nLord, we pray for those making international and national decisions about the ‘Information Super-Highway’;\nthat the whole range of considerations - political, economic, personal, sectional, communal - may be properly taken into account.\n\nLord, we pray for those setting up and administering national data-banks; we give thanks for the good they can do in co-ordinating information. We remember those who misuse the information they hold.\n\nLord, we pray for those involved in Research and Development in computers; we remember the power and responsibility they have for making changes in our world and our lives. We remember those who have lost their jobs as a result of new technology.\n\nLord, we pray for those who have boring keyboard jobs, those who suffer from Repetitive Strain Injury, or eyestrain. We pray for willingness to deal with the causes of such problems.\n\nLord, we pray for those in small computing businesses; the difficulties they face in chasing creditors; the stress on them, the risks they have to take - perhaps even with their own homes.\n\nLord, we pray for those who write computer games: some which are used to do much good at school, others to encourage people to gamble, some which are used just to make money. We pray for those who are addicted to computer and arcade games, and for their families; and for those who are anxious about the violence of some computer games.\n\nLord, we pray for those frightened of computers and other sorts of new technology; those who feel they cannot master using them; those who feel old or who lose their confidence in the face of change and new things.\n\nLord, we pray that technology may be the servant, not the controller of our lives.\n\n(From ‘Work in Worship’, Peterborough Diocese People and Work Programme)\n\n\n\n2 Announcements\n\n\n3 Project"
  },
  {
    "objectID": "feedback.html",
    "href": "feedback.html",
    "title": "Feedback on some questions",
    "section": "",
    "text": "The Python Software Foundation (PSF), a non-profit organization, oversees the development and maintenance of Python. Some of the ways the PSF makes money include donations, corporate sponsorship, membership in the organization, conferences (PyCon), merchandise and licensing (t-shirts, etc), etc.\n\n\n\nBasically, it means you can inspect and see how it works (source code, etc). It is not an “company secret”. We’ll probably talk about that on next classes.\n\n\n\nThonny is mostly an educational software for learning Python. Later you’ll can probably use more advanced IDEs, like PyCharm, Spyder, etc.\n\n\n\nR: This amounts to two considerations: 1) speed/efficiency and 2) programming style.\nIn this course we are not going through many considerations about speed and efficiency of your code. It is almost not needed given the programs we are implementing.\nHowever, programming style makes a difference. Sometimes having everything to execute in one or few lines, or having the shortest way to write a code, may make your code difficult to understand. Or maybe not. It depends on audience, style, even on “personality”.\n\n\n\nR: Usually it is - generally you are not required to memorize every kind of function, syntax, etc. You can always look up at some documentation and search for a specific thing you need. But it is important to know at least the basics, so you won’t be having to basically “re-learn Python” every time you are using it.\nAnd be careful. Just copying and pasting some code you saw, without minimally understanding it, may be dangerous. Sometimes it is better to go through some documentation and understand better before just trying to put anything in.\nSpeaking of that, ChatGPT can be a good resource once you know what you are doing. But once you know what you are doing.\n\n\n\n\n\n\nR: The operators actually exist, but in some specific mathematical theory.\nInteger division is usually represented as \\(\\lfloor x/y \\rfloor\\), but since it would be hard to type that in code, so Python developers found easier to just stick with //.\nThe % is called modulo operation and you can see it in mathematics in the form of \\(mod(5,2)\\) or \\(5 mod 2\\).\n\n\n\nR: I showed you an example in class today. Suppose we have a number like 12345 and we want to get the 3rd digit of this number.\nWhat we can do is get the integer division by 100 and then have 123 (12345 // 100 = 123).\nThen we get this 123 and use it to obtain the remainder of division by 10: 123 % 10 = 3.\nSo, given a variable “number”, to get the “n”-th digit, FROM LEFT TO RIGHT, we type: (number // 10**(n-1) ) % 10\nAnother nice thing we can do is check if a number is a multiple of other. If, for example, we have a variable NUMBER and find NUMBER % 6 to be equal to zero, we are then sure that the number is a multiple of 6.\n\n\n\nR: It can be a little confusing, indeed, because it involves understanding how these numbers are represented in the computer memory – something that may become clear once you study, for example, a discipline called computer architecture.\nYou can check this to have more details on how these work in Python: https://docs.python.org/3/tutorial/floatingpoint.html\nOr in case you are wondering how a float is represented, check this: https://float.exposed/\n\n\n\nR: That’s the great question. Some computer scientists are working on that. Others just don’t care. Some are welcoming, others are gatekeeping. But we can do our part. There are lots of research and development on computer language design, including with a focus on easiness of use and accessibility.\nSee, for example, the examples of Quorum, Bootstrap and Myna languages.\n\n\n\nR: Python has its own style guide. But even these recommendations can be contested, as we discussed in class.\nIn software engineering courses, we usually study some programming workflows where we aim to make our code more understandable and easier to be worked by groups of programmers. Organizing a project in separate modules or components is one thing we’ll see later. Other things are, for example, relying on design patterns – standard ways of solving problems that are generally acknowledged across the programming community."
  },
  {
    "objectID": "feedback.html#week-1",
    "href": "feedback.html#week-1",
    "title": "Feedback on some questions",
    "section": "",
    "text": "The Python Software Foundation (PSF), a non-profit organization, oversees the development and maintenance of Python. Some of the ways the PSF makes money include donations, corporate sponsorship, membership in the organization, conferences (PyCon), merchandise and licensing (t-shirts, etc), etc.\n\n\n\nBasically, it means you can inspect and see how it works (source code, etc). It is not an “company secret”. We’ll probably talk about that on next classes.\n\n\n\nThonny is mostly an educational software for learning Python. Later you’ll can probably use more advanced IDEs, like PyCharm, Spyder, etc.\n\n\n\nR: This amounts to two considerations: 1) speed/efficiency and 2) programming style.\nIn this course we are not going through many considerations about speed and efficiency of your code. It is almost not needed given the programs we are implementing.\nHowever, programming style makes a difference. Sometimes having everything to execute in one or few lines, or having the shortest way to write a code, may make your code difficult to understand. Or maybe not. It depends on audience, style, even on “personality”.\n\n\n\nR: Usually it is - generally you are not required to memorize every kind of function, syntax, etc. You can always look up at some documentation and search for a specific thing you need. But it is important to know at least the basics, so you won’t be having to basically “re-learn Python” every time you are using it.\nAnd be careful. Just copying and pasting some code you saw, without minimally understanding it, may be dangerous. Sometimes it is better to go through some documentation and understand better before just trying to put anything in.\nSpeaking of that, ChatGPT can be a good resource once you know what you are doing. But once you know what you are doing."
  },
  {
    "objectID": "feedback.html#unit-2",
    "href": "feedback.html#unit-2",
    "title": "Feedback on some questions",
    "section": "",
    "text": "R: The operators actually exist, but in some specific mathematical theory.\nInteger division is usually represented as \\(\\lfloor x/y \\rfloor\\), but since it would be hard to type that in code, so Python developers found easier to just stick with //.\nThe % is called modulo operation and you can see it in mathematics in the form of \\(mod(5,2)\\) or \\(5 mod 2\\).\n\n\n\nR: I showed you an example in class today. Suppose we have a number like 12345 and we want to get the 3rd digit of this number.\nWhat we can do is get the integer division by 100 and then have 123 (12345 // 100 = 123).\nThen we get this 123 and use it to obtain the remainder of division by 10: 123 % 10 = 3.\nSo, given a variable “number”, to get the “n”-th digit, FROM LEFT TO RIGHT, we type: (number // 10**(n-1) ) % 10\nAnother nice thing we can do is check if a number is a multiple of other. If, for example, we have a variable NUMBER and find NUMBER % 6 to be equal to zero, we are then sure that the number is a multiple of 6.\n\n\n\nR: It can be a little confusing, indeed, because it involves understanding how these numbers are represented in the computer memory – something that may become clear once you study, for example, a discipline called computer architecture.\nYou can check this to have more details on how these work in Python: https://docs.python.org/3/tutorial/floatingpoint.html\nOr in case you are wondering how a float is represented, check this: https://float.exposed/\n\n\n\nR: That’s the great question. Some computer scientists are working on that. Others just don’t care. Some are welcoming, others are gatekeeping. But we can do our part. There are lots of research and development on computer language design, including with a focus on easiness of use and accessibility.\nSee, for example, the examples of Quorum, Bootstrap and Myna languages.\n\n\n\nR: Python has its own style guide. But even these recommendations can be contested, as we discussed in class.\nIn software engineering courses, we usually study some programming workflows where we aim to make our code more understandable and easier to be worked by groups of programmers. Organizing a project in separate modules or components is one thing we’ll see later. Other things are, for example, relying on design patterns – standard ways of solving problems that are generally acknowledged across the programming community."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Syllabus",
    "section": "",
    "text": "Open my eyes, that I may behold wondrous things out of your law. Psalm 119.18\nWelcome to CS-108-A, Introduction to Computing!"
  },
  {
    "objectID": "index.html#weekly",
    "href": "index.html#weekly",
    "title": "Syllabus",
    "section": "Weekly",
    "text": "Weekly\n\nPreparation reading (zyBooks textbook): you’ll do these readings as a preparation for introducing new unit on Monday. As you work through the text, complete the “participation” activities in the specified sections as you go. You can skip the “challenge” activities.\nPOGIL Activity: when introducing a new Unit on every Monday, we will proceed according to a POGIL approach (Process Oriented Guided Inquiry Learning). We will form teams of three students in order to solve a set of questions and exercises. The teams will need to have:\n\na programmer (runs the exercises in Thonny)\na recorder (writes the team’s answers to the exercises)\na manager/presenter (keeps the team on track; interacts with class)\n\nLab: we’ll go through a series of programming assignments during our lab classes every Thursday. These are posted as assignments in zyBooks, where you and you partner will also submit your solutions.\n\nLab attendance is REQUIRED. If you cannot come, please let me know in advance. Not attending the lab without legitimate reasons will receive 0 points.\nIf feasible, you will work in pairs during the lab exercises. When you work in a pair, one of the partners should submit one copy of your work with both of your names and usernames on it. It’s wise for both partners to have copies of your shared solution. Your partner must be someone else from this course this semester.\nThe lab is configured to support the course work, but if you’re prepared to do some administrative work, you can configure your own machine to do the lab work. Alternatively, you can login remotely to the labs using a web browser.\n\nHomework: these will also be posted as assignments on our zyBooks course page. You should complete the exercises individually and upload them to the zyBooks assignment."
  },
  {
    "objectID": "index.html#every-other-week",
    "href": "index.html#every-other-week",
    "title": "Syllabus",
    "section": "Every other week",
    "text": "Every other week\n\nPerspectives reading (Perusall): you’ll read an article about common themes in programming and their wider societal implications. After this reading, you will be asked to make comments on the text and interact with your colleagues responses. Perusall has many nice tools to make this a nice shared reading experience. Try not to do it just for the sake of getting the assignment done and get the grade.\nQuizzes: usually on Fridays, we will have a 15 to 20 minute closed-notes quiz on Moodle reviewing and applying the concepts we got from the unit. The quiz will be done in classroom, so you will want to bring your laptop or any other device. We will also have a Quiz during the Finals week!"
  },
  {
    "objectID": "index.html#final-project",
    "href": "index.html#final-project",
    "title": "Syllabus",
    "section": "Final Project",
    "text": "Final Project\nThe final project is an opportunity for you to showcase what you have learned in this class, and begin applying your newfound knowledge and abilities to a problem that interests you personally.\nIt is to be an individual or a small group project, although I hope that in either case you consult with others in the class and with professors (if possible) for help in design, implementation, and debugging.\nMore details are found on our page Final Project"
  },
  {
    "objectID": "index.html#deadlines-and-late-work-policy",
    "href": "index.html#deadlines-and-late-work-policy",
    "title": "Syllabus",
    "section": "Deadlines and late work policy",
    "text": "Deadlines and late work policy\nUnless stated otherwise, the assignment submissions are due by midnight of the due date. The Moodle calendar will list these due dates/times.\nAnything submitted after the dealine is late, unless you have made prior arrangements with us. For each late assignment, you will be charged 10% for each business-day that you are late (e.g., if an assignment is due on Friday, you may turn it in on Monday at 10% off, Tuesday at 20% off and so on) and you need to email us to tell us which assignment you’re submitting late and how late it is. We will not accept work that is more than one week late unless you talk to us about the circumstances and negotiate a late-submission plan. We will generally grant up to 30% for these negotiated plans. We will also grant you 4 grace days with no penalty, no questions asked. Please note that grace days do not apply to the quizzes or the final project, and that we do not accept or negotiate for late work after the last day of class. If there are exceptional circumstances, please talk to us so we can work something out."
  },
  {
    "objectID": "multi-aspectual-software-evaluation.html",
    "href": "multi-aspectual-software-evaluation.html",
    "title": "Normative aspect",
    "section": "",
    "text": "Normative aspect\nDooyeweerd’s aspects\n\n\nSituational aspect\nStakeholders\n\n\nExistential aspect\nVirtues Imagination"
  },
  {
    "objectID": "prayers/go-and-work.html",
    "href": "prayers/go-and-work.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Go and work\nHonor the One who is working on you.\nDo so by making beautiful things,\nBe serving in beautiful ways,\nBy speaking up for the weak whose beauty is being maligned,\nBy filling this city with the aroma of good and beautiful work\nReflect the beautiful work of your heavenly Father,\nNourished now by the grace and mercy of Christ,\nIn the power of the Holy Spirit.\nGod has already accomplished the great work.\nGod goes before you and behind you.\nGod works at your side.\n(Matthew Kaemingk & Cory B. Willson, Work and Worship, p. 140)"
  },
  {
    "objectID": "prayers/kyrie-in-work.html",
    "href": "prayers/kyrie-in-work.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Let us confess to God those things that are wrong in our work:\nThat the presence of God at work is often overlooked;\nThat creative people are often subjected to long, boring and unrelenting routines;\nThat skills are undeveloped through lack of training;\nThat resources are wasted in shoddy work and the production of unwanted goods;\nThat the maximisation of profit often excludes concern for people;\nThat men and women are discriminated against because of age, race, gender, disability, lack of skill and length of employment;\nThat the poor stand so little chance against the power of the rich, and the world’s destitute are forgotten.\n\n\nLord, have mercy upon us. Forgive us our sins and help us to amend our lives. Amen.\n(https://www.theologyofwork.org/work-in-worship)"
  },
  {
    "objectID": "prayers/powers-of-the-world.html",
    "href": "prayers/powers-of-the-world.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "complicity"
  },
  {
    "objectID": "prayers/pray-vocational-doubt.html",
    "href": "prayers/pray-vocational-doubt.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Lord, we pray for ourselves in our daily study and work.\n\nWe give thanks for the skills we already have; we pray for wise and good use of these skills in building your kingdom.\n\nWe pray for those thinking about changing their study and/or work - especially those unhappy or insecure; those feeling undervalued or unfulfilled; those feeling that are in the wrong place; those who can’t wait for 5pm on Friday.\n\nWe pray for those with no sense of direction or purpose or vocation, for those drifting,\nfor those wanting to do a particular job, but unable through disability, illness, lack of confidence or lack of opportunity;\nfor those who are unemployed.\nWe pray for those at school or college now making decisions which will affect our working lives. We pray for all Careers Advisers.\n\nWe pray for those who are teaching us;\nfor our colleagues,\nfor our administrators."
  },
  {
    "objectID": "prayers/prayer-for-automation.html",
    "href": "prayers/prayer-for-automation.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Lord, you reveal your glory in every thing you made\nLet us today engage with this creation so that we may participate in your beauty and wisdom\nMay the technology we use or even develop point us toward that,\nInstead of dragging us towards our own vicious desires and illusions of freedom\nHelp us, and our society, to know your ways and be still, for yours is the glory\nAnd our hearts are restless till they find rest in You.\nAmen."
  },
  {
    "objectID": "prayers/prayer-responsibility.html",
    "href": "prayers/prayer-responsibility.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Lord, you rule the world with a good and rightful code.\nWe ask for your wisdom to see things correctly and represent them faithfully.\nFill us with your justice so that we may know how to reflect it in the way we code,\nGive us humility so that we may know the limits of our knowledge and its application in society,\nGive us the courage to stand firmly when we feel pressured to go beyond these limits,\nAnd give us responsibility as rulers we may be in the areas of society where you put us.\n\nLord, we want to reflect your good rule, so that people of all nations may fear your name.\nMake known to us the path of life;\nFor in your presence there is fullness of joy;\nand at your right hand are pleasures forevermore (Psalm 16).\nAmen."
  },
  {
    "objectID": "prayers/starting.html",
    "href": "prayers/starting.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Dear Heavenly Father,\nAs we gather here today to embark on a new journey of learning, we invite Your presence into this classroom.\nBless each student with wisdom, understanding, and a thirst for knowledge. Let Your light shine upon us, illuminating the path of learning, so we may contemplate your beauty and love in everything you made.\nMay this classroom be a place of respect, fellowship, and growth. Help us to be open to new ideas, to embrace challenges, and to support one another in our academic endeavors. Bless this class so that it may be a space where minds are enriched, friendships are formed, and hearts are touched.\nGuide our imaginations and desires towards your love and justice, so that we may respond adequately to your call to be Christ’s agents of renewal in the world.\nThrough our Lord Jesus Christ, your Son, who lives and reigns with you in the unity of the Holy Spirit, one God, for ever and ever.\nAmen."
  },
  {
    "objectID": "units/01/activities/pictionary.html",
    "href": "units/01/activities/pictionary.html",
    "title": "The pictionary game",
    "section": "",
    "text": "How difficult it is to describe to someone how to draw something?\n\nInstructions may be ambiguous\nDifferent backgrounds, ways of interpreting…\n\nSo happens with programming. The drama of programming is the drama of all human communication/expression…"
  },
  {
    "objectID": "units/01/activities/pictionary.html#example-drawing-a-rectangle",
    "href": "units/01/activities/pictionary.html#example-drawing-a-rectangle",
    "title": "The pictionary game",
    "section": "Example: Drawing a rectangle",
    "text": "Example: Drawing a rectangle\n\nSay to a computer “Draw a red rectangle in the top left corner of the screen.”\n\nWhat shade of red, precisely?\nHow big should the rectangle be?\nExactly in the top left, or with some padding, and how much?\nWhen should it be drawn?\nWhat is the “top” of the screen on a mobile device that can be rotated?\n\nCode in Javascript:\n\n// Get the canvas on the webpage that we want to render to.\nlet c = document.getElementById(\"myCanvas\");\n// Ask the canvas for an object that knows how to render 2-dimensional graphics onto the canvas.\nlet renderer = c.getContext(\"2d\");\n// Set the color to render, then draw a 100 x 100 pixel rectangle.\nrenderer.fillStyle = \"rgb(255, 0, 0)\";\nrenderer.fillRect(0, 0, 100, 100);\n\nNotice that many things that do not matter when we give instructions to other people actually do matter for the computer. And vice-versa…\n\nWhy is that?"
  },
  {
    "objectID": "units/01/assignments.html",
    "href": "units/01/assignments.html",
    "title": "Assignments ",
    "section": "",
    "text": "When Python sees the operator = it does the following:"
  },
  {
    "objectID": "units/01/assignments.html#compound-assignment-operators",
    "href": "units/01/assignments.html#compound-assignment-operators",
    "title": "Assignments ",
    "section": "Compound assignment operators",
    "text": "Compound assignment operators\n\nPython and other languages make available a shortcut for performing operations in variables and updating them.\nFor example,\n\n\nw = 5\nw += 1\nprint(w)\n\nis the same as:\n\nw = 5\nw = w + 1\nprint(w)\n\nYou can use compound assignment with all operators!\n\ny += 1 # add then assign value\ny -= 1 # subtract then assign value\ny *= 2 # multiply then assign value\ny /= 3 # divide then assign value\ny // = 5 # floor divide then assign value\ny **= 2 # increase to the power of then assign value\ny %= 3 # return remainder then assign value\n\nExample: what will this expression do?\n\nx *= y - 2\n\na"
  },
  {
    "objectID": "units/01/computation.html",
    "href": "units/01/computation.html",
    "title": "Computation ",
    "section": "",
    "text": "We use programs to compute numbers.\n\n\n\n\nCharles Babbage is known for developing the first automatic computer machine (1820’s)\n\n“the faster and more reliably one could calculate, the more money businesses could make.”\n\n\n\n\n\n\n\n\n\n\nAda Lovelace, daughter of Lord Byron, became enamoured by Babbage’s machine and developed the first algorithm, to calculate a sum of numbers:\n\n\n\n\n\n\n\n\n\n\n\n\nBasically, a program: a description of a series of operations.\nBut with some specific features:\n\nPrecise and unambiguous steps\nDefinite results\nFinite\nGeneralizable (works with a range of possible inputs)\nUsually expressed through abstract/mathematical notation\n\n\n\n\n\n\nFor complex calculations, we don’t rely anymore on pressing calculator buttons. We have to make automatic computation programs"
  },
  {
    "objectID": "units/01/computation.html#automatic-computation",
    "href": "units/01/computation.html#automatic-computation",
    "title": "Computation ",
    "section": "",
    "text": "Charles Babbage is known for developing the first automatic computer machine (1820’s)\n\n“the faster and more reliably one could calculate, the more money businesses could make.”\n\n\n\n\n\n\n\n\n\n\nAda Lovelace, daughter of Lord Byron, became enamoured by Babbage’s machine and developed the first algorithm, to calculate a sum of numbers:"
  },
  {
    "objectID": "units/01/computation.html#algorithm",
    "href": "units/01/computation.html#algorithm",
    "title": "Computation ",
    "section": "",
    "text": "Basically, a program: a description of a series of operations.\nBut with some specific features:\n\nPrecise and unambiguous steps\nDefinite results\nFinite\nGeneralizable (works with a range of possible inputs)\nUsually expressed through abstract/mathematical notation"
  },
  {
    "objectID": "units/01/computation.html#stem-today-is-programming-computations",
    "href": "units/01/computation.html#stem-today-is-programming-computations",
    "title": "Computation ",
    "section": "",
    "text": "For complex calculations, we don’t rely anymore on pressing calculator buttons. We have to make automatic computation programs"
  },
  {
    "objectID": "units/01/objects-variables.html",
    "href": "units/01/objects-variables.html",
    "title": "Objects and Variables ",
    "section": "",
    "text": "Python syntax specifies some ways to represent different types of data. A data representation in Python is called an “object”."
  },
  {
    "objectID": "units/01/objects-variables.html#variables",
    "href": "units/01/objects-variables.html#variables",
    "title": "Objects and Variables ",
    "section": "Variables",
    "text": "Variables\n\nVariables are names we set to refer to objects.\n\nA not-so-good metaphor: variables are containers for objects\nA better metaphor: objects are houses, variables are addresses of these houses\n\n\n\nx = 123  # a variable x that contains the integer value 123\nx = x + 1  # x is updated with the value of x + 1, becoming 124...\nhello = \"Hello World!\"  # a variable that contains the string \"Hello World!\"\nis_done = True  # a variable is_done with the logic value True"
  },
  {
    "objectID": "units/01/objects-variables.html#objects-x-variables",
    "href": "units/01/objects-variables.html#objects-x-variables",
    "title": "Objects and Variables ",
    "section": "Objects x variables",
    "text": "Objects x variables\n\nIt is very important to differentiate!\nWhich of the following are variables and which are objects?\n\n\"hello\"\n\nhello\n\n132\n\nvar_1\n\ntruev\n\nTrue"
  },
  {
    "objectID": "units/01/objects-variables.html#variable-naming-conventions-in-python",
    "href": "units/01/objects-variables.html#variable-naming-conventions-in-python",
    "title": "Objects and Variables ",
    "section": "Variable naming conventions in Python",
    "text": "Variable naming conventions in Python\n\nThey MUST start with a letter or with _ (underline)\nThey are case sensitive (‘C’ is different from ‘c’)\nThey can’t contain: { ( + - * / \\ ; . , ?\nThey can’t have names of words already reserved for other purposes in Python:\n\n\n\nWhat happens if?\n\n\nTrue = 123\n\n\n\"Hello\" = world\n\n\n1stcar = 2000"
  },
  {
    "objectID": "units/01/running-python.html",
    "href": "units/01/running-python.html",
    "title": "Running Python ",
    "section": "",
    "text": "Try:\n\nSaving some previous code as program.py\nOpen a command-line interface in your computer and run: python3 program.py\n\nYou need to have python3 installed in your machine\nYou need to be in the directory of the file program.py\n\n\nPython can be run in two modes:\n\n\n\n\n\nAll lines of code executed without stop\nRun in command-line as python3 program.py\nOnly print what is specifically passed through print()\n\n\n\n\n\n\nRun lines of code each at a time, as user enters them\nOpen in command-line just by typing python3\nTyping an expression without being assigned to a variable will “print” the result\n\n\n\n\n\n\n\nIn our classes, we will be using Thonny\n\nNotice the panels for scripting and for interactive shell\nThere is also a helper and variable explorer for debugging code"
  },
  {
    "objectID": "units/01/running-python.html#integrated-development-environment-ide",
    "href": "units/01/running-python.html#integrated-development-environment-ide",
    "title": "Running Python ",
    "section": "",
    "text": "In our classes, we will be using Thonny\n\nNotice the panels for scripting and for interactive shell\nThere is also a helper and variable explorer for debugging code"
  },
  {
    "objectID": "units/01/show/code-p.html#section",
    "href": "units/01/show/code-p.html#section",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Initially, computer operators had to set the program manually to run…"
  },
  {
    "objectID": "units/01/show/code-p.html#punched-cards",
    "href": "units/01/show/code-p.html#punched-cards",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Punched cards",
    "text": "Punched cards\n\nAt the end of the 1800s, Herman Hollerith invented the punched card, to be automatically read by a machine.\nInstructions were then CODED in the punched card."
  },
  {
    "objectID": "units/01/show/code-p.html#grace-hoppers-proposal",
    "href": "units/01/show/code-p.html#grace-hoppers-proposal",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Grace Hopper’s proposal",
    "text": "Grace Hopper’s proposal\n\nLater, in 1949, Grace Hopper invented the first programming language: COBOL (COmmon Business-Oriented Language)\n\nFor example, the user would write: COMPUTE SUM = (1 + 3) DIVIDE SUM BY 2 GIVING AVERAGE\n\nCrucial to this was the development of the compiler: a program capable of converting a sentence very much like an English phrase (with syntax and semantics) into machine instructions."
  },
  {
    "objectID": "units/01/show/code-p.html#so-whats-a-code",
    "href": "units/01/show/code-p.html#so-whats-a-code",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "So, what’s a code?",
    "text": "So, what’s a code?\n\n“A program that follows a set of rules” (in order to be correctly interpreted)\nTo learn how to program, then, is to learn how to express yourself correctly through the code\n\nNotice the origin of the word - codex"
  },
  {
    "objectID": "units/01/show/code-p.html#python-programming-language",
    "href": "units/01/show/code-p.html#python-programming-language",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Python programming language",
    "text": "Python programming language\n\nInvented in the early 1990s by Guido van Rossum, named after Monty Python’s Flying Circus\nOpen source project\nHigh-level, general-purpose language\nWidely available, easy to learn, rich in tools and libraries, and portable"
  },
  {
    "objectID": "units/01/show/input-output-p.html#section",
    "href": "units/01/show/input-output-p.html#section",
    "title": "Input/Output ",
    "section": "",
    "text": "Programming is nothing without the design of an interface!\n\nI have to be able to input data in the program, and\nI have to be able to get results (output) from the program."
  },
  {
    "objectID": "units/01/show/input-output-p.html#graphical-inputoutput",
    "href": "units/01/show/input-output-p.html#graphical-inputoutput",
    "title": "Input/Output ",
    "section": "Graphical input/output",
    "text": "Graphical input/output\n\nAlso called Graphical User Interface (GUI) - we’ll study it in Unit 10\nKind of mimics the way we use mechanical input and output\nTraditionally, WIMP (Windows, Icons, Menus and Pointers)"
  },
  {
    "objectID": "units/01/show/input-output-p.html#text-inputoutput",
    "href": "units/01/show/input-output-p.html#text-inputoutput",
    "title": "Input/Output ",
    "section": "Text input/output",
    "text": "Text input/output\n\nEven simpler, however, it is a good start for programming!\n\n\nname = input(\"Please enter your name:\")\nreverse = name[::-1]\nprint(\"Your name in reverse is\", reverse)\n\nThe command-line interface will ask for input from our keyboard, and then:"
  },
  {
    "objectID": "units/01/show/input-output-p.html#python-text-output-print",
    "href": "units/01/show/input-output-p.html#python-text-output-print",
    "title": "Input/Output ",
    "section": "Python text output: print()",
    "text": "Python text output: print()\n\nPut what you want to print between the parentheses: print(\"Hello World\")\nIf you want to jump to a new line, use \\n: print(\"Hello\\nWorld\")\nYou can also pass multiple arguments by separating them with commas: print(\"x has the value:\", x, \"\\nand y has the value:\", y)"
  },
  {
    "objectID": "units/01/show/input-output-p.html#python-text-input-input",
    "href": "units/01/show/input-output-p.html#python-text-input-input",
    "title": "Input/Output ",
    "section": "Python text input: input()",
    "text": "Python text input: input()\n\nThe command waits until the user types some text in the command-line interface and finishes with ENTER\nThe term input() “turns” into the text entered, and is ALWAYS an object the type string!\nThus, it needs to be saved into a variable: x = input()\n\nAfter the user types “Hi”, for example, it is as if: x = \"Hi\"\n\nYou can customize an input message by passing a string:\n\n\nx = input(\"Please enter your name: \")"
  },
  {
    "objectID": "units/01/show/input-output-p.html#input-of-numeric-values",
    "href": "units/01/show/input-output-p.html#input-of-numeric-values",
    "title": "Input/Output ",
    "section": "Input of numeric values",
    "text": "Input of numeric values\n\nNow, suppose we want to calculate the sum of two numbers:\n\n\nx = input(\"Please enter first number: \")\ny = input(\"Please enter second number: \")\nz = x + y\nprint(\"The sum is\", z)\n\nWhat happened???"
  },
  {
    "objectID": "units/01/show/input-output-p.html#converting-string-to-number-types",
    "href": "units/01/show/input-output-p.html#converting-string-to-number-types",
    "title": "Input/Output ",
    "section": "Converting string to number types",
    "text": "Converting string to number types\n\nYou can convert a string to a number using the methods int() and float()\n\nThe string that goes inside the parentheses (which we call the “argument” of the method) will be turned to an integer/float\n\n\n\nxstring = input(\"Please enter your age: \")\nx = int(xstring)\nprint(\"Your age is \", x)\n\n\nJust make things shorter by chaining one method into another!\n\n\nx = int(input(\"Please enter your age: \"))\nprint(\"Your age is \", x)"
  },
  {
    "objectID": "units/01/show/program-p.html#section",
    "href": "units/01/show/program-p.html#section",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "Programming = writing programs. What are programs?"
  },
  {
    "objectID": "units/01/show/program-p.html#programs-are-forms-of-wisdom",
    "href": "units/01/show/program-p.html#programs-are-forms-of-wisdom",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Programs are forms of wisdom",
    "text": "Programs are forms of wisdom\n\n\n\n\n\n\n\n\n\n\n\n22 “The Lord brought me forth as the first of his works, before his deeds of old; 23 I was formed long ages ago, at the very beginning, when the world came to be. 24 When there were no watery depths, I was given birth, when there were no springs overflowing with water; 25 before the mountains were settled in place, before the hills, I was given birth, 26 before he made the world or its fields or any of the dust of the earth. 27 I was there when he set the heavens in place, when he marked out the horizon on the face of the deep, 28 when he established the clouds above and fixed securely the fountains of the deep, 29 when he gave the sea its boundary so the waters would not overstep his command, and when he marked out the foundations of the earth. 30 Then I was constantly at his side. I was filled with delight day after day, rejoicing always in his presence, 31 rejoicing in his whole world and delighting in mankind. Proverbs 8.22-31"
  },
  {
    "objectID": "units/01/show/program-p.html#drawing-as-a-program",
    "href": "units/01/show/program-p.html#drawing-as-a-program",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "Drawing as a program",
    "text": "Drawing as a program"
  },
  {
    "objectID": "units/02/activities/computers-are-stupid.html",
    "href": "units/02/activities/computers-are-stupid.html",
    "title": "Example: Bhaskara’s formula",
    "section": "",
    "text": "Is the following code right? What’s wrong with it?\n\n\nfrom math import sqrt\n\na = int(input())\nb = int(input())\nc = int(input())\n\nx1 = ( -b + sqrt(b^2 - 4ac) ) / 2a\nx2 = ( -b - sqrt(b^2 - 4ac) ) / 2a\n\n\nExample: Coding text\n\nSuppose I want to print the following string:\n\n\nGandalf said: “You shall not pass!”\n\n\nWhy does the following code doesn’t work? What can I do to fix it?\n\n\nprint(\"\"Gandalf said: \"You shall not pass!\"\")\n\n\nNow, suppose I want to print a poem spanning multiple lines. How can I do that?\n\n\nOver hill, over dale,  Thorough bush, thorough brier,  Over park, over pale,  Thorough flood, thorough fire!\n\nTip: check for Python’s escape characters…\n\n\nDiscussion: computers are actually stupid…?\n\nQ: “If computers are so smart, why don’t they program themselves?” A: “Somebody would first have to write the program, and no one has yet been that smart”. - Derek Robinson, “Functions” (in: Software Studies, a Lexicon)\n\n\nWriting code requires us to be really precise and non-ambiguous. It is really nitpicky and doesn’t allow even little inaccuracies (which humans can easily disregard…)\n\nSometimes what we write makes sense to us, but it doesn’t “make sense” to the computer.\nSometimes it doesn’t work and it won’t even show the error!\nSometimes it “works”, but I doesn’t do exactly what we are thinking it should do… (an illusion of achievement).\n\nSolutions?\n\ncode verification and validation\nPair programming: working in pairs (or more) helps us making sure that we are really communicating something that makes sense…\nMaybe better programming language design…?\n\n\nOpinion: Amy Ko, Critically Conscious Computing\n\nThese efforts to make communication with computers easier, alas, have not resulted in programming being easy, creating a broad cultural belief that programming is inaccessible, hard to learn, and only for”smart” people. In reality, however, programming languages are often poorly designed, poorly explained, and poorly taught, and many of their users gatekeep access to them, reinforcing elitist, essentialist attitudes about who is “smart” enough to use them."
  },
  {
    "objectID": "units/02/activities/hospitable-code.html",
    "href": "units/02/activities/hospitable-code.html",
    "title": "Discussion: Hospitable code",
    "section": "",
    "text": "Professor Victor Norman, from Calvin, wrote a nice article calling attention to an important practice: we should always aim to write hospitable code.\nYou should read the whole article when you have time, but just to summarize some of the points:\n\nNot only the function, but also the form of the code matters, to me and to God.\nA common saying in the software development community: “code is written once, but read a thousand times”.\nTherefore, because you care for your neighbor, you should serve them by making your code hospitable: “code that welcomes the reader to come in and be comfortable, to enjoy the cleanliness of the code, to feel at home, and to see that the space has been carefully prepared with guests in mind.”\n\n\n\nThere is a common perception that software written for scientific and engineering communities are the worst documented and organized ever. People usually think that since we are dealing with experts, it would be a waste of time to just make things clean and organized.\n\nThus, reflect: as Christians, is it really a waste of time to make things beautiful and welcoming? Or is it just getting to final result that matters?"
  },
  {
    "objectID": "units/02/activities/hospitable-code.html#hospitable-code-in-the-scientific-and-engineering-community",
    "href": "units/02/activities/hospitable-code.html#hospitable-code-in-the-scientific-and-engineering-community",
    "title": "Discussion: Hospitable code",
    "section": "",
    "text": "There is a common perception that software written for scientific and engineering communities are the worst documented and organized ever. People usually think that since we are dealing with experts, it would be a waste of time to just make things clean and organized.\n\nThus, reflect: as Christians, is it really a waste of time to make things beautiful and welcoming? Or is it just getting to final result that matters?"
  },
  {
    "objectID": "units/02/constants.html",
    "href": "units/02/constants.html",
    "title": "Constants",
    "section": "",
    "text": "Constants are variables with values that the program never changes\nReasons to use them:\n\nimproves readability of the source code\nfacilitates easier program modification\n\nGood programming practice (style):\n\nplace all constant declarations at the beginning of a program\nuse all CAPITALS for constant names\n\n\nExample: which code is more clear?\n\n\n\nx = 3.14159\ny = 1.324\nz = 2*x*y\n\n\n\nPI = 3.14159\nradius = 1.324\ncircumference = 2*PI*radius"
  },
  {
    "objectID": "units/02/operators.html",
    "href": "units/02/operators.html",
    "title": "Operators",
    "section": "",
    "text": "Operation\nOperator\nExample\nEvaluates to\n\n\n\n\nAddition\n+\n2 + 2\n4\n\n\nSubtraction\n-\n4 - 1\n3\n\n\nMultiplication\n*\n1.5 * 2\n3.0\n\n\nDivision\n/\n5 / 2\n2.5\n\n\nFloor Division\n//\n5 // 2\n2\n\n\nModulus (remainder of division)\n%\n5 % 2\n1\n\n\nExponent\n**\n3**3\n27"
  },
  {
    "objectID": "units/02/operators.html#resulting-types",
    "href": "units/02/operators.html#resulting-types",
    "title": "Operators",
    "section": "Resulting types",
    "text": "Resulting types\n\nIf any of the operands is a float, result will be a float. Otherwise (both are integer), result is an integer.\nHowever, there is an exception: result of a division (not floor division) is always a float. Careful with that! (why? we’ll see in a moment)"
  },
  {
    "objectID": "units/02/operators.html#operator-precedence",
    "href": "units/02/operators.html#operator-precedence",
    "title": "Operators",
    "section": "Operator precedence",
    "text": "Operator precedence\n\nAlways be careful with expressions using more than one operator! For example:\n\n\na = 3\nb = 6\nc = a + b * 2\nprint(c)\n\n\nThis evaluates as \\(a + (b \\times 2) = 3 + (6 * 2) = 3 + 12 = 15\\)\n\nPython operator precedence order:\n\nParentheses: ()\nExponents: **\nMultiplication, divisions and modulus: * / // %\nAddition and subtraction: + -\nComparisons: &lt;= &lt; &gt;= &gt; == != is (next week)\nBoolean not (next week)\nBoolean and (next week)\nBoolean or (next week)"
  },
  {
    "objectID": "units/02/operators.html#operators-in-strings",
    "href": "units/02/operators.html#operators-in-strings",
    "title": "Operators",
    "section": "Operators in strings",
    "text": "Operators in strings\n\nPython also permits using SOME operators with strings. In a metaphorical way…\n\n\n\n\n\n\n\n\n\n\n\nString Operation\nMetaphor\nOperator\nExample\nEvaluates to\n\n\n\n\nConcatenation\nAddition\n+\n\"Hey\" + \" \" + \"apple\"\n\"Hey apple\"\n\n\nRepetition\nMultiplication\n*\n\"na\" * 4\n\"nananana\"\n\n\n\n\nOther operators are not supported. Multiplication of a string with another string is also not supported. Both wouldn’t make so much sense…"
  },
  {
    "objectID": "units/02/operators.html#evaluating-operations-in-strings",
    "href": "units/02/operators.html#evaluating-operations-in-strings",
    "title": "Operators",
    "section": "Evaluating operations in strings",
    "text": "Evaluating operations in strings\nIt is also possible to evaluate an expression coded as a string. For example:\n\nexpression = \"2 * (4 + 6) / 3 - 5\"\nresult = eval(expression)\nprint(result)\n\n1.666666666666667"
  },
  {
    "objectID": "units/02/programming-style.html",
    "href": "units/02/programming-style.html",
    "title": "Programming Style",
    "section": "",
    "text": "Like in any language, style and form makes a BIG difference. One could say that it doesn’t matter once it works, however, that is a very narrow way to understand human expression…\nSometimes there are multiple ways to write code that works, but many of them are not be hospitable. As an example:\n\n\nprime_numbers = [x for x in range(2, 101) if all(x % y != 0 for y in range(2, int(x**0.5) + 1))\n\nThis is very concise, however, it is not readable. It is a monster of an expression!\nWhat would happen if we just rewrite it like this?\n\ndef is_prime(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprime_numbers = [x for x in range(2, 101) if is_prime(x)]\n\nIt is more code, however, it is much more readable… (Don’t care about not understanding all the syntax now, we’ll see that later).\n\nSome programming style tips:\n\nLack of comments is a problem. But too much commenting is also a problem.\nBad naming of variables and functions: for example, abstract names as “variable1”, or names that don’t reflect exactly what is their purpose.\nSpacing usually doesn’t matter for the working of code, but it can be a problem for reading.\nFollow community standards. Read other people’s code and learn. Develop a common understanding.\n\nIsn’t it good to find yourself in known territory, with same languages, habits, food?\nAn interesting question: could there be some “strange” habits in Python programming for people with cultural backgrounds different from American, white and men?\n\n\n\nPython has a nice style guide available. It is good to consult it once in a while."
  },
  {
    "objectID": "units/03/activities/encoding-information.html",
    "href": "units/03/activities/encoding-information.html",
    "title": "Activity: representing information",
    "section": "",
    "text": "Activity: representing information\nWhat data structure would you use to represent the following? Write down and discuss with your colleagues.\n\nThe first names of all the students in this course\nAn address book entry (name, email, major, …)\nA person’s ethnicity\nA coordinate point, e.g., (0, 0)\nThe atomic number of every element in the periodic table\nA bag with different colored pieces to be drawn randomly? (For example, in a game like [The Quacks of Quedlinburg](https://boardgamegeek.com/boardgame/244521/quacks-quedlinburg)\n\n\n\nDiscusion: value judgements in representations\n\nEvery representation is a selective portrait of a reality according to certain interests of who represents it. You can depict only certain parts, at certain moments, and with a certain structure.\nThus, we can ask: are we encoding reality correctly?\nRemember our data types characteristics:\n\nNumeric, boolean, containers…\nImmutable / Mutable\nOrdered / Non-ordered\nCallable / Non-callable\n\n\nProgrammers are encoders. Everytime we represent some thing with a data structure, we are supposing that this thing is correctly portrayed with this structure.\n\nFor example, is a list of people’s name something we can “order”? And for what purpose are we doing that?\nFor example, can emotion be represented with a number? A boolean value? A dictionary indicating multiple aspects of an emotion?\n\nThus, we also need to acknowledge that data can be:\n\nimprecise (including: what it can mean for someone may not mean the same thing for another);\nambiguous (may mean multiple things depending on the context);\nnot comprehensive enough (or what we call biased - it is limited to some specific population or situation and thus is not generalizable);\ndistorted (“artifacts” - we cannot always be sure it is being transmitted or recorded faithfully);\nor even not timely enough (things changed since we got them).\n\nThis happens because we limited, situated and always see things from our perspective. This is not bad, however, we need to acknowledge this limitedness. We are not possessors of an all-encompassing truth.\n\n“Through the confusion of tongues, through non-communication, God prevents man from constructing [for himself] a truth valid for all men. In this way, man’s truth will always be partial and contestable” (Jacques Ellul, The Meaning of the City, p. 19).\n\n\n\nActivity: give examples of cases above:\n\nimprecise information:\nambiguous information:\nnot comprhensive information:\ndistorted information:\nnon-timely information:\n\n\n\nEncoding: ruling with justice\n\nRemember the origin of the word code: a corpus of law;\nWhen we encode things, we are setting a rule;\nThus, we are reflecting our kingly vocation as human beings;\nThe Bible talks a lot about JUSTICE as the virtue of a king.\nTo encode correctly, we need to see correctly. And to see correctly, we need a fundamental orientation of heart towards God and his wisdom.\n\n\nFor the Lord grants wisdom! From his mouth come knowledge and understanding. He grants a treasure of common sense to the honest. He is a shield to those who walk with integrity. He guards the paths of the just and protects those who are faithful to him. Then you will understand what is right, just, and fair, and you will find the right way to go. Proverbs 2.6-10\n\n\nWe also need a broad knowledge base: “[In ICT design,] one needs to have as broad a knowledge base as possible. It is the outer parameters that one must have knowledge about.” (Jacob and Ebrahimpur 2001, 78)\n\nSociologist Harry Collins calls that interactional expertise - you are not an expert practitioner in the area, but you are informed enough to talk meaninfully with its practicioners."
  },
  {
    "objectID": "units/03/activities/lab-tips.html",
    "href": "units/03/activities/lab-tips.html",
    "title": "Tips for homework - cryptography",
    "section": "",
    "text": "The function ord() will convert a character to its corresponding number in the ASCII table\nThen you can add the increment to this number, and convert it back to a character using chr(). For example:\nincrement = 2\nletter = 'a'\nc_letter = chr( ord(letter) + increment ) # adding the increment and converting back to character\nprint(c_letter) # should be 'c'\n\nc\ntr_letter = ord(letter) - 97 # transposed\nc_tr_letter = tr_letter + increment\ntr_letter = ord(letter) - 97 # transposed\nc_tr_letter = (tr_letter + increment) % 26\nincrement = 2\nletter = 'z'\ntr_letter = ord(letter) - 97 # transposed\nc_tr_letter = (tr_letter + increment) % 26 # adding the increment and limiting to 26\nc_letter = chr( c_tr_letter + 97 )\nprint(c_letter) # should be 'b'\n\nb\nc_letter = chr(((ord(letter) - 97 + increment) % 26 ) + 97)"
  },
  {
    "objectID": "units/03/activities/lab-tips.html#subscripts-of-subscripts-lab-3.1",
    "href": "units/03/activities/lab-tips.html#subscripts-of-subscripts-lab-3.1",
    "title": "Tips for homework - cryptography",
    "section": "Subscripts of subscripts (Lab 3.1)",
    "text": "Subscripts of subscripts (Lab 3.1)\n\nNotice that we have a list of tuples. To access individual items, we use subscripts of subscripts: [][][]...\nHow, for example, do we access the 2nd tuple (('hey', 'ho')) on the 3rd list inside the list?\nHow do we access the word ho?\n\n\nx = [(1,2,'hey'), None, [123, ('hey', 'ho'), 123, {}], [[]], 1]\n\n\nHow do we access the value the character 'h' in the word 'hi' in the dictionary inside the tuple?\n\n\ny = 123, None, 321, {12: True, 'potato': 0, 123:123, 'tomato': 'hi'}"
  },
  {
    "objectID": "units/03/activities/lab-tips.html#lists-of-objects-las-3.2",
    "href": "units/03/activities/lab-tips.html#lists-of-objects-las-3.2",
    "title": "Tips for homework - cryptography",
    "section": "Lists of objects (Las 3.2)",
    "text": "Lists of objects (Las 3.2)\n\nWe can fill a list with turtles! We started a list with 4 empty spaces, and put the 4 different turtles there.\n\n\ntmnt = 4*[None] # our list of (ninja) turtles\nfor i in range(4): # the following code will run 4 times, at each time, variable \"i\" will have values 0, 1, 2 and 3\n  tmnt[i] = turtle.Turtle()    # create a turtle and assign it to the position \"i\" in the list\n\n\nYou can make each turtle do its stuff, then, by calling them tmnt[&lt;number_of_turtle&gt;].&lt;method...&gt;()"
  },
  {
    "objectID": "units/03/activities/lab-tips.html#dictionary-filling-lab-3.3",
    "href": "units/03/activities/lab-tips.html#dictionary-filling-lab-3.3",
    "title": "Tips for homework - cryptography",
    "section": "Dictionary filling (Lab 3.3)",
    "text": "Dictionary filling (Lab 3.3)\n\nLet’s make a dictionary with the turtles by name? Suggestion: \"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"\n\n\ntmnt_names = \"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"\ntmnt = {}  # empty dictionary\nfor i in range(4):\n  tmnt[tmnt_names[i]] = turtle.Turtle()\n\n\nAttention to the assignment tmnt[tmnt_names[i]]. See what is happening? We are setting the key to be the string in the list accessed with the index “i”.\nYou can now call each turtle by name just by typing, for example, tmnt['Leonardo'].&lt;method...&gt;(). Cowabunga!"
  },
  {
    "objectID": "units/03/dictionaries.html",
    "href": "units/03/dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "Mapping types: have keys which map to values\nA pair of key and value is called an entry\nDictionaries are NOT ORDERED! But they are subscriptable (with the keys - which have to be immutable objects)\n\n\nphones = {'Sarah':'476-3321', 'Nathan':'351-7743'} \nusers = {'Name':'Molly', 'Age':18}   \nemp = {} # an empty dictionary\n\n\nYou can add a new entry by just specifying it:\n\nphones['Bob'] = '123-4567'\nprint(phones)\n\n{'Sarah': '476-3321', 'Nathan': '351-7743', 'Bob': '123-4567'}\n\n\nOr also change values using the keys:\n\nphones['Sarah'] = '999-9999'\nprint(phones)\n\n{'Sarah': '999-9999', 'Nathan': '351-7743', 'Bob': '123-4567'}\n\n\nTo delete, use:\n\ndel phones['Nathan']\nprint(phones)\n\n{'Sarah': '999-9999', 'Bob': '123-4567'}"
  },
  {
    "objectID": "units/03/object-methods.html",
    "href": "units/03/object-methods.html",
    "title": "Object methods",
    "section": "",
    "text": "Some objects also have some built-in methods that can be called to perform various operations…\nTo do that, you type the object or the variable which is pointing to it, add a ‘`.``’, and then type the method.\nFor example, to find the index of an element of a list:\na = [\"you\", \"shall\", \"not\", \"pass\"]\ninot = a.index(\"not\")\nprint(\"index of the word 'not' is \",inot)\n\nindex of the word 'not' is  2"
  },
  {
    "objectID": "units/03/object-methods.html#sequence-methods",
    "href": "units/03/object-methods.html#sequence-methods",
    "title": "Object methods",
    "section": "Sequence methods",
    "text": "Sequence methods\nRemember: sequences are ordered and subscriptable with integers (the indexes). The methods below thus work for all of these types: lists, tuples and strings.\n\n\n\n\n\n\n\nOperation\nResult\n\n\n\n\nx in s\nTrue if an item of s is equal to x, else False\n\n\nx not in s\nFalse if an item of s is equal to x, else True\n\n\ns + t\nthe concatenation of s and t\n\n\ns * n or n * s\nequivalent to adding s to itself n times\n\n\ns[i]\nith item of s, origin 0\n\n\ns[i:j]\nslice of s from i to j\n\n\ns[i:j:k]\nslice of s from i to j with step k\n\n\nlen(s)\nlength of s\n\n\nmin(s)\nsmallest item of s\n\n\nmax(s)\nlargest item of s\n\n\ns.index(x[, i[, j]])\nindex of the first occurrence of x in s (at or after index i and before index j)\n\n\ns.count(x)\ntotal number of occurrences of x in s"
  },
  {
    "objectID": "units/03/object-methods.html#unpacking-sequences",
    "href": "units/03/object-methods.html#unpacking-sequences",
    "title": "Object methods",
    "section": "Unpacking sequences",
    "text": "Unpacking sequences\nAll sequence types can also be unpacked in multiple variables. For example:\n\ns = [\"I\", \"am\", \"your\", \"father\"]\na, b, c, d = s\nprint(a)\nprint(b)\n\nI\nam\n\n\n\ns = \"hi!\"\nch1, ch2, ch3 = s\nprint(ch1, ch2, ch3)\n\nh i !\n\n\nBut careful: you will get an error if you don’t match the length:\n\na = [1, 2, 3]\nv1, v2, v3, v4 = a\n\nValueError: not enough values to unpack (expected 4, got 3)"
  },
  {
    "objectID": "units/03/tuples.html",
    "href": "units/03/tuples.html",
    "title": "Tuples",
    "section": "",
    "text": "As every sequence type, it is ordered and subscriptable with integer indexes.\nImmutable, represented just as values separated with commas, or separated with commas and enclosed with parentheses:\nfruits = \"banana\", \"apple\", \"orange\"\nor\nfruits = (\"banana\", \"apple\", \"orange\")"
  },
  {
    "objectID": "units/03/tuples.html#why-immutables",
    "href": "units/03/tuples.html#why-immutables",
    "title": "Tuples",
    "section": "Why immutables?",
    "text": "Why immutables?\nWhy use tuples since they can’t change?\n\nThey uses less memory and demands less processing.\nThey don’t need to be copied when attributing to a new variable (see later).\n\n\nWhat if I really want to change?\n\nfruits[1] = \"pineapple\" # try changing \"apple\" to \"pineapple\"\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nTo “change” a tuple, for example, you would basically need to either:\n\nCreate a new tuple (with the changes you want), or\nConvert the tuple to a list, change the value you want (lists are mutable), and convert it back to a tuple.\n\nWhich would mean creating a new list object (from the tuple), and then creating a new tuple object (from the list)… which can be actually very inefficient and costly…"
  },
  {
    "objectID": "units/04/activities/exercises1.html",
    "href": "units/04/activities/exercises1.html",
    "title": "Exercises",
    "section": "",
    "text": "What is the difference between an elif and a if just after another if?\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nelif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\n\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\nLess than 5"
  },
  {
    "objectID": "units/04/activities/exercises1.html#exercise-1-if-versus-elif",
    "href": "units/04/activities/exercises1.html#exercise-1-if-versus-elif",
    "title": "Exercises",
    "section": "",
    "text": "What is the difference between an elif and a if just after another if?\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nelif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\n\n\n\nx = 4\nif x &gt; 3:\n  print(\"Greater than 3\")\nif x &lt; 5:\n  print(\"Less than 5\")\n\nGreater than 3\nLess than 5"
  },
  {
    "objectID": "units/04/activities/exercises1.html#exercise-2",
    "href": "units/04/activities/exercises1.html#exercise-2",
    "title": "Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nimport turtle\nt = turtle.Turtle()\nchoice = input(\"Choose between square, circle or both: \")\nif choice.lower() == \"square\" or choice.lower() == \"both\":\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\n  turtle.right(90)\n  turtle.forward(100)\nif choice.lower() == \"circle\" or choice.lower() == \"both\":\n  turtle.circle(50)\nprint(\"Finished!\")\n\n\nWhich code chunks will execute:\n\nIf the user types square?\nIf the user types both?\nIf the user types potato?\n\nWhy are we setting choice.lower() in the comparison?"
  },
  {
    "objectID": "units/04/activities/exercises1.html#exercise-3",
    "href": "units/04/activities/exercises1.html#exercise-3",
    "title": "Exercises",
    "section": "Exercise 3",
    "text": "Exercise 3\n\nIdentify the code chunks and write its fluxogram (note the nested ifs!)\n\n\nprint(\"Lamp doesn't work!\")\nans = input(\"Is the lamp plugged in? \")\nif ans == \"yes\":\n  ans = input(\"Is the bulb burned out? \")\n  if ans == \"yes\":\n    print(\"Replace bulb!\")\n  else:\n    print(\"Repair lamp!\")\nelse:\n  print(\"Plug in lamp!\")"
  },
  {
    "objectID": "units/04/boolean-ops.html",
    "href": "units/04/boolean-ops.html",
    "title": "Boolean operators",
    "section": "",
    "text": "These receive only Booleans as operands and give a Boolean as result."
  },
  {
    "objectID": "units/04/boolean-ops.html#examples",
    "href": "units/04/boolean-ops.html#examples",
    "title": "Boolean operators",
    "section": "Examples",
    "text": "Examples\nExample 1\n\nif (x &gt;= 1) and (x &lt;=10):\n  print('x is between 1 and 10 inclusive')\n\nExample 2\n\nif not (x == ''):\n  print('x is not the empty string')\n\nExample 3\n\nif (x &lt; 1) or (x &gt; 10):\n  print('x is not between 1 and 10')\n\nExample 4\n\nmessage = \"you fool!\"\nif \"fool\" not in message:\n  print(\"Message does not contain offensive language\")"
  },
  {
    "objectID": "units/04/boolean-ops.html#short-circuit-evaluations",
    "href": "units/04/boolean-ops.html#short-circuit-evaluations",
    "title": "Boolean operators",
    "section": "Short-circuit evaluations",
    "text": "Short-circuit evaluations\nIn (A and B), if A is false, then so is the expression, and there is no need to evaluate B.\nIn (A or B), if A is true, then so is the expression, and there is no need to evaluate B.\nKeep an eye on that!"
  },
  {
    "objectID": "units/04/boolean-ops.html#remember-precedence-order",
    "href": "units/04/boolean-ops.html#remember-precedence-order",
    "title": "Boolean operators",
    "section": "Remember precedence order!",
    "text": "Remember precedence order!\n\nParentheses: ()\nExponents: **\nMultiplication, divisions and modulus: * / // %\nAddition and subtraction: + -\nComparisons: &lt;= &lt; &gt;= &gt; == != is in\nBoolean not\nBoolean and\nBoolean or"
  },
  {
    "objectID": "units/04/discrimination.html",
    "href": "units/04/discrimination.html",
    "title": "Conditionals are discriminations",
    "section": "",
    "text": "Amy Ko reflects on the attempt to generate an algorithm for deciding over administrative issues.\n\n“In 2006, the U.S. state of Indiana began a major digitization initiative to reduce administrative costs of its welfare system through automation.\nThis information the caseworker reviewed included things like:\n- Proof of Indiana residency,\n- How many people live in the applicant’s household,\n- Whether the household has dependent children less than 18 years of age, and\n- The gross earned monthly income of the household in the current or next month.\n\nThe case worker:\n- was available by phone for questions,\n- to resolve any ambiguities in an application, and\n- to help explain the state’s eligibility decisions.\n\nThe process was not perfect, but the experience of applying for benefits involved interacting with a person who could guide the applicant through the process, fix any misinterpretations by the applicants about how to fill out the form, and address any exceptional circumstances not anticipated by the program, its processes, or the laws that shaped it.\n\n’s digitization efforts sought to automate the application process, having applicants submit data through a website, then having an algorithm use that data to decide whether the applicant was eligible.\nThe hope was that the algorithm could replicate the caseworker’s eligibility decision, but do it more consistently, more quickly, and more fairly than a case worker could do, and possibly free caseworkers to spend their time handling more complex cases. […]\n\n[However, what happened is that] fewer people were being approved, and residents had less clarity about why they were being denied. The decisions that the algorithm was making were, in general, *less flexible, less explainable, and less transparent than the decisions that caseworkers made**. The result was that Indiana denied more than a million applications for food stamps and other aid, a 54% increase in denials compared to the three years before the automation was launched. From the conservative governor’s standpoint, however, it was a success: the state and federal government had never spent less on food security for its citizens since the program had started.\n\n\n\n\nThe algorithm described failed because it couldn’t deal with exceptional cases, personal histories, etc.\n\nCan’t we just add these exceptions to the logic?\n\n\n\nThere are reasons to believe this won’t be sufficient.\n\nAutomating decision making can also be problematic when it completely stamps out any room for discretion. While human discretion presents its own issues, as described above, it can be useful when it is difficult or impossible to fully specify how decisions should be made in accordance with the goals and principles of the institution. Automation requires that an institution determine in advance all of the criteria that a decision-making scheme will take into account; there is no room to consider the relevance of additional details that might not have been considered or anticipated at the time that the software was developed.\n\n\nAutomated decision-making is thus likely to be much more brittle than decision-making that involves manual review because it limits the opportunity for decision subjects to introduce information into the decision-making process. People are confined to providing evidence that corresponds to a pre-established field in the software. Such constraints can result in absurd situations in which the strict application of decision-making rules leads to outcomes that are directly counter to the goals behind these rules. New evidence that would immediately reverse the assessment of a human decision maker may have no place in automated decision making. For example, in an automated system to assess people with illnesses to determine eligibility for a state-provided caregiver, one field asked if there were any foot problems. An assessor visited a certain person and filled out the field to indicate that they didn’t have any problems — because they were an amputee. - Solon Barocas, Moritz Hardt, Arvind Narayanan, When is automated decision making legitimate?\n\n\n\n\n\nPhilosopher Ludwig Wittgenstein (1889-1951) wrote: “no course of action could be determined by a rule, because any course of action can be made out to accord with the rule” (Philosophical Investigations §201a). In other words: “rules do not contain the rules for its own application”\nExample: the akward student experiment (Harry Collins, “Changing Order”): “given the sequence ‘2, 4, 6, 8’, continue it in the same way.”\n\n\n“We know how to go on in the ‘same way’ because we share a ‘form of life’. The rightness of ‘10, 12, 14, 16’ as the continuation of ‘2, 4, 6, 8’ resides in its rightness for everyone sharing our culture.” (Harry Collins)\n\n\nIn a similar way, an algorithm will follow rules in the way we think it should follow rules (i.e., ignoring lots of exceptional situations). But without a shared culture, for understanding context and then how to apply the rule, it will operate almost “blindly”…\n\n\n\n\n\n\n“The power that algorithms offer is not without consequences. They take processes that we used to be able to see people do and hide them behind code. They take procedures that used to be controlled by every individual who executed them and centralize and standardize this execution in the hands of software developers often in private organizations. And this shift of power, from the collective to developers, had a price: the knowledge those individuals have of what they need is no longer brought to bear on the processes that algorithms automate. Instead, it’s up to those few developers to proactively learn that knowledge and translate it into uniform step-by-step instructions that likely don’t account for the diversity of needs and contexts in the world. The critical question about algorithms, then, is not how to automate something with an algorithm, but whether to and why.” - Amy J. Ko, Critically Conscious Computing\n\n\nWhat are the value judgements when we encode intelligence in algorithms?\n\nIf-else statements are distinction judgments, or in other words, DISCRIMINATIONS. Are these judgments fair? Do they really take what is needed into account?\n\nAs Christians, are we being fair with the diversity and complexity of the world, or are we trying to code everything into simplistic operations just in order to better control life situations?"
  },
  {
    "objectID": "units/04/discrimination.html#cant-we-just-refine-the-logic",
    "href": "units/04/discrimination.html#cant-we-just-refine-the-logic",
    "title": "Conditionals are discriminations",
    "section": "",
    "text": "The algorithm described failed because it couldn’t deal with exceptional cases, personal histories, etc.\n\nCan’t we just add these exceptions to the logic?\n\n\n\nThere are reasons to believe this won’t be sufficient.\n\nAutomating decision making can also be problematic when it completely stamps out any room for discretion. While human discretion presents its own issues, as described above, it can be useful when it is difficult or impossible to fully specify how decisions should be made in accordance with the goals and principles of the institution. Automation requires that an institution determine in advance all of the criteria that a decision-making scheme will take into account; there is no room to consider the relevance of additional details that might not have been considered or anticipated at the time that the software was developed.\n\n\nAutomated decision-making is thus likely to be much more brittle than decision-making that involves manual review because it limits the opportunity for decision subjects to introduce information into the decision-making process. People are confined to providing evidence that corresponds to a pre-established field in the software. Such constraints can result in absurd situations in which the strict application of decision-making rules leads to outcomes that are directly counter to the goals behind these rules. New evidence that would immediately reverse the assessment of a human decision maker may have no place in automated decision making. For example, in an automated system to assess people with illnesses to determine eligibility for a state-provided caregiver, one field asked if there were any foot problems. An assessor visited a certain person and filled out the field to indicate that they didn’t have any problems — because they were an amputee. - Solon Barocas, Moritz Hardt, Arvind Narayanan, When is automated decision making legitimate?"
  },
  {
    "objectID": "units/04/discrimination.html#the-awkward-student-experiment",
    "href": "units/04/discrimination.html#the-awkward-student-experiment",
    "title": "Conditionals are discriminations",
    "section": "",
    "text": "Philosopher Ludwig Wittgenstein (1889-1951) wrote: “no course of action could be determined by a rule, because any course of action can be made out to accord with the rule” (Philosophical Investigations §201a). In other words: “rules do not contain the rules for its own application”\nExample: the akward student experiment (Harry Collins, “Changing Order”): “given the sequence ‘2, 4, 6, 8’, continue it in the same way.”\n\n\n“We know how to go on in the ‘same way’ because we share a ‘form of life’. The rightness of ‘10, 12, 14, 16’ as the continuation of ‘2, 4, 6, 8’ resides in its rightness for everyone sharing our culture.” (Harry Collins)\n\n\nIn a similar way, an algorithm will follow rules in the way we think it should follow rules (i.e., ignoring lots of exceptional situations). But without a shared culture, for understanding context and then how to apply the rule, it will operate almost “blindly”…"
  },
  {
    "objectID": "units/04/discrimination.html#discussion-programmers-encode-and-standardize-intelligence",
    "href": "units/04/discrimination.html#discussion-programmers-encode-and-standardize-intelligence",
    "title": "Conditionals are discriminations",
    "section": "",
    "text": "“The power that algorithms offer is not without consequences. They take processes that we used to be able to see people do and hide them behind code. They take procedures that used to be controlled by every individual who executed them and centralize and standardize this execution in the hands of software developers often in private organizations. And this shift of power, from the collective to developers, had a price: the knowledge those individuals have of what they need is no longer brought to bear on the processes that algorithms automate. Instead, it’s up to those few developers to proactively learn that knowledge and translate it into uniform step-by-step instructions that likely don’t account for the diversity of needs and contexts in the world. The critical question about algorithms, then, is not how to automate something with an algorithm, but whether to and why.” - Amy J. Ko, Critically Conscious Computing\n\n\nWhat are the value judgements when we encode intelligence in algorithms?\n\nIf-else statements are distinction judgments, or in other words, DISCRIMINATIONS. Are these judgments fair? Do they really take what is needed into account?\n\nAs Christians, are we being fair with the diversity and complexity of the world, or are we trying to code everything into simplistic operations just in order to better control life situations?"
  },
  {
    "objectID": "units/04/if-else.html",
    "href": "units/04/if-else.html",
    "title": "If-else statement",
    "section": "",
    "text": "Python also supports a two-way selection statement:\n\n\nif expression:\n  # statements if expression is true\nelse:\n  # statements if expression is false"
  },
  {
    "objectID": "units/04/intelligence.html",
    "href": "units/04/intelligence.html",
    "title": "Algorithmic intelligence",
    "section": "",
    "text": "Medical Expert Systems in the decades of 90 and 2000 used to have a similar behavior of what we are seeing so far: checking conditions and following through a flowchart. Programmers would add many Medical Logic Modules (MLM) to the health information system indicating what conditions and actions would be taken given some patient’s input.\nThis is today called the paradigm Classic or Symbolic Artificial Intelligence. (Nowadays we have a different paradigm, Adaptive AI, which uses data to train models instead of just elaborating logic flows).\n\nQuestions:\n\nCan we consider intelligence as just following logic flowcharts?\nIs thinking just an algorithm? (See: computationalism/computational theory of mind)\nIs everything an algorithm? (See: pancomputationalism)\n\n\n\nThere are lot of critiques to this suggestive idea:\n\n\n\nStrictly speaking, there are problems that really can’t be solved by sequential, step-by-step instructions. These are called non-computable problems.\n\nMost of them include problems where there is not a way to determine if the machine will stop running code while searching for a solution (ex.: the Halting Problem).\n\nA simple example: there is no algorithm to solve the 2048 game, famous in 2014.\nHowever, problems like these can have their solution “approximated” with heuristics (exploring different options and seeing which is better). So one could argue that this is the way we think when trying to solve them… even though there is not an “analytical” way to solve.\n\n\n\n\n\nProposed by philosopher John Searle in 1980.\n\n\n\nA person who does not understand Chinese sitting in a sealed room with a set of instructions in English for manipulating Chinese symbols. People outside the room slide Chinese symbols under the door, and the person inside follows a translation table to produce appropriate responses in Chinese, without actually comprehending the meaning of the symbols.\nSearle’s argument is that even though the person inside the room can generate responses that seem intelligent to those outside, the person doesn’t truly understand Chinese; they are just manipulating symbols according to a set of rules. Similarly, Searle argues that a computer program that processes symbols according to a set of rules (like many AI systems) may simulate intelligence but does not possess genuine understanding or consciousness.\n\n\n\n\n\nPhilosopher Hubert Dreyfus made a powerful critique to Classic AI in his 1972 book “What Computers Can’t Do”.\nHis argument is long and complex, and involves noticing that human intelligence is fundamentally embodied and situated in a certain narrative, and since an artificial device wouldn’t have this, it cannot mimic completely how humans reason (we’re exploring a bit of that in a moment).\nIn any case, Dreyfus reflected on the quest for Artificial Intelligence as the quest of almost all Western science and philosophy (emphasis added):\n\n\n“Since the Greeks invented logic and geometry, the idea that all reasoning might be reduced to some kind of calculation so that all arguments could be settled once and for all has fascinated most of the Western tradition’s rigorous thinkers. Socrates was the first to give voice to this vision. The story of artificial intelligence might well begin around 450B.C. when (according to Plato) Socrates demands of Euthyphro, a fellow Athenian who, in the name of piety, is about to turn in his own father for murder:”I want to know what is characteristic of piety which makes all actions pious … that I may have it to turn to, and to use as a standard whereby to judge your actions and those of other men. Socrates is asking Euthyphro for what modern computer theorists would call an “effective procedure,” “a set of rules which tells us, from moment to moment, precisely how to behave.\n\n\n“The belief that such a total formalization of knowledge must be possible soon came to dominate Western thought. It already expressed a basic moral and intellectual demand, and the success of physical science seemed to imply to sixteenth-century philosophers, as it still seems to suggest to thinkers such as Minsky, that the demand could be satisfied.”\n\n\nAnother philosopher, Michael Polanyi, explored how knowledge can be tacit - in other words, it cannot be turned to explicit words and rules (The Tacit Dimension).\n\nSociologist Harry Collins, who we presented previously, has also argued about that in his books The Shape of Actions and Artifictional Intelligence. Algorithms still don’t seem to share with us a form of life in order to make sense of the dynamic, situated and embodied character of human life.\n\n\nTake home message: algorithmic intelligence can correctly, and usefully, mimicry some human reasoning. We can be grateful for that. But this can be limited, and there are lots of reasons to believe that our intelligence goes beyond mere mathematical/logical rule-following. Therefore, so far, it seems we haven’t yet seen an undebatable way to mimic human intelligence exhaustively.\nCalvin professor Ken Arnold’s opinion: Avoid Magical Thinking about AI"
  },
  {
    "objectID": "units/04/intelligence.html#critique-1-non-computability",
    "href": "units/04/intelligence.html#critique-1-non-computability",
    "title": "Algorithmic intelligence",
    "section": "",
    "text": "Strictly speaking, there are problems that really can’t be solved by sequential, step-by-step instructions. These are called non-computable problems.\n\nMost of them include problems where there is not a way to determine if the machine will stop running code while searching for a solution (ex.: the Halting Problem).\n\nA simple example: there is no algorithm to solve the 2048 game, famous in 2014.\nHowever, problems like these can have their solution “approximated” with heuristics (exploring different options and seeing which is better). So one could argue that this is the way we think when trying to solve them… even though there is not an “analytical” way to solve."
  },
  {
    "objectID": "units/04/intelligence.html#critique-2-the-chinese-room-experiment",
    "href": "units/04/intelligence.html#critique-2-the-chinese-room-experiment",
    "title": "Algorithmic intelligence",
    "section": "",
    "text": "Proposed by philosopher John Searle in 1980.\n\n\n\nA person who does not understand Chinese sitting in a sealed room with a set of instructions in English for manipulating Chinese symbols. People outside the room slide Chinese symbols under the door, and the person inside follows a translation table to produce appropriate responses in Chinese, without actually comprehending the meaning of the symbols.\nSearle’s argument is that even though the person inside the room can generate responses that seem intelligent to those outside, the person doesn’t truly understand Chinese; they are just manipulating symbols according to a set of rules. Similarly, Searle argues that a computer program that processes symbols according to a set of rules (like many AI systems) may simulate intelligence but does not possess genuine understanding or consciousness."
  },
  {
    "objectID": "units/04/intelligence.html#critique-3-why-are-we-really-wanting-that",
    "href": "units/04/intelligence.html#critique-3-why-are-we-really-wanting-that",
    "title": "Algorithmic intelligence",
    "section": "",
    "text": "Philosopher Hubert Dreyfus made a powerful critique to Classic AI in his 1972 book “What Computers Can’t Do”.\nHis argument is long and complex, and involves noticing that human intelligence is fundamentally embodied and situated in a certain narrative, and since an artificial device wouldn’t have this, it cannot mimic completely how humans reason (we’re exploring a bit of that in a moment).\nIn any case, Dreyfus reflected on the quest for Artificial Intelligence as the quest of almost all Western science and philosophy (emphasis added):\n\n\n“Since the Greeks invented logic and geometry, the idea that all reasoning might be reduced to some kind of calculation so that all arguments could be settled once and for all has fascinated most of the Western tradition’s rigorous thinkers. Socrates was the first to give voice to this vision. The story of artificial intelligence might well begin around 450B.C. when (according to Plato) Socrates demands of Euthyphro, a fellow Athenian who, in the name of piety, is about to turn in his own father for murder:”I want to know what is characteristic of piety which makes all actions pious … that I may have it to turn to, and to use as a standard whereby to judge your actions and those of other men. Socrates is asking Euthyphro for what modern computer theorists would call an “effective procedure,” “a set of rules which tells us, from moment to moment, precisely how to behave.\n\n\n“The belief that such a total formalization of knowledge must be possible soon came to dominate Western thought. It already expressed a basic moral and intellectual demand, and the success of physical science seemed to imply to sixteenth-century philosophers, as it still seems to suggest to thinkers such as Minsky, that the demand could be satisfied.”\n\n\nAnother philosopher, Michael Polanyi, explored how knowledge can be tacit - in other words, it cannot be turned to explicit words and rules (The Tacit Dimension).\n\nSociologist Harry Collins, who we presented previously, has also argued about that in his books The Shape of Actions and Artifictional Intelligence. Algorithms still don’t seem to share with us a form of life in order to make sense of the dynamic, situated and embodied character of human life.\n\n\nTake home message: algorithmic intelligence can correctly, and usefully, mimicry some human reasoning. We can be grateful for that. But this can be limited, and there are lots of reasons to believe that our intelligence goes beyond mere mathematical/logical rule-following. Therefore, so far, it seems we haven’t yet seen an undebatable way to mimic human intelligence exhaustively.\nCalvin professor Ken Arnold’s opinion: Avoid Magical Thinking about AI"
  },
  {
    "objectID": "units/04/nesting-ifs.html",
    "href": "units/04/nesting-ifs.html",
    "title": "Nested ifs",
    "section": "",
    "text": "You can also “nest” an if inside another:\n\n\nif age &gt; 12:\n   if age &lt; 20:\n     print('teenager')\n   else:\n      print('adult')\nelse:\n   print('child')\n\n\nNote that, in this case, whatever is “inside” the two ifs must be indented twice!"
  },
  {
    "objectID": "units/05/activities/flags.html",
    "href": "units/05/activities/flags.html",
    "title": "Pattern: flags",
    "section": "",
    "text": "A flag is a programming pattern: a boolean variable that acts as a signal to the program to determine whether or not the program as a whole or a specific section of the program should run.\n\nFor example, you can set the flag to True and the program will run continuously until any type of event makes it False. Then the program, loop, or whatever you’re using a flag for will stop, or do something else."
  },
  {
    "objectID": "units/05/activities/flags.html#what-are-the-flags-in-this-code",
    "href": "units/05/activities/flags.html#what-are-the-flags-in-this-code",
    "title": "Pattern: flags",
    "section": "What are the flags in this code?",
    "text": "What are the flags in this code?\n\nnewlist = []\nnumber = int(input(\"Enter a number: \"))\nnewlist.append(number)\nascending = True\ndescending = True\nwhile True:\n    next_number = input(\"Enter a number: \")\n    if next_number == '':\n        break\n    if int(next_number) &lt; number:\n        ascending = False\n    else:\n        descending = False\n    newlist.append(int(next_number))\n    number = int(next_number)\nif ascending:\n    print(\"Sequence is in ascending order\")\nelif descending:\n    print(\"Sequence is in descending order\")\nelse:\n    print(\"Sequence is not ordered\")"
  },
  {
    "objectID": "units/05/break-continue.html",
    "href": "units/05/break-continue.html",
    "title": "Break and continue",
    "section": "",
    "text": "A break statement in a loop causes an immediate exit of the loop.\n\n\nsum = 0.0\nwhile True:\n    data = input('Enter a number: ')\n    if data == '':\n        break\n    sum += float(data)\nprint('The sum is', sum)\n\n\nWhat does this code do?\n\n\ni = 0\nwhile i &lt; 5:\n    i += 1\n    if i==2:\n        continue\n    print(i)\n\n1\n3\n4\n5\n\n\n\nWhat does this code do?\nBreaks and continues can sometimes simplify a loop’s structure and improve readability!"
  },
  {
    "objectID": "units/05/for.html",
    "href": "units/05/for.html",
    "title": "For loops",
    "section": "",
    "text": "for variable in &lt;container&gt;:\n    &lt;loop statements&gt;"
  },
  {
    "objectID": "units/05/for.html#examples",
    "href": "units/05/for.html#examples",
    "title": "For loops",
    "section": "Examples",
    "text": "Examples\n\nfor name in [\"Joe\", \"Amy\", \"Brad\", \"Zuki\",\"Thandi\",'Joe']:\n    print(\"Hi\", name, \"how are you?\")\n\nHi Joe how are you?\nHi Amy how are you?\nHi Brad how are you?\nHi Zuki how are you?\nHi Thandi how are you?\nHi Joe how are you?\n\n\n\nfor val in (3, 11, 22, 0, -3):\n    print(val)\n\n3\n11\n22\n0\n-3"
  },
  {
    "objectID": "units/05/nested-loops.html",
    "href": "units/05/nested-loops.html",
    "title": "Nested loops",
    "section": "",
    "text": "Loops can also be placed inside of loops.\nfor x in range(5):\n    print(x, end=' ')\n    for y in range(x,4):\n        print(y, end=' ')\n    print()\nYou can visualize this code at http://www.pythontutor.com/visualize.html\nWhat will this print?"
  },
  {
    "objectID": "units/05/nested-loops.html#example-matrix-creation",
    "href": "units/05/nested-loops.html#example-matrix-creation",
    "title": "Nested loops",
    "section": "Example: matrix creation",
    "text": "Example: matrix creation\n\nmat = []\nlines = int(input(\"Enter the number of lines: \"))\ncols = int(input(\"Enter the number of columns: \"))\nfor i in range(cols):\n  line = []\n  for j in range(lines):\n    x = float(input(f\"Enter the number at line {i} and col {j}: \"))\n    line.append(x)\n  mat.append(line)"
  },
  {
    "objectID": "units/05/repetition-statements.html",
    "href": "units/05/repetition-statements.html",
    "title": "Repetition statements",
    "section": "",
    "text": "Natural and computer languages can describe things that are repeated.\n\n\n“For the LORD is good and his love endures forever; his faithfulness continues through all generations.” Psalm 100?5\n\n\nIn computer science, repetition is portrayed with the metaphor of a loop.\n\n\n\nOne aspect of the LOOP, and in many ways its defining quality, is the minimal means that result in automated infinite production. Is it when writing a simple FOR statement for the first time, counting to, say, 10 and printing to the screen at each iteration, that the novice programmer “Beheld the living traces and the sky-pointing proportions of the mighty Pan”?\n- Wilfried Hou Je Bek, “Loops”, in “Software studies: a lexicon”\n\n\n\n\nEvery time we use a loop, we are pronouncing a judgment about what similar and what is different.\nEvery time we use a loop, we are pronouncing a judgment about what can be scaled.\n\n\n\n\n\n\nDefinite iteration: Loops that repeat a predefined number of times - the FOR statement\nIndefinite iteration: Loops that continue until a condition occurs - the WHILE statement\n\n\n“Although often interchangeable, FOR is like a tourist that knows when it will be home (but with the power to RETURN earlier), WHILE is like a traveller away for as long as there is no hard reason to come back, potentially forever.”\n- Wilfried Hou Je Bek, “Loops”, in “Software studies: a lexicon”"
  },
  {
    "objectID": "units/05/repetition-statements.html#two-types-of-loops",
    "href": "units/05/repetition-statements.html#two-types-of-loops",
    "title": "Repetition statements",
    "section": "",
    "text": "Definite iteration: Loops that repeat a predefined number of times - the FOR statement\nIndefinite iteration: Loops that continue until a condition occurs - the WHILE statement\n\n\n“Although often interchangeable, FOR is like a tourist that knows when it will be home (but with the power to RETURN earlier), WHILE is like a traveller away for as long as there is no hard reason to come back, potentially forever.”\n- Wilfried Hou Je Bek, “Loops”, in “Software studies: a lexicon”"
  },
  {
    "objectID": "units/05/while.html",
    "href": "units/05/while.html",
    "title": "While loops",
    "section": "",
    "text": "Conditional iteration tests a condition to determine if a loop should continue\nCalled continuation condition\n\n\nwhile &lt;condition&gt;:\n    &lt;loop statements&gt;"
  },
  {
    "objectID": "units/05/while.html#examples",
    "href": "units/05/while.html#examples",
    "title": "While loops",
    "section": "Examples",
    "text": "Examples\n\nx = 10\nwhile x &gt; 0:\n    print(x)\n    x = x - 1\n\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n\n\ncount = 0\nwhile (count &lt; 10):\n   # Point A\n   print (\"Olá...\", count)\n   count = count + 1\n   # Point B\n# Point C\n\nConsider the following affirmations and say if they are right or wrong:\n\ncount &lt; 10 is always True at point C.\ncount &lt; 10 is always False at point B.\ncount &lt; 10 is always True at point A.\ncount &lt; 10 is always False at point C.\ncount &lt; 10 is always True at point B."
  },
  {
    "objectID": "units/06/activities/common-errors.html",
    "href": "units/06/activities/common-errors.html",
    "title": "Exercises: where are the errors?",
    "section": "",
    "text": "What are the problems in the following code and how can we correct them?\n\n\ndef xyz(p1, 'hello'):\n    print(p1)\n\n\nPS: printing a value in a function is not the same thing as returning it\n\nWhat is the difference between printing and returning?\n\nNow, repeat with these (point error and correct it):\n\n\nx1 = int(input())\nx2 = int(input())\nres = add(x1, x2)\nprint(\"The sum is: \", res)\n\ndef add(a, b):\n  c = a + b\n  return c\n\n\ndef fun(x):\n  print(x, end=' ')\n  fun(x-1)\n\nfun(10)"
  },
  {
    "objectID": "units/06/functions.html",
    "href": "units/06/functions.html",
    "title": "Functions",
    "section": "",
    "text": "Functions in Python are ways to “encapsulate” parts of code in order to be organized and reused\nA programmer who uses a function does not need to know how a function works. He just informs the inputs and outputs!\nExample: math.sqrt(3)\n\nInput: what is inside the parentheses: 3\nOutput: what is the expression evaluated to: 1.7320508075688772"
  },
  {
    "objectID": "units/06/functions.html#why-use-functions",
    "href": "units/06/functions.html#why-use-functions",
    "title": "Functions",
    "section": "Why use functions?",
    "text": "Why use functions?\n\nPrograms could be written without functions and all code written in one block, but:\n\nthe program it would become large\na lot of code would be duplicated\n\nBreaking big programs into smaller functions:\n\nallows work to be divided among several programmers\nenables functions to be re-used in other programs\nmakes testing and maintenance easier\nimproves readability"
  },
  {
    "objectID": "units/06/functions.html#defining-a-function",
    "href": "units/06/functions.html#defining-a-function",
    "title": "Functions",
    "section": "Defining a function",
    "text": "Defining a function\n\nPython has many built-in functions like print(), but you can also create your own functions\n\nthese functions are called user-defined functions\n\n\n\ndef function_name():\n    statement1\n    statement2\n\n\nThe code to be executed when the function is called needs to be indented - “inside” the function definition\n\nThe code inside the definition will not run unless it is called later!\n\nThe name for a function should follow the same general rules as for variables - as they also are variables pointing to objects.\n\nFunctions are also objects: of the “callable” type. Check, for example, type(print)."
  },
  {
    "objectID": "units/06/functions.html#examples",
    "href": "units/06/functions.html#examples",
    "title": "Functions",
    "section": "Examples",
    "text": "Examples\n\n\n\n# define the function\ndef greeter():\n    print('Hello world!')\n\n# call the function\ngreeter()\n\nHello world!\n\n\n\n\n# define function\ndef print_square():\n    print('****')\n    print('****')\n    print('****')\n    print('****')\n\n# call the function\nprint_square()\n\n****\n****\n****\n****\n\n\n\n\n\nWhat is the flow of execution of the programs above? (state the sequence using the line numbers)"
  },
  {
    "objectID": "units/06/network-power.html",
    "href": "units/06/network-power.html",
    "title": "Network power",
    "section": "",
    "text": "Network power\n\nIn our world, to have power is to become a “network hub” - “everything that people do needs to pass through you”\n\n“For in Him we live and move and exist…”"
  },
  {
    "objectID": "units/06/scope.html",
    "href": "units/06/scope.html",
    "title": "Variable scope",
    "section": "",
    "text": "Every Python variable has a scope, defining where it is created and who/when this variable can be accessed\nGLOBAL SCOPE: all functions have access to them.\n\nThese are created in the program’s main code chunk (“outside functions”)\n\nLOCAL SCOPE: only the function who created it has access to it\n\nParameters are also local variables\nLocal variables cease to exist when the function finishes!\na = 5 # a is a global variable\nb = a + 1 # b is a global variable\n\ndef fun(d): # d, as a parameter, is a local variable\n  c = 7 + a + d # c is a local variable\n  print(c)\n\n\nfun(1)\n\n13"
  },
  {
    "objectID": "units/06/scope.html#scope-rules",
    "href": "units/06/scope.html#scope-rules",
    "title": "Variable scope",
    "section": "Scope rules",
    "text": "Scope rules\n\nVariables in different scopes can have the same names!\n\n\na = 5\n\ndef fun1():\n  a = 1\n  print(a)\n\ndef fun2():\n  a = 3\n  print(a)\n\nprint(a)\n\n5"
  },
  {
    "objectID": "units/06/scope.html#scope-rules-1",
    "href": "units/06/scope.html#scope-rules-1",
    "title": "Variable scope",
    "section": "Scope rules",
    "text": "Scope rules\n\nLocal variables have precedence over global variables!\n\n\na = 5\n\ndef fun1():\n  a = 1\n  print(a)\n\ndef fun2():\n  a = 3\n  print(a)\n\nfun1()\nfun2()\nprint(a)\n\n1\n3\n5"
  },
  {
    "objectID": "units/06/scope.html#example",
    "href": "units/06/scope.html#example",
    "title": "Variable scope",
    "section": "Example",
    "text": "Example\n\nWhat are the local and global variables in the following program?\n\n\nx=4\n\ndef main():\n  f1(3)\n  f2(3)\n  print(x)\n\ndef f1(a):\n  x = 10\n  print('f1',a+x)\n  \ndef f2(a):\n  c=10\n  print('f2',a+x+c)\n\nmain()\n\nf1 13\nf2 17\n4"
  },
  {
    "objectID": "units/07/activities/shapes-and-areas.html",
    "href": "units/07/activities/shapes-and-areas.html",
    "title": "Exercise: shapes and areas",
    "section": "",
    "text": "Exercise: shapes and areas\n\nLet’s implement a general class called Shape and two subclasses called Circle and Rectangle\n\nOverload the __eq__ operator to compare the shapes’ areas\nOverride the constructor methods: Rectangle should have width and height, and Circle should have radius\nWrite methods that calculate the areas of the shapes. When you have only the generic Shape object, area should be equal to zero.\nwhat about trying to implement the rendering of these shapes with turtle graphics?"
  },
  {
    "objectID": "units/07/constructor.html",
    "href": "units/07/constructor.html",
    "title": "Constructor method: __init__()",
    "section": "",
    "text": "The special method __init__ is important in almost class. It is called the constructor method and runs automatically when user instantiates an object.\nIt is important to include the self parameter - this refers to the object itself!\n\n\nclass Dog(): # definition of the class (\"blueprint\")\n  \n  def __init__(self, breed, age, color):\n    self.breed = breed\n    self.age = age\n    self.color = color\n    \n    \n# main code chunk\na = Dog('pug', 3, 'black')\nb = Dog('boxer', 2, 'white')\nprint(a.breed)\n\npug"
  },
  {
    "objectID": "units/07/operator-overloading.html",
    "href": "units/07/operator-overloading.html",
    "title": "Operator overloading",
    "section": "",
    "text": "You can redefine the functionality of Python built-in operators to work with your class (like +, -, *, etc).\nFor example, to compare cards of different ranks, you define the methods corresponding to __lt__ (&lt;) and __gt__ (&gt;)\n\n\nclass Card():\n  \n  ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n  \n  def __init__(self, rank, suit):\n    self.rank = rank\n    self.suit = suit\n    \n  def __lt__(self, other):\n    return Card.ranks.index(self.rank) &lt; Card.ranks.index(other.rank)\n  \n  def __gt__(self, other):\n    return Card.ranks.index(self.rank) &gt; Card.ranks.index(other.rank)\n    \ncard1 = Card('2', 'clubs')\ncard2 = Card('K', 'diamonds')\nprint(card1 &lt; card2)\n\nTrue\n\n\n\nAll the operators you can overload can be found in this link."
  },
  {
    "objectID": "units/08/all.html",
    "href": "units/08/all.html",
    "title": "List slicing",
    "section": "",
    "text": "Lists, dictionaries, strings\n\nMethods\nSlicing\nIterating\nNesting\n\n\nList slicing\n\n\nIterating over lists\n\n\nIterating over dictionaries\n\nString formatting"
  },
  {
    "objectID": "units/10/guizero-elements.html",
    "href": "units/10/guizero-elements.html",
    "title": "GUIZero",
    "section": "",
    "text": "GUIZero"
  },
  {
    "objectID": "units/10/navigational-elements.html",
    "href": "units/10/navigational-elements.html",
    "title": "Navigational Elements",
    "section": "",
    "text": "like in Thonny\n\n\n\n\n\n\n\n\n\nJames K. A. Smith"
  },
  {
    "objectID": "units/10/navigational-elements.html#others",
    "href": "units/10/navigational-elements.html#others",
    "title": "Navigational Elements",
    "section": "",
    "text": "like in Thonny\n\n\n\n\n\n\n\n\n\nJames K. A. Smith"
  },
  {
    "objectID": "units/11/binary-files.html",
    "href": "units/11/binary-files.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.5"
  },
  {
    "objectID": "units/11/file-system.html",
    "href": "units/11/file-system.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.2"
  },
  {
    "objectID": "units/11/operational-system.html",
    "href": "units/11/operational-system.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.1"
  },
  {
    "objectID": "units/11/text-files.html",
    "href": "units/11/text-files.html",
    "title": "CS-108-A (Introduction to Computing) at Calvin University",
    "section": "",
    "text": "1.4"
  }
]